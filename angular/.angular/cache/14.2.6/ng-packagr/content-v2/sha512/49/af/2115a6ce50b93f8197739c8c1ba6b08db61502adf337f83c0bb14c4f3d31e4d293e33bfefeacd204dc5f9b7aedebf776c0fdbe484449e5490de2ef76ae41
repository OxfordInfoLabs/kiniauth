{"hash":"512d4a2c14a7a5d98e8cf0a7692fb5650c01e2bd","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Component, Input, Injectable, EventEmitter, ViewEncapsulation, Output, Directive, NgModule } from '@angular/core';\nimport { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/internal/BehaviorSubject';\nimport * as lodash from 'lodash';\nimport * as sha512 from 'js-sha512';\nimport * as i3$1 from '@angular/common/http';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { debounceTime, distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport * as i1 from 'ng-kinibind';\nimport { KinibindModel, NgKinibindModule } from 'ng-kinibind';\nimport * as i2$1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs/internal/Subject';\nimport * as i2 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i5 from 'ng-recaptcha';\nimport { RecaptchaModule } from 'ng-recaptcha';\nimport { BehaviorSubject, Subject as Subject$1, merge } from 'rxjs';\nimport * as i6 from '@angular/material/paginator';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport * as i6$1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i9 from '@angular/material/menu';\nimport { MatMenuModule } from '@angular/material/menu';\nimport * as i7$1 from '@angular/material/tabs';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport * as i7$2 from '@angular/material/table';\nimport { MatTableModule } from '@angular/material/table';\nimport * as i8 from '@angular/material/chips';\nimport { MatChipsModule } from '@angular/material/chips';\nimport * as i9$1 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nclass BaseComponent {\n    constructor(kcAuthService) {\n        this.kcAuthService = kcAuthService;\n    }\n    ngOnInit() {\n        this.authService = this.authenticationService ? this.authenticationService : this.kcAuthService;\n    }\n}\nBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: BaseComponent, deps: [{ token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: BaseComponent, selector: \"ka-base-component\", inputs: { authenticationService: \"authenticationService\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: BaseComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ka-base-component',\n                    template: ''\n                }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }]; }, propDecorators: { authenticationService: [{\n                type: Input\n            }] } });\n\nconst _$9 = lodash.default;\nclass AccountService {\n    constructor(kbRequest, config, authService) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n        this.authService = authService;\n    }\n    getAccount(accountId) {\n        const accountString = accountId ? `/${accountId}` : '';\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account' + accountString).toPromise()\n            .catch(err => {\n            return null;\n        });\n    }\n    searchForAccounts(searchString, limit, offset) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account', {\n            params: _$9.pickBy({ searchString, limit, offset }, _$9.identity)\n        });\n    }\n    createAccount(accountName, emailAddress = null, rawPassword = null, name = null) {\n        let password = rawPassword;\n        if (rawPassword) {\n            password = this.authService.getHashedPassword(rawPassword, emailAddress, true);\n        }\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account', _$9.omitBy({ accountName, emailAddress, password, name }, _$9.isNil)).toPromise();\n    }\n    suspendAccount(accountId, note) {\n        return this.kbRequest.makeRequest('PUT', this.config.accessHttpURL + '/account/' + accountId + '/suspend', {\n            params: { note }\n        })\n            .toPromise();\n    }\n    updateAccountName(accountId, newAccountName) {\n        return this.kbRequest.makeRequest('PUT', this.config.accessHttpURL + '/account/' + accountId + '/name', {\n            params: { newAccountName }\n        })\n            .toPromise();\n    }\n    reactivateAccount(accountId, note) {\n        return this.kbRequest.makeRequest('PUT', this.config.accessHttpURL + '/account/' + accountId + '/reactivate', {\n            params: { note }\n        })\n            .toPromise();\n    }\n    changeAccountName(newName, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account/changeName', {\n            newName,\n            password: this.authService.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return true;\n            }\n        });\n    }\n    inviteUserToAccount(emailAddress, assignedRoles) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account/invite?emailAddress=' + emailAddress, assignedRoles).toPromise();\n    }\n}\nAccountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Injectable });\nAccountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }, { type: AuthenticationService }]; } });\n\nclass EditNameComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newName = '';\n        this.currentPassword = '';\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    ngOnDestroy() {\n    }\n    saveNewName() {\n        this.saveError = '';\n        this.authService.changeUserName(this.newName, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            this.saveError = 'There was a problem updating your details, please check and try again.';\n        });\n    }\n}\nEditNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditNameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditNameComponent, selector: \"ka-edit-name\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your user name. You will be required to confirm you identity by entering your password\\n                prior to saving the new name.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new name you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newName\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newName || !currentPassword\\\" (click)=\\\"saveNewName()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Save Changes</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditNameComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-name', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your user name. You will be required to confirm you identity by entering your password\\n                prior to saving the new name.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new name you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newName\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newName || !currentPassword\\\" (click)=\\\"saveNewName()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Save Changes</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass EditEmailComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newEmailAddress = '';\n        this.currentPassword = '';\n        this.emailAvailable = true;\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    ngOnDestroy() {\n    }\n    checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n    saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserEmailAddress(this.newEmailAddress, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            if (err.error.validationErrors.emailAddress.email.errorMessage) {\n                this.saveError = 'Email error: ' + err.error.validationErrors.emailAddress.email.errorMessage;\n            }\n            else {\n                this.saveError = 'There was a problem changing the email address, please check and try again.';\n            }\n        });\n    }\n}\nEditEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditEmailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditEmailComponent, selector: \"ka-edit-email\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your email address. You will be required to confirm you identity by entering your password\\n                prior to saving the new email address.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new email address you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"email\\\" #email=\\\"ngModel\\\" name=\\\"email\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n                               (change)=\\\"checkEmail()\\\" placeholder=\\\"New email address\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\\\"\\n                    (click)=\\\"saveEmailAddress()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update email address</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditEmailComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-email', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your email address. You will be required to confirm you identity by entering your password\\n                prior to saving the new email address.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new email address you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"email\\\" #email=\\\"ngModel\\\" name=\\\"email\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n                               (change)=\\\"checkEmail()\\\" placeholder=\\\"New email address\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\\\"\\n                    (click)=\\\"saveEmailAddress()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update email address</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass TwoFactorComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n            return user;\n        }).then(() => {\n            this.authService.generateTwoFactorSettings().then(settings => {\n                this.settings = settings;\n            });\n        });\n    }\n    verifyCode() {\n        this.authService.authenticateNewTwoFactor(this.twoFACode, this.settings.secret)\n            .then(res => {\n            this.saved.emit(res);\n        });\n    }\n}\nTwoFactorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: TwoFactorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTwoFactorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: TwoFactorComponent, selector: \"ka-two-factor\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<ng-template [ngIf]=\\\"settings\\\">\\n    <div class=\\\"font-medium text-lg ml-6 mt-4\\\">Google Authenticator</div>\\n\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            After downloading and installing the Google Authenticator app, scan the QR code below\\n                            to link your account.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <img [src]=\\\"settings.qrCode\\\" alt=\\\"\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            If you are unable to scan the QR code below, please enter the following code...</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"text\\\" name=\\\"name\\\" [value]=\\\"settings.secret\\\" disabled\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md cursor-text\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Once linked, please enter the verification code you see in the Google Authenticator app\\n                            below.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"twoFACode\\\" maxlength=\\\"10\\\"\\n                                   placeholder=\\\"Enter verification code\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n\\n                            <button type=\\\"button\\\" [disabled]=\\\"!twoFACode\\\" (click)=\\\"verifyCode()\\\"\\n                                    class=\\\"mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                                Verify Code\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"font-medium ml-6 text-lg\\\">Backup Codes</div>\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            The following one-time codes can be used if you need to gain access to your account in an\\n                            emergency.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <div *ngFor=\\\"let code of settings.backupCodes\\\">{{code}}</div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: TwoFactorComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-two-factor', encapsulation: ViewEncapsulation.None, template: \"<ng-template [ngIf]=\\\"settings\\\">\\n    <div class=\\\"font-medium text-lg ml-6 mt-4\\\">Google Authenticator</div>\\n\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            After downloading and installing the Google Authenticator app, scan the QR code below\\n                            to link your account.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <img [src]=\\\"settings.qrCode\\\" alt=\\\"\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            If you are unable to scan the QR code below, please enter the following code...</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"text\\\" name=\\\"name\\\" [value]=\\\"settings.secret\\\" disabled\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md cursor-text\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Once linked, please enter the verification code you see in the Google Authenticator app\\n                            below.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"twoFACode\\\" maxlength=\\\"10\\\"\\n                                   placeholder=\\\"Enter verification code\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n\\n                            <button type=\\\"button\\\" [disabled]=\\\"!twoFACode\\\" (click)=\\\"verifyCode()\\\"\\n                                    class=\\\"mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                                Verify Code\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"font-medium ml-6 text-lg\\\">Backup Codes</div>\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            The following one-time codes can be used if you need to gain access to your account in an\\n                            emergency.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <div *ngFor=\\\"let code of settings.backupCodes\\\">{{code}}</div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass InlineModalComponent {\n    constructor() {\n        this.closed = new EventEmitter();\n    }\n    ngOnInit() {\n    }\n    back() {\n        this.closed.emit(true);\n    }\n}\nInlineModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InlineModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nInlineModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: InlineModalComponent, selector: \"ka-inline-modal\", outputs: { closed: \"closed\" }, ngImport: i0, template: \"<div class=\\\"inline-modal\\\">\\n\\n    <div class=\\\"flex pt2 px2 justify-end\\\">\\n        <a class=\\\"close-link\\\" (click)=\\\"back()\\\">\\n            &#10005;\\n        </a>\\n    </div>\\n\\n    <div class=\\\"grid grid-desktop my2 px1\\\">\\n\\n        <ng-content></ng-content>\\n\\n    </div>\\n\\n\\n</div>\\n\", styles: [\".inline-modal{background-color:#f5f5f5;position:absolute;inset:0;z-index:99;height:calc(100vh - 110px)}.inline-modal .close-link{font-size:1.4rem;text-decoration:none}\\n\"], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InlineModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-inline-modal', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"inline-modal\\\">\\n\\n    <div class=\\\"flex pt2 px2 justify-end\\\">\\n        <a class=\\\"close-link\\\" (click)=\\\"back()\\\">\\n            &#10005;\\n        </a>\\n    </div>\\n\\n    <div class=\\\"grid grid-desktop my2 px1\\\">\\n\\n        <ng-content></ng-content>\\n\\n    </div>\\n\\n\\n</div>\\n\", styles: [\".inline-modal{background-color:#f5f5f5;position:absolute;inset:0;z-index:99;height:calc(100vh - 110px)}.inline-modal .close-link{font-size:1.4rem;text-decoration:none}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { closed: [{\n                type: Output,\n                args: ['closed']\n            }] } });\n\nclass EditBackupEmailComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newEmailAddress = '';\n        this.currentPassword = '';\n        this.emailAvailable = true;\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n    saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserBackEmailAddress(this.newEmailAddress, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            this.saveError = 'There was a problem changing the email address, please check and try again.';\n        });\n    }\n}\nEditBackupEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditBackupEmailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditBackupEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditBackupEmailComponent, selector: \"ka-edit-backup-email\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your backup email address. You will be required to confirm you identity by entering your password\\n                prior to saving the new email address.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new email address you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"email\\\" placeholder=\\\"New email address\\\" name=\\\"email\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n                               (change)=\\\"checkEmail()\\\" email #email=\\\"ngModel\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\\\"\\n                    (click)=\\\"saveEmailAddress()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update email address</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.EmailValidator, selector: \"[email][formControlName],[email][formControl],[email][ngModel]\", inputs: [\"email\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditBackupEmailComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-backup-email', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your backup email address. You will be required to confirm you identity by entering your password\\n                prior to saving the new email address.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new email address you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"email\\\" placeholder=\\\"New email address\\\" name=\\\"email\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n                               (change)=\\\"checkEmail()\\\" email #email=\\\"ngModel\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\\\"\\n                    (click)=\\\"saveEmailAddress()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update email address</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass EditMobileComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newMobile = '';\n        this.currentPassword = '';\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    saveMobileNumber() {\n        this.saveError = '';\n        this.authService.changeUserMobile(this.newMobile, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            if (err.error.validationErrors.mobileNumber.regexp.errorMessage) {\n                this.saveError = 'Number error: ' + err.error.validationErrors.mobileNumber.regexp.errorMessage;\n            }\n            else {\n                this.saveError = 'There was a problem changing the mobile number, please check and try again.';\n            }\n        });\n    }\n}\nEditMobileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditMobileComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditMobileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditMobileComponent, selector: \"ka-edit-mobile\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your mobile number. You will be required to confirm you identity by entering your password\\n                prior to saving the new number.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new mobile number you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newMobile\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newMobile || !currentPassword\\\" (click)=\\\"saveMobileNumber()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update mobile number</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditMobileComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-mobile', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your mobile number. You will be required to confirm you identity by entering your password\\n                prior to saving the new number.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new mobile number you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newMobile\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newMobile || !currentPassword\\\" (click)=\\\"saveMobileNumber()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update mobile number</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass EditAccountNameComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newName = '';\n        this.currentPassword = '';\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    ngOnDestroy() {\n    }\n    saveNewName() {\n        this.saveError = '';\n        this.accountService.changeAccountName(this.newName, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            this.saveError = 'There was a problem changing the account name, please check and try again.';\n        });\n    }\n}\nEditAccountNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditAccountNameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditAccountNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditAccountNameComponent, selector: \"ka-edit-account-name\", inputs: { authService: \"authService\", accountService: \"accountService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your account name. You will be required to confirm you identity by entering your password\\n                prior to saving the new name.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new name you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newName\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newName || !currentPassword\\\" (click)=\\\"saveNewName()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Save Changes</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditAccountNameComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-account-name', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your account name. You will be required to confirm you identity by entering your password\\n                prior to saving the new name.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new name you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newName\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newName || !currentPassword\\\" (click)=\\\"saveNewName()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Save Changes</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], accountService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nconst _$8 = lodash.default;\nclass ChangePasswordComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.saveError = false;\n        this.changeComplete = false;\n        this.isLengthOk = false;\n        this.isLowerCaseOk = false;\n        this.isUpperCaseOk = false;\n        this.isDigitOk = false;\n        this.isSpecialOk = false;\n        this.isPasswordOk = false;\n    }\n    ngOnInit() {\n    }\n    passwordChange() {\n        const strongPassword = new RegExp('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})');\n        this.isPasswordOk = strongPassword.test(this.password);\n        const lower = new RegExp('(?=.*[a-z])');\n        const upper = new RegExp('(?=.*[A-Z])');\n        const digit = new RegExp('(?=.*[0-9])');\n        const special = new RegExp('(?=.*[^A-Za-z0-9])');\n        const length = new RegExp('(?=.{8,})');\n        this.isLengthOk = length.test(this.password);\n        this.isLowerCaseOk = lower.test(this.password);\n        this.isUpperCaseOk = upper.test(this.password);\n        this.isDigitOk = digit.test(this.password);\n        this.isSpecialOk = special.test(this.password);\n    }\n    saveNewPassword() {\n        this.saveError = false;\n        this.authService.changeUserPassword(this.confirmPassword, this.existingPassword, this.email)\n            .then(() => {\n            this.changeComplete = true;\n            setTimeout(() => {\n                this.saved.emit(Date.now());\n            }, 3000);\n        })\n            .catch(err => {\n            this.saveError = true;\n            setTimeout(() => {\n                this.saved.emit(Date.now());\n            }, 3000);\n        });\n    }\n}\nChangePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ChangePasswordComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChangePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: ChangePasswordComponent, selector: \"ka-change-password\", inputs: { email: \"email\", authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n              d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n    </svg>\\n    <div class=\\\"text-lg\\\">There was a problem changing your password at this time, please check your details and\\n        try again.\\n    </div>\\n</div>\\n\\n<div *ngIf=\\\"changeComplete\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n    </svg>\\n    <div class=\\\"text-lg\\\">Your password has been successfully changed.</div>\\n</div>\\n<ng-template [ngIf]=\\\"!saveError && !changeComplete\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n\\n            <div>\\n                <div class=\\\"mb-8\\\">\\n                    Change your existing password. You will need to enter your current password to confirm the changes.\\n                </div>\\n                <div class=\\\"font-medium text-base mb-4\\\">New Password</div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Enter the new password to use.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2 \\\">\\n                            <input type=\\\"password\\\" name=\\\"name\\\" [(ngModel)]=\\\"password\\\" (ngModelChange)=\\\"passwordChange()\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n\\n                            <div class=\\\"mt-2 text-gray-500\\\">\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isLengthOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isLengthOk, invisible: !isLengthOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                          class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>8 characters</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isLowerCaseOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isLowerCaseOk, invisible: !isLowerCaseOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one lower case</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isUpperCaseOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isUpperCaseOk, invisible: !isUpperCaseOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one upper case</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isDigitOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isDigitOk, invisible: !isDigitOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one number</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isSpecialOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isSpecialOk, invisible: !isSpecialOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one special character</b>\\n                                </div>\\n                            </div>\\n\\n\\n                        </div>\\n\\n                    </div>\\n                </div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Confirm new password.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                            <span class=\\\"text-sm text-red-600\\\"\\n                                  [ngClass]=\\\"{visible: confirmPassword && password !== confirmPassword, invisible: !confirmPassword || password === confirmPassword}\\\">Passwords do not match</span>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"font-medium text-base my-4\\\">Existing Password</div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Enter your existing password.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"password\\\" name=\\\"name\\\" [(ngModel)]=\\\"existingPassword\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"pt-5\\\">\\n            <div class=\\\"flex justify-end\\\">\\n                <button type=\\\"button\\\" (click)=\\\"saveNewPassword()\\\"\\n                        [disabled]=\\\"!isPasswordOk || !existingPassword || (!confirmPassword || confirmPassword !== password)\\\"\\n                        class=\\\"disabled:opacity-50 ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                    Save New Password\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ChangePasswordComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-change-password', template: \"<div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n              d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n    </svg>\\n    <div class=\\\"text-lg\\\">There was a problem changing your password at this time, please check your details and\\n        try again.\\n    </div>\\n</div>\\n\\n<div *ngIf=\\\"changeComplete\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n    </svg>\\n    <div class=\\\"text-lg\\\">Your password has been successfully changed.</div>\\n</div>\\n<ng-template [ngIf]=\\\"!saveError && !changeComplete\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n\\n            <div>\\n                <div class=\\\"mb-8\\\">\\n                    Change your existing password. You will need to enter your current password to confirm the changes.\\n                </div>\\n                <div class=\\\"font-medium text-base mb-4\\\">New Password</div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Enter the new password to use.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2 \\\">\\n                            <input type=\\\"password\\\" name=\\\"name\\\" [(ngModel)]=\\\"password\\\" (ngModelChange)=\\\"passwordChange()\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n\\n                            <div class=\\\"mt-2 text-gray-500\\\">\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isLengthOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isLengthOk, invisible: !isLengthOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                          class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>8 characters</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isLowerCaseOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isLowerCaseOk, invisible: !isLowerCaseOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one lower case</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isUpperCaseOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isUpperCaseOk, invisible: !isUpperCaseOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one upper case</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isDigitOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isDigitOk, invisible: !isDigitOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one number</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isSpecialOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isSpecialOk, invisible: !isSpecialOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one special character</b>\\n                                </div>\\n                            </div>\\n\\n\\n                        </div>\\n\\n                    </div>\\n                </div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Confirm new password.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                            <span class=\\\"text-sm text-red-600\\\"\\n                                  [ngClass]=\\\"{visible: confirmPassword && password !== confirmPassword, invisible: !confirmPassword || password === confirmPassword}\\\">Passwords do not match</span>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"font-medium text-base my-4\\\">Existing Password</div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Enter your existing password.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"password\\\" name=\\\"name\\\" [(ngModel)]=\\\"existingPassword\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"pt-5\\\">\\n            <div class=\\\"flex justify-end\\\">\\n                <button type=\\\"button\\\" (click)=\\\"saveNewPassword()\\\"\\n                        [disabled]=\\\"!isPasswordOk || !existingPassword || (!confirmPassword || confirmPassword !== password)\\\"\\n                        class=\\\"disabled:opacity-50 ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                    Save New Password\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { email: [{\n                type: Input\n            }], authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass AccountSummaryComponent extends BaseComponent {\n    constructor(kcAuthService, accountService) {\n        super(kcAuthService);\n        this.accountService = accountService;\n        this.showPasswordReset = true;\n        this.showAccountDetails = true;\n        this.reloadTwoFactor = new Subject();\n        this.isLoading = true;\n        this.editName = false;\n        this.editAccountName = false;\n        this.editEmail = false;\n        this.editMobile = false;\n        this.editBackup = false;\n        this.enableTwoFa = false;\n        this.changePassword = false;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.loadAccount();\n        this.userSub = this.authService.authUser.subscribe(user => this.security = user);\n        return this.authService.getLoggedInUser();\n    }\n    ngOnDestroy() {\n        this.userSub.unsubscribe();\n    }\n    loadAccount() {\n        this.editAccountName = false;\n        this.accountService.getAccount().then(account => {\n            this.account = account;\n        });\n    }\n    resetAccountPassword() {\n        const message = 'We are going to reset the account password to a temporary one and email the registered ' +\n            'email address. Are you sure you wish to proceed?';\n        if (window.confirm(message)) {\n            this.authService.resetAccountPassword();\n        }\n    }\n    disable2FA() {\n        const message = 'Are you sure you would like to turn off Two Factor Authentication?';\n        if (window.confirm(message)) {\n            this.authService.disableTwoFactor().then(() => {\n                this.reloadTwoFactor.next(true);\n            });\n        }\n    }\n}\nAccountSummaryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountSummaryComponent, deps: [{ token: AuthenticationService }, { token: AccountService }], target: i0.ɵɵFactoryTarget.Component });\nAccountSummaryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: AccountSummaryComponent, selector: \"ka-account-summary\", inputs: { authenticationService: \"authenticationService\", showPasswordReset: \"showPasswordReset\", showAccountDetails: \"showAccountDetails\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template [ngIf]=\\\"!editName && !editEmail && !editBackup && !editMobile && !enableTwoFa && !changePassword\\\">\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\" *ngIf=\\\"account && showAccountDetails\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Account Details</h4>\\n\\n            <p class=\\\"mb0\\\" *ngIf=\\\"security\\\">Your account name is currently set to\\n                <strong>{{account.name}}</strong></p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editAccountName = true;\\\">Edit Account Name\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <img src=\\\"https://www.gravatar.com/avatar/{{security.hashedEmail}}?d=mp\\\" height=\\\"40\\\" alt=\\\"user-gravatar\\\"\\n                     class=\\\"mr1 mr-4\\\">\\n                {{security.name}}\\n            </h4>\\n\\n            <div class=\\\"mb1\\\">\\n                <p *ngIf=\\\"security\\\">If you need to update your name, you can do so here.</p>\\n            </div>\\n\\n            <div *ngIf=\\\"security\\\">\\n                <p class=\\\"mb0\\\">Your user icon is based on your Gravatar image. You can easily create/edit your image by visiting the <a href=\\\"https://gravatar.com\\\" target=\\\"_blank\\\">Gravatar website.</a></p>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editName = true;\\\">Edit Name\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Email Address</h4>\\n\\n            <p class=\\\"mb0\\\" *ngIf=\\\"security\\\">Your account email address is currently set to\\n                <strong>{{security.emailAddress}}</strong></p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editEmail = true;\\\">Edit Email\\n                Address\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\" *ngIf=\\\"showPasswordReset\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Password</h4>\\n\\n            <p class=\\\"mb0\\\">Change your existing password.</p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"changePassword = true\\\">Change Password</button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Mobile Phone Number</h4>\\n\\n            <p *ngIf=\\\"security && security.mobileNumber\\\">Your mobile number is currently set to\\n                <strong>{{security.mobileNumber}}</strong></p>\\n\\n            <p *ngIf=\\\"security && !security.mobileNumber\\\"><strong>\\n                No mobile number has been set.\\n            </strong></p>\\n\\n            <p class=\\\"mb0\\\">\\n                We use your mobile phone number as an extra layer of security. It can also be used to help restore\\n                access to your account.\\n            </p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editMobile = true;\\\">Edit Mobile Number</button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Backup Email Address</h4>\\n\\n            <p *ngIf=\\\"security && security.backupEmailAddress\\\">Your account backup email address is currently set to\\n                <strong>{{security.backupEmailAddress}}</strong></p>\\n\\n            <p *ngIf=\\\"security && !security.backupEmailAddress\\\"><strong>\\n                No backup email address has been set.\\n            </strong></p>\\n\\n            <p class=\\\"mb0\\\">\\n                In the event you need to restore access to your account we can use this secondary email address\\n                to help you gain access.\\n            </p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editBackup = true;\\\">Edit Email Address</button>\\n        </div>\\n\\n    </div>\\n\\n<!--    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">-->\\n\\n<!--        <div class=\\\"actioninfo p2w p1m\\\">-->\\n<!--            <h4 class=\\\"mb1 mt0\\\">Two Factor Authentication</h4>-->\\n\\n<!--            <p class=\\\"mb0\\\">-->\\n<!--                To increase security on your account you can enable two factor authentication. Currently this uses the-->\\n<!--                Google Authenticator app downloadable for your mobile device.-->\\n<!--            </p>-->\\n\\n<!--        </div>-->\\n<!--        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">-->\\n\\n<!--            <span *ngIf=\\\"!security\\\">Loading...</span>-->\\n\\n<!--            <button class=\\\"button small-button white-button\\\" (click)=\\\"enableTwoFa = true\\\"-->\\n<!--                    *ngIf=\\\"security && !security.twoFactorData\\\">-->\\n<!--                Enable 2FA-->\\n<!--            </button>-->\\n<!--            <button class=\\\"button small-button alert-button\\\" *ngIf=\\\"security && security.twoFactorData\\\"-->\\n<!--                    (click)=\\\"disable2FA()\\\">-->\\n<!--                Disable 2FA-->\\n<!--            </button>-->\\n<!--        </div>-->\\n\\n<!--    </div>-->\\n\\n</ng-template>\\n<ka-inline-modal *ngIf=\\\"editName\\\" (closed)=\\\"editName = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit User Name</div>\\n    <ka-edit-name [authService]=\\\"authService\\\" (saved)=\\\"editName = false;\\\"></ka-edit-name>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editAccountName\\\" (closed)=\\\"editAccountName = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Account Name</div>\\n    <ka-edit-account-name [accountService]=\\\"accountService\\\" [authService]=\\\"authService\\\" (saved)=\\\"loadAccount()\\\"></ka-edit-account-name>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editEmail\\\" (closed)=\\\"editEmail = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Email Address</div>\\n    <ka-edit-email [authService]=\\\"authService\\\" (saved)=\\\"editEmail = false;\\\"></ka-edit-email>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editMobile\\\" (closed)=\\\"editMobile = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Mobile Phone Number</div>\\n    <ka-edit-mobile [authService]=\\\"authService\\\" (saved)=\\\"editMobile = false;\\\"></ka-edit-mobile>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editBackup\\\" (closed)=\\\"editBackup = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Backup Email Address</div>\\n    <ka-edit-backup-email [authService]=\\\"authService\\\" (saved)=\\\"editBackup = false;\\\"></ka-edit-backup-email>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"enableTwoFa\\\" (closed)=\\\"enableTwoFa = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Enable Two Factor Authentication</div>\\n    <ka-two-factor [authService]=\\\"authService\\\" (saved)=\\\"enableTwoFa = false;\\\"></ka-two-factor>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"changePassword\\\" (closed)=\\\"changePassword = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Change Password</div>\\n    <ka-change-password [authService]=\\\"authService\\\" (saved)=\\\"changePassword = false;\\\" [email]=\\\"security.emailAddress\\\"></ka-change-password>\\n</ka-inline-modal>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: EditNameComponent, selector: \"ka-edit-name\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: EditEmailComponent, selector: \"ka-edit-email\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: TwoFactorComponent, selector: \"ka-two-factor\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: InlineModalComponent, selector: \"ka-inline-modal\", outputs: [\"closed\"] }, { kind: \"component\", type: EditBackupEmailComponent, selector: \"ka-edit-backup-email\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: EditMobileComponent, selector: \"ka-edit-mobile\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: EditAccountNameComponent, selector: \"ka-edit-account-name\", inputs: [\"authService\", \"accountService\"], outputs: [\"saved\"] }, { kind: \"component\", type: ChangePasswordComponent, selector: \"ka-change-password\", inputs: [\"email\", \"authService\"], outputs: [\"saved\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountSummaryComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-account-summary', encapsulation: ViewEncapsulation.None, template: \"<ng-template [ngIf]=\\\"!editName && !editEmail && !editBackup && !editMobile && !enableTwoFa && !changePassword\\\">\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\" *ngIf=\\\"account && showAccountDetails\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Account Details</h4>\\n\\n            <p class=\\\"mb0\\\" *ngIf=\\\"security\\\">Your account name is currently set to\\n                <strong>{{account.name}}</strong></p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editAccountName = true;\\\">Edit Account Name\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <img src=\\\"https://www.gravatar.com/avatar/{{security.hashedEmail}}?d=mp\\\" height=\\\"40\\\" alt=\\\"user-gravatar\\\"\\n                     class=\\\"mr1 mr-4\\\">\\n                {{security.name}}\\n            </h4>\\n\\n            <div class=\\\"mb1\\\">\\n                <p *ngIf=\\\"security\\\">If you need to update your name, you can do so here.</p>\\n            </div>\\n\\n            <div *ngIf=\\\"security\\\">\\n                <p class=\\\"mb0\\\">Your user icon is based on your Gravatar image. You can easily create/edit your image by visiting the <a href=\\\"https://gravatar.com\\\" target=\\\"_blank\\\">Gravatar website.</a></p>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editName = true;\\\">Edit Name\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Email Address</h4>\\n\\n            <p class=\\\"mb0\\\" *ngIf=\\\"security\\\">Your account email address is currently set to\\n                <strong>{{security.emailAddress}}</strong></p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editEmail = true;\\\">Edit Email\\n                Address\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\" *ngIf=\\\"showPasswordReset\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Password</h4>\\n\\n            <p class=\\\"mb0\\\">Change your existing password.</p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"changePassword = true\\\">Change Password</button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Mobile Phone Number</h4>\\n\\n            <p *ngIf=\\\"security && security.mobileNumber\\\">Your mobile number is currently set to\\n                <strong>{{security.mobileNumber}}</strong></p>\\n\\n            <p *ngIf=\\\"security && !security.mobileNumber\\\"><strong>\\n                No mobile number has been set.\\n            </strong></p>\\n\\n            <p class=\\\"mb0\\\">\\n                We use your mobile phone number as an extra layer of security. It can also be used to help restore\\n                access to your account.\\n            </p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editMobile = true;\\\">Edit Mobile Number</button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Backup Email Address</h4>\\n\\n            <p *ngIf=\\\"security && security.backupEmailAddress\\\">Your account backup email address is currently set to\\n                <strong>{{security.backupEmailAddress}}</strong></p>\\n\\n            <p *ngIf=\\\"security && !security.backupEmailAddress\\\"><strong>\\n                No backup email address has been set.\\n            </strong></p>\\n\\n            <p class=\\\"mb0\\\">\\n                In the event you need to restore access to your account we can use this secondary email address\\n                to help you gain access.\\n            </p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editBackup = true;\\\">Edit Email Address</button>\\n        </div>\\n\\n    </div>\\n\\n<!--    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">-->\\n\\n<!--        <div class=\\\"actioninfo p2w p1m\\\">-->\\n<!--            <h4 class=\\\"mb1 mt0\\\">Two Factor Authentication</h4>-->\\n\\n<!--            <p class=\\\"mb0\\\">-->\\n<!--                To increase security on your account you can enable two factor authentication. Currently this uses the-->\\n<!--                Google Authenticator app downloadable for your mobile device.-->\\n<!--            </p>-->\\n\\n<!--        </div>-->\\n<!--        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">-->\\n\\n<!--            <span *ngIf=\\\"!security\\\">Loading...</span>-->\\n\\n<!--            <button class=\\\"button small-button white-button\\\" (click)=\\\"enableTwoFa = true\\\"-->\\n<!--                    *ngIf=\\\"security && !security.twoFactorData\\\">-->\\n<!--                Enable 2FA-->\\n<!--            </button>-->\\n<!--            <button class=\\\"button small-button alert-button\\\" *ngIf=\\\"security && security.twoFactorData\\\"-->\\n<!--                    (click)=\\\"disable2FA()\\\">-->\\n<!--                Disable 2FA-->\\n<!--            </button>-->\\n<!--        </div>-->\\n\\n<!--    </div>-->\\n\\n</ng-template>\\n<ka-inline-modal *ngIf=\\\"editName\\\" (closed)=\\\"editName = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit User Name</div>\\n    <ka-edit-name [authService]=\\\"authService\\\" (saved)=\\\"editName = false;\\\"></ka-edit-name>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editAccountName\\\" (closed)=\\\"editAccountName = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Account Name</div>\\n    <ka-edit-account-name [accountService]=\\\"accountService\\\" [authService]=\\\"authService\\\" (saved)=\\\"loadAccount()\\\"></ka-edit-account-name>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editEmail\\\" (closed)=\\\"editEmail = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Email Address</div>\\n    <ka-edit-email [authService]=\\\"authService\\\" (saved)=\\\"editEmail = false;\\\"></ka-edit-email>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editMobile\\\" (closed)=\\\"editMobile = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Mobile Phone Number</div>\\n    <ka-edit-mobile [authService]=\\\"authService\\\" (saved)=\\\"editMobile = false;\\\"></ka-edit-mobile>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editBackup\\\" (closed)=\\\"editBackup = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Backup Email Address</div>\\n    <ka-edit-backup-email [authService]=\\\"authService\\\" (saved)=\\\"editBackup = false;\\\"></ka-edit-backup-email>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"enableTwoFa\\\" (closed)=\\\"enableTwoFa = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Enable Two Factor Authentication</div>\\n    <ka-two-factor [authService]=\\\"authService\\\" (saved)=\\\"enableTwoFa = false;\\\"></ka-two-factor>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"changePassword\\\" (closed)=\\\"changePassword = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Change Password</div>\\n    <ka-change-password [authService]=\\\"authService\\\" (saved)=\\\"changePassword = false;\\\" [email]=\\\"security.emailAddress\\\"></ka-change-password>\\n</ka-inline-modal>\\n\" }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }, { type: AccountService }]; }, propDecorators: { authenticationService: [{\n                type: Input\n            }], showPasswordReset: [{\n                type: Input\n            }], showAccountDetails: [{\n                type: Input\n            }] } });\n\nclass LoginComponent extends BaseComponent {\n    constructor(router, kcAuthService) {\n        super(kcAuthService);\n        this.router = router;\n        this.preventRedirect = false;\n        this.loggedIn = new EventEmitter();\n        this.loading = false;\n        this.loginError = false;\n        this.twoFA = false;\n        this.twoFAError = false;\n        this.showRecaptcha = false;\n        this.activeSession = false;\n        this.forgottenPassword = false;\n        this.passwordResetSent = false;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.authService.sessionData.subscribe(session => {\n            if (session && session.delayedCaptchas && session.delayedCaptchas['guest/auth/login']) {\n                this.showRecaptcha = true;\n            }\n        });\n        return Promise.resolve(true);\n    }\n    recaptchaResolved(response) {\n        this.recaptchaResponse = response;\n    }\n    login() {\n        this.loginError = false;\n        if (this.email && this.password) {\n            this.loading = true;\n            const clientTwoFactorData = localStorage.getItem('clientTwoFactorData');\n            return this.authService.login(this.email, this.password, clientTwoFactorData || null, (this.showRecaptcha ? this.recaptchaResponse : null))\n                .then((res) => {\n                this.loading = false;\n                if (res === 'REQUIRES_2FA') {\n                    this.twoFA = true;\n                    return true;\n                }\n                else if (res === 'ACTIVE_SESSION') {\n                    this.activeSession = true;\n                }\n                else {\n                    this.loggedIn.emit(res);\n                    if (!this.preventRedirect) {\n                        return this.router.navigate([this.loginRoute || '/']);\n                    }\n                }\n            })\n                .catch(err => {\n                this.authService.getSessionData();\n                this.loginError = true;\n                this.loading = false;\n            });\n        }\n    }\n    sendForgottenPassword() {\n        this.authService.sendPasswordReset(this.forgottenEmail, this.recaptchaResponse).then(() => {\n            this.passwordResetSent = true;\n            setTimeout(() => {\n                window.location.reload();\n            }, 5000);\n        });\n    }\n    closeActiveSession() {\n        this.authService.closeActiveSession().then(res => {\n            if (res === 'REQUIRES_2FA') {\n                this.activeSession = false;\n                this.twoFA = true;\n                return true;\n            }\n            else if (res === 'ACTIVE_SESSION') {\n                this.activeSession = true;\n            }\n            else {\n                this.activeSession = false;\n                if (!this.preventRedirect) {\n                    return this.router.navigate([this.loginRoute || '/']);\n                }\n            }\n        });\n    }\n    checkUsername() {\n        this.authService.doesUserExist(this.email).then(res => {\n        });\n    }\n    authenticate() {\n        this.loading = true;\n        if (this.twoFACode) {\n            return this.authService.authenticateTwoFactor(this.twoFACode)\n                .then(clientTwoFactorData => {\n                this.loading = false;\n                if (clientTwoFactorData) {\n                    localStorage.setItem('clientTwoFactorData', String(clientTwoFactorData));\n                }\n                this.loggedIn.emit(clientTwoFactorData);\n                if (!this.preventRedirect) {\n                    return this.router.navigate([this.loginRoute || '/']);\n                }\n            })\n                .catch(error => {\n                this.authService.getSessionData();\n                this.twoFAError = true;\n                this.loading = false;\n                return error;\n            });\n        }\n    }\n}\nLoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: LoginComponent, deps: [{ token: i2$1.Router }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nLoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: LoginComponent, selector: \"ka-login\", inputs: { loginRoute: \"loginRoute\", recaptchaKey: \"recaptchaKey\", preventRedirect: \"preventRedirect\" }, outputs: { loggedIn: \"loggedIn\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"login\\\">\\n\\n    <div class=\\\"login-container\\\" *ngIf=\\\"!twoFA && !activeSession && !forgottenPassword\\\">\\n\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">Sign in to your account</h2>\\n\\n        <label>Enter your username or email address</label>\\n        <input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" required\\n               (change)=\\\"checkUsername()\\\">\\n\\n        <label>Enter your password</label>\\n        <input type=\\\"password\\\" placeholder=\\\"Password\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\"\\n               (keyup.enter)=\\\"login()\\\" required>\\n\\n        <p class=\\\"error\\\" *ngIf=\\\"loginError\\\">Email or password incorrect, please check and try again.</p>\\n\\n        <re-captcha class=\\\"mt-8\\\" *ngIf=\\\"showRecaptcha\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                    [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\\\"\\n            *ngIf=\\\"!loading\\\" (click)=\\\"login()\\\"\\n            [disabled]=\\\"!email || !password\\\">Sign in\\n        </button>\\n\\n        <a class=\\\"text-center text-secondary mt-4 cursor-pointer hover:underline\\\"\\n           (click)=\\\"forgottenPassword = true\\\">I've forgotten my password</a>\\n    </div>\\n\\n    <div class=\\\"login-container\\\" *ngIf=\\\"forgottenPassword\\\">\\n\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">\\n            Forgotten Password\\n        </h2>\\n\\n        <ng-template [ngIf]=\\\"!passwordResetSent\\\">\\n            <label>Enter your username or email address</label>\\n            <input type=\\\"text\\\" placeholder=\\\"Email address\\\" name=\\\"forgottenEmail\\\" [(ngModel)]=\\\"forgottenEmail\\\" required>\\n\\n            <re-captcha class=\\\"mt-8\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                        [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n\\n            <button\\n                class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-secondary focus:outline-none\\\"\\n                (click)=\\\"sendForgottenPassword()\\\" [disabled]=\\\"!forgottenEmail\\\">\\n                Request Password Reset\\n            </button>\\n        </ng-template>\\n\\n        <div *ngIf=\\\"passwordResetSent\\\" class=\\\"py-8 flex items-center justify-center\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-12 w-12 text-secondary mr-4\\\" fill=\\\"none\\\"\\n                 viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n            </svg>\\n            <div class=\\\"font-medium text-lg\\\">Password reset has been requested.</div>\\n        </div>\\n\\n        <a class=\\\"justify-center text-primary mt-4 cursor-pointer hover:underline flex items-center\\\"\\n           (click)=\\\"forgottenPassword = false; passwordResetSent = false\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-6 w-6\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\"\\n                 stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M11 17l-5-5m0 0l5-5m-5 5h12\\\"/>\\n            </svg>\\n            Back to login</a>\\n    </div>\\n\\n    <div class=\\\"two-fa-container\\\" *ngIf=\\\"activeSession\\\">\\n        <p class=\\\"text-center\\\">We have detected other active logged in sessions for your user account. To continue with\\n            this login and terminate any other active sessions please click the button below.</p>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-danger focus:outline-none\\\"\\n            (click)=\\\"closeActiveSession()\\\">Close my other sessions and\\n            continue\\n        </button>\\n    </div>\\n\\n    <div class=\\\"two-fa-container\\\" *ngIf=\\\"twoFA\\\">\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">Two Factor Authentication</h2>\\n\\n        <p>Enter your second factor authentication code.</p>\\n\\n        <input placeholder=\\\"Verification code\\\" [(ngModel)]=\\\"twoFACode\\\"\\n               (keyup.enter)=\\\"authenticate()\\\">\\n\\n        <p class=\\\"error py-4\\\" *ngIf=\\\"twoFAError\\\">Invalid code, please try again.</p>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\\\"\\n            *ngIf=\\\"!loading\\\" (click)=\\\"authenticate()\\\"\\n            [disabled]=\\\"!twoFACode\\\">Login\\n        </button>\\n\\n    </div>\\n\\n</div>\\n\", styles: [\".login{padding:0 2rem 2rem;display:flex;align-items:center;flex-direction:column}.login h1{font-weight:200}.login .login-container,.login .two-fa-container{display:flex;flex-direction:column;justify-content:center;max-width:450px;width:100%}.login .login-container label,.login .two-fa-container label{display:block;font-size:.9rem;font-weight:600;padding:1rem 0 .25rem;max-width:100%}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i5.RecaptchaComponent, selector: \"re-captcha\", inputs: [\"id\", \"siteKey\", \"theme\", \"type\", \"size\", \"badge\", \"tabIndex\"], outputs: [\"resolved\"], exportAs: [\"reCaptcha\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: LoginComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-login', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"login\\\">\\n\\n    <div class=\\\"login-container\\\" *ngIf=\\\"!twoFA && !activeSession && !forgottenPassword\\\">\\n\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">Sign in to your account</h2>\\n\\n        <label>Enter your username or email address</label>\\n        <input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" required\\n               (change)=\\\"checkUsername()\\\">\\n\\n        <label>Enter your password</label>\\n        <input type=\\\"password\\\" placeholder=\\\"Password\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\"\\n               (keyup.enter)=\\\"login()\\\" required>\\n\\n        <p class=\\\"error\\\" *ngIf=\\\"loginError\\\">Email or password incorrect, please check and try again.</p>\\n\\n        <re-captcha class=\\\"mt-8\\\" *ngIf=\\\"showRecaptcha\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                    [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\\\"\\n            *ngIf=\\\"!loading\\\" (click)=\\\"login()\\\"\\n            [disabled]=\\\"!email || !password\\\">Sign in\\n        </button>\\n\\n        <a class=\\\"text-center text-secondary mt-4 cursor-pointer hover:underline\\\"\\n           (click)=\\\"forgottenPassword = true\\\">I've forgotten my password</a>\\n    </div>\\n\\n    <div class=\\\"login-container\\\" *ngIf=\\\"forgottenPassword\\\">\\n\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">\\n            Forgotten Password\\n        </h2>\\n\\n        <ng-template [ngIf]=\\\"!passwordResetSent\\\">\\n            <label>Enter your username or email address</label>\\n            <input type=\\\"text\\\" placeholder=\\\"Email address\\\" name=\\\"forgottenEmail\\\" [(ngModel)]=\\\"forgottenEmail\\\" required>\\n\\n            <re-captcha class=\\\"mt-8\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                        [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n\\n            <button\\n                class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-secondary focus:outline-none\\\"\\n                (click)=\\\"sendForgottenPassword()\\\" [disabled]=\\\"!forgottenEmail\\\">\\n                Request Password Reset\\n            </button>\\n        </ng-template>\\n\\n        <div *ngIf=\\\"passwordResetSent\\\" class=\\\"py-8 flex items-center justify-center\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-12 w-12 text-secondary mr-4\\\" fill=\\\"none\\\"\\n                 viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n            </svg>\\n            <div class=\\\"font-medium text-lg\\\">Password reset has been requested.</div>\\n        </div>\\n\\n        <a class=\\\"justify-center text-primary mt-4 cursor-pointer hover:underline flex items-center\\\"\\n           (click)=\\\"forgottenPassword = false; passwordResetSent = false\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-6 w-6\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\"\\n                 stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M11 17l-5-5m0 0l5-5m-5 5h12\\\"/>\\n            </svg>\\n            Back to login</a>\\n    </div>\\n\\n    <div class=\\\"two-fa-container\\\" *ngIf=\\\"activeSession\\\">\\n        <p class=\\\"text-center\\\">We have detected other active logged in sessions for your user account. To continue with\\n            this login and terminate any other active sessions please click the button below.</p>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-danger focus:outline-none\\\"\\n            (click)=\\\"closeActiveSession()\\\">Close my other sessions and\\n            continue\\n        </button>\\n    </div>\\n\\n    <div class=\\\"two-fa-container\\\" *ngIf=\\\"twoFA\\\">\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">Two Factor Authentication</h2>\\n\\n        <p>Enter your second factor authentication code.</p>\\n\\n        <input placeholder=\\\"Verification code\\\" [(ngModel)]=\\\"twoFACode\\\"\\n               (keyup.enter)=\\\"authenticate()\\\">\\n\\n        <p class=\\\"error py-4\\\" *ngIf=\\\"twoFAError\\\">Invalid code, please try again.</p>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\\\"\\n            *ngIf=\\\"!loading\\\" (click)=\\\"authenticate()\\\"\\n            [disabled]=\\\"!twoFACode\\\">Login\\n        </button>\\n\\n    </div>\\n\\n</div>\\n\", styles: [\".login{padding:0 2rem 2rem;display:flex;align-items:center;flex-direction:column}.login h1{font-weight:200}.login .login-container,.login .two-fa-container{display:flex;flex-direction:column;justify-content:center;max-width:450px;width:100%}.login .login-container label,.login .two-fa-container label{display:block;font-size:.9rem;font-weight:600;padding:1rem 0 .25rem;max-width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i2$1.Router }, { type: AuthenticationService }]; }, propDecorators: { loginRoute: [{\n                type: Input\n            }], recaptchaKey: [{\n                type: Input\n            }], preventRedirect: [{\n                type: Input\n            }], loggedIn: [{\n                type: Output\n            }] } });\n\nclass ContactService {\n    constructor(kbRequest, config) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n    }\n    getContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact', {\n            params: {\n                contactId\n            }\n        }).toPromise();\n    }\n    getContacts() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/contacts').toPromise();\n    }\n    setDefaultContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/default', {\n            params: {\n                contactId: contactId\n            }\n        }).toPromise();\n    }\n    deleteContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/delete', {\n            params: {\n                contactId: contactId\n            }\n        }).toPromise();\n    }\n}\nContactService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }], target: i0.ɵɵFactoryTarget.Injectable });\nContactService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }]; } });\n\nclass AddressBookComponent {\n    constructor(contactService, kbRequest) {\n        this.contactService = contactService;\n        this.kbRequest = kbRequest;\n        this.contacts = new KinibindModel();\n        this.reload = new EventEmitter();\n    }\n    ngOnInit() {\n        this.contactService.getContacts().then(contacts => {\n            this.contacts.data = contacts;\n        });\n    }\n    deleteContact(contactId) {\n        const message = 'Are you sure you would like to delete this contact?';\n        if (window.confirm(message)) {\n            return this.contactService.deleteContact(contactId).then(() => {\n                this.reload.next(true);\n            });\n        }\n    }\n    makeDefault(contactId) {\n        return this.contactService.setDefaultContact(contactId).then(() => {\n            this.reload.next(true);\n        });\n    }\n}\nAddressBookComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AddressBookComponent, deps: [{ token: ContactService }, { token: i1.KinibindRequestService }], target: i0.ɵɵFactoryTarget.Component });\nAddressBookComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: AddressBookComponent, selector: \"ka-address-book\", inputs: { editContactURL: \"editContactURL\", deleteContactURL: \"deleteContactURL\", defaultContactURL: \"defaultContactURL\", source: \"source\" }, ngImport: i0, template: \"<div class=\\\"contacts-wrapper\\\">\\n\\n    <div class=\\\"contact-block new\\\" [routerLink]=\\\"[editContactURL]\\\">\\n        <span style=\\\"font-size: 2rem\\\"><b>+</b></span>\\n        <span>New Contact</span>\\n    </div>\\n\\n    <div class=\\\"contact-block existing\\\" *ngFor=\\\"let contact of contacts.data; let i = index\\\">\\n        <div class=\\\"contact-loading\\\" *ngIf=\\\"contactLoading === i\\\">\\n            <span style=\\\"color: white\\\">loading...</span>\\n        </div>\\n\\n        <div class=\\\"flex align-center justify-between\\\" style=\\\"width: 100%\\\">\\n            <p class=\\\"m0\\\"><strong>{{contact.name}}</strong></p>\\n            <a class=\\\"delete-method\\\" (click)=\\\"deleteContact(contact.id)\\\" style=\\\"text-decoration: none\\\">\\n                &#10005;\\n            </a>\\n        </div>\\n\\n        <p [innerHTML]=\\\"contact.htmlAddressLinesString\\\"></p>\\n        <p style=\\\"margin-bottom: 0\\\"><strong>Telephone: </strong>{{contact.telephoneNumber}}</p>\\n        <p><strong>Email: </strong>{{contact.emailAddress}}</p>\\n\\n        <div style=\\\"width: 100%\\\" class=\\\"flex align-center justify-between\\\">\\n            <p class=\\\"flex align-center confirm1 m0\\\" *ngIf=\\\"contact.defaultContact\\\">\\n                <span>&#10004;</span>&nbsp;&nbsp;Default contact\\n            </p>\\n            <button class=\\\"but butsm\\\" *ngIf=\\\"!contact.defaultContact\\\"\\n                    (click)=\\\"makeDefault(contact.id)\\\">\\n                Make Default\\n            </button>\\n            <a class=\\\"edit\\\" [routerLink]=\\\"[editContactURL + '/' + contact.id]\\\">\\n                Edit\\n            </a>\\n        </div>\\n\\n    </div>\\n\\n</div>\\n\", styles: [\".contacts-wrapper{display:flex;flex-wrap:wrap;padding:1rem}.contacts-wrapper .contact-block{position:relative;width:100%;padding:1rem;max-width:40%;min-width:290px;background-color:#fff;height:300px;border:1px solid #eee;margin:1%;display:flex;flex-direction:column;align-items:center}.contacts-wrapper .contact-block .delete-method{font-size:1.4rem;text-decoration:none;color:#8b0000}.contacts-wrapper .contact-block.new{justify-content:center}.contacts-wrapper .contact-block.new:hover{cursor:pointer;background-color:#f5f5f5}.contacts-wrapper .contact-block.add button{position:absolute;top:0;right:0}.contacts-wrapper .contact-block.existing{flex-direction:column;justify-content:space-between;align-items:flex-start}.contacts-wrapper .contact-block.existing .default{color:#3a3ec4;padding:5px 10px}.contacts-wrapper .contact-block.existing .edit,.contacts-wrapper .contact-block.existing .verified{align-self:flex-end}.contacts-wrapper .contact-block .contact-loading{position:absolute;inset:0;display:flex;justify-content:center;align-items:center;background-color:#0003;z-index:9}\\n\"], dependencies: [{ kind: \"directive\", type: i2$1.RouterLink, selector: \":not(a):not(area)[routerLink]\", inputs: [\"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i2$1.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AddressBookComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-address-book', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"contacts-wrapper\\\">\\n\\n    <div class=\\\"contact-block new\\\" [routerLink]=\\\"[editContactURL]\\\">\\n        <span style=\\\"font-size: 2rem\\\"><b>+</b></span>\\n        <span>New Contact</span>\\n    </div>\\n\\n    <div class=\\\"contact-block existing\\\" *ngFor=\\\"let contact of contacts.data; let i = index\\\">\\n        <div class=\\\"contact-loading\\\" *ngIf=\\\"contactLoading === i\\\">\\n            <span style=\\\"color: white\\\">loading...</span>\\n        </div>\\n\\n        <div class=\\\"flex align-center justify-between\\\" style=\\\"width: 100%\\\">\\n            <p class=\\\"m0\\\"><strong>{{contact.name}}</strong></p>\\n            <a class=\\\"delete-method\\\" (click)=\\\"deleteContact(contact.id)\\\" style=\\\"text-decoration: none\\\">\\n                &#10005;\\n            </a>\\n        </div>\\n\\n        <p [innerHTML]=\\\"contact.htmlAddressLinesString\\\"></p>\\n        <p style=\\\"margin-bottom: 0\\\"><strong>Telephone: </strong>{{contact.telephoneNumber}}</p>\\n        <p><strong>Email: </strong>{{contact.emailAddress}}</p>\\n\\n        <div style=\\\"width: 100%\\\" class=\\\"flex align-center justify-between\\\">\\n            <p class=\\\"flex align-center confirm1 m0\\\" *ngIf=\\\"contact.defaultContact\\\">\\n                <span>&#10004;</span>&nbsp;&nbsp;Default contact\\n            </p>\\n            <button class=\\\"but butsm\\\" *ngIf=\\\"!contact.defaultContact\\\"\\n                    (click)=\\\"makeDefault(contact.id)\\\">\\n                Make Default\\n            </button>\\n            <a class=\\\"edit\\\" [routerLink]=\\\"[editContactURL + '/' + contact.id]\\\">\\n                Edit\\n            </a>\\n        </div>\\n\\n    </div>\\n\\n</div>\\n\", styles: [\".contacts-wrapper{display:flex;flex-wrap:wrap;padding:1rem}.contacts-wrapper .contact-block{position:relative;width:100%;padding:1rem;max-width:40%;min-width:290px;background-color:#fff;height:300px;border:1px solid #eee;margin:1%;display:flex;flex-direction:column;align-items:center}.contacts-wrapper .contact-block .delete-method{font-size:1.4rem;text-decoration:none;color:#8b0000}.contacts-wrapper .contact-block.new{justify-content:center}.contacts-wrapper .contact-block.new:hover{cursor:pointer;background-color:#f5f5f5}.contacts-wrapper .contact-block.add button{position:absolute;top:0;right:0}.contacts-wrapper .contact-block.existing{flex-direction:column;justify-content:space-between;align-items:flex-start}.contacts-wrapper .contact-block.existing .default{color:#3a3ec4;padding:5px 10px}.contacts-wrapper .contact-block.existing .edit,.contacts-wrapper .contact-block.existing .verified{align-self:flex-end}.contacts-wrapper .contact-block .contact-loading{position:absolute;inset:0;display:flex;justify-content:center;align-items:center;background-color:#0003;z-index:9}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: ContactService }, { type: i1.KinibindRequestService }]; }, propDecorators: { editContactURL: [{\n                type: Input\n            }], deleteContactURL: [{\n                type: Input\n            }], defaultContactURL: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }] } });\n\nclass ContactDetailsComponent {\n    constructor(kbRequest, location, router, contactService) {\n        this.kbRequest = kbRequest;\n        this.location = location;\n        this.router = router;\n        this.contactService = contactService;\n        this.readOnlyAddress = true;\n        this.hiddenFields = [];\n        // @ViewChild('contactForm') public contactForm: NgForm;\n        this.loaded = new EventEmitter();\n        this.contactSaved = new EventEmitter();\n        this.contact = new KinibindModel();\n        this.countries = [];\n    }\n    ngOnInit() {\n        this.contactService.getContact(this.contactId).then(contact => {\n            this.contact.data = contact;\n        });\n        this.setCountries();\n    }\n    saved() {\n        if (this.savedRoute) {\n            if (this.savedRoute === 'BACK') {\n                this.location.back();\n            }\n            else {\n                this.router.navigate([this.savedRoute]);\n            }\n        }\n        else {\n            this.contactSaved.emit(this.contact.data);\n        }\n    }\n    setCountries() {\n        this.countries = [\n            { \"name\": \"United Kingdom\", \"code\": \"GB\" },\n            { \"name\": \"United States\", \"code\": \"US\" },\n            { \"name\": \"Afghanistan\", \"code\": \"AF\" },\n            { \"name\": \"Åland Islands\", \"code\": \"AX\" },\n            { \"name\": \"Albania\", \"code\": \"AL\" },\n            { \"name\": \"Algeria\", \"code\": \"DZ\" },\n            { \"name\": \"American Samoa\", \"code\": \"AS\" },\n            { \"name\": \"AndorrA\", \"code\": \"AD\" },\n            { \"name\": \"Angola\", \"code\": \"AO\" },\n            { \"name\": \"Anguilla\", \"code\": \"AI\" },\n            { \"name\": \"Antarctica\", \"code\": \"AQ\" },\n            { \"name\": \"Antigua and Barbuda\", \"code\": \"AG\" },\n            { \"name\": \"Argentina\", \"code\": \"AR\" },\n            { \"name\": \"Armenia\", \"code\": \"AM\" },\n            { \"name\": \"Aruba\", \"code\": \"AW\" },\n            { \"name\": \"Australia\", \"code\": \"AU\" },\n            { \"name\": \"Austria\", \"code\": \"AT\" },\n            { \"name\": \"Azerbaijan\", \"code\": \"AZ\" },\n            { \"name\": \"Bahamas\", \"code\": \"BS\" },\n            { \"name\": \"Bahrain\", \"code\": \"BH\" },\n            { \"name\": \"Bangladesh\", \"code\": \"BD\" },\n            { \"name\": \"Barbados\", \"code\": \"BB\" },\n            { \"name\": \"Belarus\", \"code\": \"BY\" },\n            { \"name\": \"Belgium\", \"code\": \"BE\" },\n            { \"name\": \"Belize\", \"code\": \"BZ\" },\n            { \"name\": \"Benin\", \"code\": \"BJ\" },\n            { \"name\": \"Bermuda\", \"code\": \"BM\" },\n            { \"name\": \"Bhutan\", \"code\": \"BT\" },\n            { \"name\": \"Bolivia\", \"code\": \"BO\" },\n            { \"name\": \"Bosnia and Herzegovina\", \"code\": \"BA\" },\n            { \"name\": \"Botswana\", \"code\": \"BW\" },\n            { \"name\": \"Bouvet Island\", \"code\": \"BV\" },\n            { \"name\": \"Brazil\", \"code\": \"BR\" },\n            { \"name\": \"British Indian Ocean Territory\", \"code\": \"IO\" },\n            { \"name\": \"Brunei Darussalam\", \"code\": \"BN\" },\n            { \"name\": \"Bulgaria\", \"code\": \"BG\" },\n            { \"name\": \"Burkina Faso\", \"code\": \"BF\" },\n            { \"name\": \"Burundi\", \"code\": \"BI\" },\n            { \"name\": \"Cambodia\", \"code\": \"KH\" },\n            { \"name\": \"Cameroon\", \"code\": \"CM\" },\n            { \"name\": \"Canada\", \"code\": \"CA\" },\n            { \"name\": \"Cape Verde\", \"code\": \"CV\" },\n            { \"name\": \"Cayman Islands\", \"code\": \"KY\" },\n            { \"name\": \"Central African Republic\", \"code\": \"CF\" },\n            { \"name\": \"Chad\", \"code\": \"TD\" },\n            { \"name\": \"Chile\", \"code\": \"CL\" },\n            { \"name\": \"China\", \"code\": \"CN\" },\n            { \"name\": \"Christmas Island\", \"code\": \"CX\" },\n            { \"name\": \"Cocos (Keeling) Islands\", \"code\": \"CC\" },\n            { \"name\": \"Colombia\", \"code\": \"CO\" },\n            { \"name\": \"Comoros\", \"code\": \"KM\" },\n            { \"name\": \"Congo\", \"code\": \"CG\" },\n            { \"name\": \"Congo, The Democratic Republic of the\", \"code\": \"CD\" },\n            { \"name\": \"Cook Islands\", \"code\": \"CK\" },\n            { \"name\": \"Costa Rica\", \"code\": \"CR\" },\n            { \"name\": \"Cote D'Ivoire\", \"code\": \"CI\" },\n            { \"name\": \"Croatia\", \"code\": \"HR\" },\n            { \"name\": \"Cuba\", \"code\": \"CU\" },\n            { \"name\": \"Cyprus\", \"code\": \"CY\" },\n            { \"name\": \"Czech Republic\", \"code\": \"CZ\" },\n            { \"name\": \"Denmark\", \"code\": \"DK\" },\n            { \"name\": \"Djibouti\", \"code\": \"DJ\" },\n            { \"name\": \"Dominica\", \"code\": \"DM\" },\n            { \"name\": \"Dominican Republic\", \"code\": \"DO\" },\n            { \"name\": \"Ecuador\", \"code\": \"EC\" },\n            { \"name\": \"Egypt\", \"code\": \"EG\" },\n            { \"name\": \"El Salvador\", \"code\": \"SV\" },\n            { \"name\": \"Equatorial Guinea\", \"code\": \"GQ\" },\n            { \"name\": \"Eritrea\", \"code\": \"ER\" },\n            { \"name\": \"Estonia\", \"code\": \"EE\" },\n            { \"name\": \"Ethiopia\", \"code\": \"ET\" },\n            { \"name\": \"Falkland Islands (Malvinas)\", \"code\": \"FK\" },\n            { \"name\": \"Faroe Islands\", \"code\": \"FO\" },\n            { \"name\": \"Fiji\", \"code\": \"FJ\" },\n            { \"name\": \"Finland\", \"code\": \"FI\" },\n            { \"name\": \"France\", \"code\": \"FR\" },\n            { \"name\": \"French Guiana\", \"code\": \"GF\" },\n            { \"name\": \"French Polynesia\", \"code\": \"PF\" },\n            { \"name\": \"French Southern Territories\", \"code\": \"TF\" },\n            { \"name\": \"Gabon\", \"code\": \"GA\" },\n            { \"name\": \"Gambia\", \"code\": \"GM\" },\n            { \"name\": \"Georgia\", \"code\": \"GE\" },\n            { \"name\": \"Germany\", \"code\": \"DE\" },\n            { \"name\": \"Ghana\", \"code\": \"GH\" },\n            { \"name\": \"Gibraltar\", \"code\": \"GI\" },\n            { \"name\": \"Greece\", \"code\": \"GR\" },\n            { \"name\": \"Greenland\", \"code\": \"GL\" },\n            { \"name\": \"Grenada\", \"code\": \"GD\" },\n            { \"name\": \"Guadeloupe\", \"code\": \"GP\" },\n            { \"name\": \"Guam\", \"code\": \"GU\" },\n            { \"name\": \"Guatemala\", \"code\": \"GT\" },\n            { \"name\": \"Guernsey\", \"code\": \"GG\" },\n            { \"name\": \"Guinea\", \"code\": \"GN\" },\n            { \"name\": \"Guinea-Bissau\", \"code\": \"GW\" },\n            { \"name\": \"Guyana\", \"code\": \"GY\" },\n            { \"name\": \"Haiti\", \"code\": \"HT\" },\n            { \"name\": \"Heard Island and Mcdonald Islands\", \"code\": \"HM\" },\n            { \"name\": \"Holy See (Vatican City State)\", \"code\": \"VA\" },\n            { \"name\": \"Honduras\", \"code\": \"HN\" },\n            { \"name\": \"Hong Kong\", \"code\": \"HK\" },\n            { \"name\": \"Hungary\", \"code\": \"HU\" },\n            { \"name\": \"Iceland\", \"code\": \"IS\" },\n            { \"name\": \"India\", \"code\": \"IN\" },\n            { \"name\": \"Indonesia\", \"code\": \"ID\" },\n            { \"name\": \"Iran, Islamic Republic Of\", \"code\": \"IR\" },\n            { \"name\": \"Iraq\", \"code\": \"IQ\" },\n            { \"name\": \"Ireland\", \"code\": \"IE\" },\n            { \"name\": \"Isle of Man\", \"code\": \"IM\" },\n            { \"name\": \"Israel\", \"code\": \"IL\" },\n            { \"name\": \"Italy\", \"code\": \"IT\" },\n            { \"name\": \"Jamaica\", \"code\": \"JM\" },\n            { \"name\": \"Japan\", \"code\": \"JP\" },\n            { \"name\": \"Jersey\", \"code\": \"JE\" },\n            { \"name\": \"Jordan\", \"code\": \"JO\" },\n            { \"name\": \"Kazakhstan\", \"code\": \"KZ\" },\n            { \"name\": \"Kenya\", \"code\": \"KE\" },\n            { \"name\": \"Kiribati\", \"code\": \"KI\" },\n            { \"name\": \"Korea, Democratic People's Republic of\", \"code\": \"KP\" },\n            { \"name\": \"Korea, Republic of\", \"code\": \"KR\" },\n            { \"name\": \"Kuwait\", \"code\": \"KW\" },\n            { \"name\": \"Kyrgyzstan\", \"code\": \"KG\" },\n            { \"name\": \"Lao People's Democratic Republic\", \"code\": \"LA\" },\n            { \"name\": \"Latvia\", \"code\": \"LV\" },\n            { \"name\": \"Lebanon\", \"code\": \"LB\" },\n            { \"name\": \"Lesotho\", \"code\": \"LS\" },\n            { \"name\": \"Liberia\", \"code\": \"LR\" },\n            { \"name\": \"Libyan Arab Jamahiriya\", \"code\": \"LY\" },\n            { \"name\": \"Liechtenstein\", \"code\": \"LI\" },\n            { \"name\": \"Lithuania\", \"code\": \"LT\" },\n            { \"name\": \"Luxembourg\", \"code\": \"LU\" },\n            { \"name\": \"Macao\", \"code\": \"MO\" },\n            { \"name\": \"Macedonia, The Former Yugoslav Republic of\", \"code\": \"MK\" },\n            { \"name\": \"Madagascar\", \"code\": \"MG\" },\n            { \"name\": \"Malawi\", \"code\": \"MW\" },\n            { \"name\": \"Malaysia\", \"code\": \"MY\" },\n            { \"name\": \"Maldives\", \"code\": \"MV\" },\n            { \"name\": \"Mali\", \"code\": \"ML\" },\n            { \"name\": \"Malta\", \"code\": \"MT\" },\n            { \"name\": \"Marshall Islands\", \"code\": \"MH\" },\n            { \"name\": \"Martinique\", \"code\": \"MQ\" },\n            { \"name\": \"Mauritania\", \"code\": \"MR\" },\n            { \"name\": \"Mauritius\", \"code\": \"MU\" },\n            { \"name\": \"Mayotte\", \"code\": \"YT\" },\n            { \"name\": \"Mexico\", \"code\": \"MX\" },\n            { \"name\": \"Micronesia, Federated States of\", \"code\": \"FM\" },\n            { \"name\": \"Moldova, Republic of\", \"code\": \"MD\" },\n            { \"name\": \"Monaco\", \"code\": \"MC\" },\n            { \"name\": \"Mongolia\", \"code\": \"MN\" },\n            { \"name\": \"Montserrat\", \"code\": \"MS\" },\n            { \"name\": \"Morocco\", \"code\": \"MA\" },\n            { \"name\": \"Mozambique\", \"code\": \"MZ\" },\n            { \"name\": \"Myanmar\", \"code\": \"MM\" },\n            { \"name\": \"Namibia\", \"code\": \"NA\" },\n            { \"name\": \"Nauru\", \"code\": \"NR\" },\n            { \"name\": \"Nepal\", \"code\": \"NP\" },\n            { \"name\": \"Netherlands\", \"code\": \"NL\" },\n            { \"name\": \"Netherlands Antilles\", \"code\": \"AN\" },\n            { \"name\": \"New Caledonia\", \"code\": \"NC\" },\n            { \"name\": \"New Zealand\", \"code\": \"NZ\" },\n            { \"name\": \"Nicaragua\", \"code\": \"NI\" },\n            { \"name\": \"Niger\", \"code\": \"NE\" },\n            { \"name\": \"Nigeria\", \"code\": \"NG\" },\n            { \"name\": \"Niue\", \"code\": \"NU\" },\n            { \"name\": \"Norfolk Island\", \"code\": \"NF\" },\n            { \"name\": \"Northern Mariana Islands\", \"code\": \"MP\" },\n            { \"name\": \"Norway\", \"code\": \"NO\" },\n            { \"name\": \"Oman\", \"code\": \"OM\" },\n            { \"name\": \"Pakistan\", \"code\": \"PK\" },\n            { \"name\": \"Palau\", \"code\": \"PW\" },\n            { \"name\": \"Palestinian Territory, Occupied\", \"code\": \"PS\" },\n            { \"name\": \"Panama\", \"code\": \"PA\" },\n            { \"name\": \"Papua New Guinea\", \"code\": \"PG\" },\n            { \"name\": \"Paraguay\", \"code\": \"PY\" },\n            { \"name\": \"Peru\", \"code\": \"PE\" },\n            { \"name\": \"Philippines\", \"code\": \"PH\" },\n            { \"name\": \"Pitcairn\", \"code\": \"PN\" },\n            { \"name\": \"Poland\", \"code\": \"PL\" },\n            { \"name\": \"Portugal\", \"code\": \"PT\" },\n            { \"name\": \"Puerto Rico\", \"code\": \"PR\" },\n            { \"name\": \"Qatar\", \"code\": \"QA\" },\n            { \"name\": \"Reunion\", \"code\": \"RE\" },\n            { \"name\": \"Romania\", \"code\": \"RO\" },\n            { \"name\": \"Russian Federation\", \"code\": \"RU\" },\n            { \"name\": \"RWANDA\", \"code\": \"RW\" },\n            { \"name\": \"Saint Helena\", \"code\": \"SH\" },\n            { \"name\": \"Saint Kitts and Nevis\", \"code\": \"KN\" },\n            { \"name\": \"Saint Lucia\", \"code\": \"LC\" },\n            { \"name\": \"Saint Pierre and Miquelon\", \"code\": \"PM\" },\n            { \"name\": \"Saint Vincent and the Grenadines\", \"code\": \"VC\" },\n            { \"name\": \"Samoa\", \"code\": \"WS\" },\n            { \"name\": \"San Marino\", \"code\": \"SM\" },\n            { \"name\": \"Sao Tome and Principe\", \"code\": \"ST\" },\n            { \"name\": \"Saudi Arabia\", \"code\": \"SA\" },\n            { \"name\": \"Senegal\", \"code\": \"SN\" },\n            { \"name\": \"Serbia and Montenegro\", \"code\": \"CS\" },\n            { \"name\": \"Seychelles\", \"code\": \"SC\" },\n            { \"name\": \"Sierra Leone\", \"code\": \"SL\" },\n            { \"name\": \"Singapore\", \"code\": \"SG\" },\n            { \"name\": \"Slovakia\", \"code\": \"SK\" },\n            { \"name\": \"Slovenia\", \"code\": \"SI\" },\n            { \"name\": \"Solomon Islands\", \"code\": \"SB\" },\n            { \"name\": \"Somalia\", \"code\": \"SO\" },\n            { \"name\": \"South Africa\", \"code\": \"ZA\" },\n            { \"name\": \"South Georgia and the South Sandwich Islands\", \"code\": \"GS\" },\n            { \"name\": \"Spain\", \"code\": \"ES\" },\n            { \"name\": \"Sri Lanka\", \"code\": \"LK\" },\n            { \"name\": \"Sudan\", \"code\": \"SD\" },\n            { \"name\": \"Suriname\", \"code\": \"SR\" },\n            { \"name\": \"Svalbard and Jan Mayen\", \"code\": \"SJ\" },\n            { \"name\": \"Swaziland\", \"code\": \"SZ\" },\n            { \"name\": \"Sweden\", \"code\": \"SE\" },\n            { \"name\": \"Switzerland\", \"code\": \"CH\" },\n            { \"name\": \"Syrian Arab Republic\", \"code\": \"SY\" },\n            { \"name\": \"Taiwan, Province of China\", \"code\": \"TW\" },\n            { \"name\": \"Tajikistan\", \"code\": \"TJ\" },\n            { \"name\": \"Tanzania, United Republic of\", \"code\": \"TZ\" },\n            { \"name\": \"Thailand\", \"code\": \"TH\" },\n            { \"name\": \"Timor-Leste\", \"code\": \"TL\" },\n            { \"name\": \"Togo\", \"code\": \"TG\" },\n            { \"name\": \"Tokelau\", \"code\": \"TK\" },\n            { \"name\": \"Tonga\", \"code\": \"TO\" },\n            { \"name\": \"Trinidad and Tobago\", \"code\": \"TT\" },\n            { \"name\": \"Tunisia\", \"code\": \"TN\" },\n            { \"name\": \"Turkey\", \"code\": \"TR\" },\n            { \"name\": \"Turkmenistan\", \"code\": \"TM\" },\n            { \"name\": \"Turks and Caicos Islands\", \"code\": \"TC\" },\n            { \"name\": \"Tuvalu\", \"code\": \"TV\" },\n            { \"name\": \"Uganda\", \"code\": \"UG\" },\n            { \"name\": \"Ukraine\", \"code\": \"UA\" },\n            { \"name\": \"United Arab Emirates\", \"code\": \"AE\" },\n            { \"name\": \"United States Minor Outlying Islands\", \"code\": \"UM\" },\n            { \"name\": \"Uruguay\", \"code\": \"UY\" },\n            { \"name\": \"Uzbekistan\", \"code\": \"UZ\" },\n            { \"name\": \"Vanuatu\", \"code\": \"VU\" },\n            { \"name\": \"Venezuela\", \"code\": \"VE\" },\n            { \"name\": \"Viet Nam\", \"code\": \"VN\" },\n            { \"name\": \"Virgin Islands, British\", \"code\": \"VG\" },\n            { \"name\": \"Virgin Islands, U.S.\", \"code\": \"VI\" },\n            { \"name\": \"Wallis and Futuna\", \"code\": \"WF\" },\n            { \"name\": \"Western Sahara\", \"code\": \"EH\" },\n            { \"name\": \"Yemen\", \"code\": \"YE\" },\n            { \"name\": \"Zambia\", \"code\": \"ZM\" },\n            { \"name\": \"Zimbabwe\", \"code\": \"ZW\" }\n        ];\n    }\n}\nContactDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactDetailsComponent, deps: [{ token: i1.KinibindRequestService }, { token: i3.Location }, { token: i2$1.Router }, { token: ContactService }], target: i0.ɵɵFactoryTarget.Component });\nContactDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: ContactDetailsComponent, selector: \"ka-contact-details\", inputs: { contactId: \"contactId\", savedRoute: \"savedRoute\", readOnlyAddress: \"readOnlyAddress\", hiddenFields: \"hiddenFields\" }, outputs: { loaded: \"loaded\", contactSaved: \"contactSaved\" }, ngImport: i0, template: \"<!--<form class=\\\"px2 py2 whitebk mb1\\\" #contactForm=\\\"ngForm\\\" (ngSubmit)=\\\"saveContact()\\\">-->\\n\\n    <div *ngIf=\\\"contact.data\\\">\\n\\n        <label>\\n            <input class=\\\"full\\\" type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"contact.data.name\\\" required>\\n            <span>Full Name <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input class=\\\"full\\\" type=\\\"text\\\" name=\\\"organisation\\\" [(ngModel)]=\\\"contact.data.organisation\\\">\\n            Name of Business / Organisation\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressStreet1\\\"\\n                   [(ngModel)]=\\\"contact.data.street1\\\" required>\\n            <span>Address 1 <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressStreet2\\\"\\n                   [(ngModel)]=\\\"contact.data.street2\\\">\\n            Address 2\\n        </label>\\n\\n        <div class=\\\"flex align-center flex-wrap\\\">\\n            <label>\\n                <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressCity\\\"\\n                       [(ngModel)]=\\\"contact.data.city\\\" required>\\n                <span>Town / City <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n            </label>\\n\\n            <label>\\n                <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressCounty\\\"\\n                       [(ngModel)]=\\\"contact.data.county\\\" required>\\n                <span>State / County / Region <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n            </label>\\n        </div>\\n\\n        <label>\\n            <select name=\\\"country\\\" required [(ngModel)]=\\\"contact.data.countryCode\\\">\\n                <option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.code\\\">\\n                    {{country.name}}\\n                </option>\\n            </select>\\n            <span>Country <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" name=\\\"postcode\\\"\\n                   [(ngModel)]=\\\"contact.data.postcode\\\" required>\\n            <span>Postcode <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"number\\\" name=\\\"telephoneNumber\\\" [(ngModel)]=\\\"contact.data.telephoneNumber\\\">\\n            Telephone Number\\n        </label>\\n\\n    </div>\\n\\n    <div class=\\\"flex justify-end mt2\\\">\\n<!--        <button type=\\\"submit\\\" class=\\\"mt2 but butsm\\\" [disabled]=\\\"contactForm.invalid\\\">-->\\n<!--            SAVE CHANGES-->\\n<!--        </button>-->\\n    </div>\\n\\n<!--</form>-->\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i2.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\" }, { kind: \"directive\", type: i2.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactDetailsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-contact-details', template: \"<!--<form class=\\\"px2 py2 whitebk mb1\\\" #contactForm=\\\"ngForm\\\" (ngSubmit)=\\\"saveContact()\\\">-->\\n\\n    <div *ngIf=\\\"contact.data\\\">\\n\\n        <label>\\n            <input class=\\\"full\\\" type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"contact.data.name\\\" required>\\n            <span>Full Name <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input class=\\\"full\\\" type=\\\"text\\\" name=\\\"organisation\\\" [(ngModel)]=\\\"contact.data.organisation\\\">\\n            Name of Business / Organisation\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressStreet1\\\"\\n                   [(ngModel)]=\\\"contact.data.street1\\\" required>\\n            <span>Address 1 <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressStreet2\\\"\\n                   [(ngModel)]=\\\"contact.data.street2\\\">\\n            Address 2\\n        </label>\\n\\n        <div class=\\\"flex align-center flex-wrap\\\">\\n            <label>\\n                <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressCity\\\"\\n                       [(ngModel)]=\\\"contact.data.city\\\" required>\\n                <span>Town / City <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n            </label>\\n\\n            <label>\\n                <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressCounty\\\"\\n                       [(ngModel)]=\\\"contact.data.county\\\" required>\\n                <span>State / County / Region <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n            </label>\\n        </div>\\n\\n        <label>\\n            <select name=\\\"country\\\" required [(ngModel)]=\\\"contact.data.countryCode\\\">\\n                <option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.code\\\">\\n                    {{country.name}}\\n                </option>\\n            </select>\\n            <span>Country <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" name=\\\"postcode\\\"\\n                   [(ngModel)]=\\\"contact.data.postcode\\\" required>\\n            <span>Postcode <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"number\\\" name=\\\"telephoneNumber\\\" [(ngModel)]=\\\"contact.data.telephoneNumber\\\">\\n            Telephone Number\\n        </label>\\n\\n    </div>\\n\\n    <div class=\\\"flex justify-end mt2\\\">\\n<!--        <button type=\\\"submit\\\" class=\\\"mt2 but butsm\\\" [disabled]=\\\"contactForm.invalid\\\">-->\\n<!--            SAVE CHANGES-->\\n<!--        </button>-->\\n    </div>\\n\\n<!--</form>-->\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: i3.Location }, { type: i2$1.Router }, { type: ContactService }]; }, propDecorators: { contactId: [{\n                type: Input\n            }], savedRoute: [{\n                type: Input\n            }], readOnlyAddress: [{\n                type: Input\n            }], hiddenFields: [{\n                type: Input\n            }], loaded: [{\n                type: Output\n            }], contactSaved: [{\n                type: Output\n            }] } });\n\nclass CountryCodesDirective {\n    constructor(kbRequest) {\n        this.kbRequest = kbRequest;\n        this.searchURL = '/internal/application/countryCodes';\n        this.results = [];\n    }\n    search() {\n        const params = {};\n        if (this.promotedCountries) {\n            params.promotedCountries = this.promotedCountries;\n        }\n        if (this.valueFormat) {\n            params.valueFormat = this.valueFormat;\n        }\n        return this.kbRequest.makePostRequest(this.searchURL, params).toPromise()\n            .then((results) => this.results = results);\n    }\n    ngOnInit() {\n        if (this.onInit) {\n            this.search();\n        }\n    }\n}\nCountryCodesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: CountryCodesDirective, deps: [{ token: i1.KinibindRequestService }], target: i0.ɵɵFactoryTarget.Directive });\nCountryCodesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.6\", type: CountryCodesDirective, selector: \"[netCountryCodes]\", inputs: { promotedCountries: \"promotedCountries\", valueFormat: \"valueFormat\", onInit: \"onInit\" }, exportAs: [\"countryCodes\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: CountryCodesDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[netCountryCodes]',\n                    exportAs: 'countryCodes'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }]; }, propDecorators: { promotedCountries: [{\n                type: Input\n            }], valueFormat: [{\n                type: Input\n            }], onInit: [{\n                type: Input\n            }] } });\n\nclass PostcodeLookupDirective {\n    constructor(kbRequest) {\n        this.kbRequest = kbRequest;\n        this.searchURL = '/internal/application/searchAddress';\n        this.results = [];\n        this.match = false;\n        this.complete = false;\n    }\n    search(postcode, country) {\n        this.results = [];\n        this.complete = false;\n        return this.kbRequest.makePostRequest(this.searchURL, { term: postcode, countryCode: country }).toPromise()\n            .then((results) => {\n            this.results = results;\n            this.complete = true;\n        });\n    }\n}\nPostcodeLookupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: PostcodeLookupDirective, deps: [{ token: i1.KinibindRequestService }], target: i0.ɵɵFactoryTarget.Directive });\nPostcodeLookupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.6\", type: PostcodeLookupDirective, selector: \"[netPostcodeLookup]\", inputs: { postcode: \"postcode\", country: \"country\" }, exportAs: [\"postcodeLookup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: PostcodeLookupDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[netPostcodeLookup]',\n                    exportAs: 'postcodeLookup'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }]; }, propDecorators: { postcode: [{\n                type: Input\n            }], country: [{\n                type: Input\n            }] } });\n\nconst _$7 = lodash.default;\nclass UserService {\n    constructor(kbRequest, config, authService) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n        this.authService = authService;\n    }\n    getUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/summary', {\n            params: { userId }\n        }).toPromise();\n    }\n    createAdminUser(emailAddress, rawPassword, name) {\n        let password = rawPassword;\n        if (rawPassword) {\n            password = this.authService.getHashedPassword(rawPassword, emailAddress, true);\n        }\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/admin', _$7.omitBy({ emailAddress, password, name }, _$7.isNil)).toPromise();\n    }\n    getUserExtended(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user', {\n            params: { userId }\n        }).toPromise();\n    }\n    getAccountUsers(searchString, limit, offset) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/search', {\n            params: _$7.pickBy({ searchString, limit, offset }, _$7.identity)\n        });\n    }\n    getAllUserAccountRoles(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/roles', {\n            params: { userId }\n        }).toPromise();\n    }\n    getAssignableRoles(userId, scope, filterString = '', offset = 0, limit = 10) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/assignableRoles', {\n            params: { userId, scope, filterString, offset, limit }\n        }).toPromise();\n    }\n    updateUserScope(scopeObjects, userId) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + `/user/updateUserScope?userId=${userId}`, scopeObjects).toPromise();\n    }\n    removeUserFromAccount(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account/removeUser', {\n            params: { userId }\n        }).toPromise();\n    }\n    requestPasswordReset(emailAddress) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/passwordReset', {\n            params: { emailAddress }\n        }).toPromise();\n    }\n    unlockUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/unlock', {\n            params: { userId }\n        }).toPromise();\n    }\n    suspendUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/suspend', {\n            params: { userId }\n        }).toPromise();\n    }\n    getAccounts(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/accounts', {\n            params: { userId }\n        }).toPromise();\n    }\n    switchAccount(accountId, userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/switchAccount', {\n            params: { accountId, userId }\n        }).toPromise();\n    }\n}\nUserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }, { type: AuthenticationService }]; } });\n\nconst _$6 = lodash.default;\nclass AccountUsersComponent {\n    constructor(userService, router, authService) {\n        this.userService = userService;\n        this.router = router;\n        this.authService = authService;\n        this.searchText = new BehaviorSubject('');\n        this.limit = new BehaviorSubject(10);\n        this.offset = new BehaviorSubject(0);\n        this.pageIndex = 0;\n        this.resultSize = 0;\n        this.reloadUsers = new Subject$1();\n        this.allSelected = false;\n        this.selectionMade = false;\n        this.lodash = _$6;\n        this.passwordReset = false;\n        this.userUnlocked = false;\n        this.userSuspended = false;\n        this.newAdminUser = false;\n        this.newAdminEmail = '';\n        this.newAdminPassword = null;\n        this.newAdminAdded = false;\n    }\n    ngOnInit() {\n        merge(this.searchText, this.limit, this.offset, this.reloadUsers)\n            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(() => this.getUsers()))\n            .subscribe((users) => {\n            this.users = users;\n        });\n    }\n    saveNewAdminUser() {\n        if (this.newAdminPassword && this.newAdminPassword.length < 8) {\n            return true;\n        }\n        return this.userService.createAdminUser(this.newAdminEmail, this.newAdminPassword || null, null)\n            .then(res => {\n            this.newAdminEmail = '';\n            this.newAdminPassword = null;\n            this.newAdminUser = false;\n            this.newAdminAdded = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.newAdminAdded = false;\n            }, 3000);\n        });\n    }\n    viewUser(user) {\n        if (user.status !== 'PENDING') {\n            const route = this.userRoleRoute ? this.userRoleRoute + '/' + user.id : user.id;\n            this.router.navigate([route]);\n        }\n    }\n    toggleSelectAllUsers() {\n        this.allSelected = !this.allSelected;\n        this.selectionMade = this.allSelected;\n        this.users = this.lodash.map(this.users, user => {\n            user.selected = this.allSelected;\n            return user;\n        });\n    }\n    toggleUsersSelected(user) {\n        user.selected = !user.selected;\n        this.selectionMade = this.lodash.some(this.users, 'selected');\n    }\n    search(searchTerm) {\n        this.searchText.next(searchTerm);\n    }\n    updatePage(pageEvent) {\n        const limit = this.limit.getValue();\n        if (pageEvent.pageSize !== limit) {\n            this.offset.next(0);\n            this.limit.next(pageEvent.pageSize);\n            this.pageIndex = 0;\n        }\n        else {\n            this.offset.next(pageEvent.pageSize * (pageEvent.pageIndex));\n            this.pageIndex = pageEvent.pageIndex;\n        }\n    }\n    removeUser(user) {\n        const message = 'Are you sure you would like to remove this user?';\n        if (window.confirm(message)) {\n            this.userService.removeUserFromAccount(user.id).then(() => {\n                this.reloadUsers.next(Date.now());\n            });\n        }\n    }\n    resetPassword(user) {\n        this.authService.sendPasswordReset(user.emailAddress, null).then(() => {\n            this.passwordReset = true;\n            setTimeout(() => {\n                this.passwordReset = false;\n            }, 3000);\n        });\n    }\n    unlockUser(userId) {\n        this.userService.unlockUser(userId).then(() => {\n            this.userUnlocked = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.userUnlocked = false;\n            }, 3000);\n        });\n    }\n    suspendUser(userId) {\n        this.userService.suspendUser(userId).then(() => {\n            this.userSuspended = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.userSuspended = false;\n            }, 3000);\n        });\n    }\n    getUsers() {\n        return this.userService.getAccountUsers(this.searchText.getValue(), this.limit.getValue(), this.offset.getValue()).pipe(map((data) => {\n            this.resultSize = data.totalRecords;\n            return data.results;\n        }));\n    }\n}\nAccountUsersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountUsersComponent, deps: [{ token: UserService }, { token: i2$1.Router }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nAccountUsersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: AccountUsersComponent, selector: \"ka-account-users\", inputs: { userRoleRoute: \"userRoleRoute\", disableInvite: \"disableInvite\", createAdminUser: \"createAdminUser\" }, ngImport: i0, template: \"<div class=\\\"p-6 bg-white border-b border-gray-200\\\">\\n    <div class=\\\"md:flex md:items-center md:justify-between md:space-x-5\\\">\\n        <div class=\\\"flex items-start flex-1\\\">\\n            <div class=\\\"pt-1.5\\\">\\n                <h1 class=\\\"text-2xl font-bold text-gray-900\\\">Account Users</h1>\\n                <p class=\\\"text-sm font-medium text-gray-500\\\">\\n                    A list of all the users currently assigned to your account.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"mt-6 flex flex-col-reverse justify-stretch\\\">\\n            <button type=\\\"button\\\" [routerLink]=\\\"['/invite-user']\\\" *ngIf=\\\"!disableInvite\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Invite User\\n            </button>\\n\\n            <button type=\\\"button\\\" *ngIf=\\\"createAdminUser\\\" (click)=\\\"newAdminUser = true;\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Create Admin User\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"px-4 sm:px-6 lg:px-8 mt-0\\\">\\n    <div class=\\\"flex flex-col\\\">\\n        <div class=\\\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\\\">\\n            <div class=\\\"inline-block min-w-full py-2 align-middle\\\">\\n\\n                <div *ngIf=\\\"newAdminAdded\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n                         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Admin user successfully added.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"newAdminUser\\\" class=\\\"px-6 pb-6 mt-4 flex flex-col border-b\\\">\\n                    <p><b>Add New Admin User</b></p>\\n                    <input type=\\\"email\\\" [(ngModel)]=\\\"newAdminEmail\\\" placeholder=\\\"Enter email address for user\\\">\\n                    <input class=\\\"mt-2\\\" type=\\\"password\\\" [(ngModel)]=\\\"newAdminPassword\\\"\\n                           placeholder=\\\"Enter password for user\\\"\\n                           [ngClass]=\\\"{'border border-red-600': newAdminPassword && newAdminPassword.length < 8}\\\">\\n                    <div *ngIf=\\\"newAdminPassword && newAdminPassword.length < 8\\\">\\n                        <small class=\\\"text-red-600\\\">Password must be at least 8 characters long.</small>\\n                    </div>\\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\\n                        email.</small></div>\\n                    <div class=\\\"flex items-center justify-between my-4\\\">\\n                        <div></div>\\n                        <button (click)=\\\"saveNewAdminUser()\\\"\\n                                class=\\\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\\\">\\n                            Save New User\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"passwordReset\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Password reset email sent. Please check your email for further instructions</div>\\n                </div>\\n\\n                <div *ngIf=\\\"userUnlocked\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-primary h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This user has been successfully unlocked.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"userSuspended\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This user has been suspended.</div>\\n                </div>\\n\\n                <div class=\\\"mt-3 sm:mt-0 flex-1\\\">\\n                    <label for=\\\"mobile-search-candidate\\\" class=\\\"sr-only\\\">Search</label>\\n                    <div class=\\\"flex\\\">\\n                        <div class=\\\"relative flex-grow focus-within:z-10\\\">\\n                            <div class=\\\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\\\">\\n                                <svg class=\\\"h-5 w-5 text-gray-400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                     viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                    <path fill-rule=\\\"evenodd\\\"\\n                                          d=\\\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\\\"\\n                                          clip-rule=\\\"evenodd\\\"/>\\n                                </svg>\\n                            </div>\\n                            <input type=\\\"text\\\" name=\\\"mobile-search-candidate\\\" id=\\\"mobile-search-candidate\\\"\\n                                   class=\\\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\\\"\\n                                   placeholder=\\\"Search users\\\"\\n                                   (keyup)=\\\"searchText.next($event.target.value)\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <table class=\\\"min-w-full border-separate bg-white\\\" style=\\\"border-spacing: 0\\\">\\n                    <ng-template [ngIf]=\\\"users && users.length\\\">\\n\\n                        <thead class=\\\"bg-gray-100\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Name\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Email\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Status\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\\\">\\n                                <span class=\\\"sr-only\\\">Edit</span>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor=\\\"let user of users; let i = index\\\" class=\\\"hover:bg-gray-50 cursor-pointer\\\">\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\\\">\\n                                {{user.name}}\\n                            </td>\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                {{user.emailAddress}}\\n                            </td>\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <span [ngClass]=\\\"{'bg-success': user.status === 'ACTIVE', 'bg-primary': user.status === 'PENDING', 'bg-danger': user.status === 'SUSPENDED'}\\\"\\n                                    class=\\\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\\\">\\n                                    {{user.status.toLowerCase()}}</span>\\n                            </td>\\n                            <td class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <div class=\\\"flex items-center justify-end\\\">\\n                                    <button mat-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">\\n                                        Actions\\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\\n                                    </button>\\n                                    <mat-menu #menu=\\\"matMenu\\\">\\n                                        <button mat-menu-item (click)=\\\"removeUser(user)\\\">Remove</button>\\n                                        <button mat-menu-item (click)=\\\"resetPassword(user)\\\">Reset Password</button>\\n                                        <button mat-menu-item (click)=\\\"unlockUser(user.id)\\\"\\n                                                *ngIf=\\\"user.status === 'LOCKED' || user.status === 'SUSPENDED'\\\">Unlock\\n                                        </button>\\n                                        <button mat-menu-item (click)=\\\"suspendUser(user.id)\\\"\\n                                                *ngIf=\\\"user.status !== 'SUSPENDED'\\\">\\n                                            Suspend\\n                                        </button>\\n                                    </mat-menu>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td colspan=\\\"4\\\"\\n                                class=\\\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\\\">\\n                                <div class=\\\"paging-toolbar flex align-center justify-end\\\">\\n                                    <mat-paginator class=\\\"user-paginator flex1 pl050 mb0\\\" [length]=\\\"resultSize\\\"\\n                                                   [pageSize]=\\\"limit.getValue()\\\"\\n                                                   [pageIndex]=\\\"pageIndex\\\"\\n                                                   [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"\\n                                                   (page)=\\\"updatePage($event)\\\">\\n                                    </mat-paginator>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </ng-template>\\n                </table>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.list-items{background-color:#fff}.list-items .item-list{position:relative;border-bottom:1px solid #ddd;padding-left:1rem}.list-items .item-list:after{content:\\\"\\\\232a\\\";position:absolute;font-size:1.8rem;color:#ccc;right:0;top:25%}.list-items .item-list h3{margin:.3rem 0}.list-items .item-list p{margin:.3rem 0;color:#838383;font-size:.9rem}.list-items .item-list p:first-of-type{margin-bottom:0}.list-items .item-list p:last-of-type{margin-top:0}@media only screen and (max-width: 320px){.list-items .item-list h3{font-size:1.2rem}.list-items .item-list p{font-size:.85rem}}@media only screen and (max-width: 768px){.account-users .desktop-table-view{display:none}.account-users .mobile-list-view{display:block}}@media only screen and (min-width: 768px){.account-users .desktop-table-view{display:block;padding:1rem}.account-users .mobile-list-view{display:none}}.account-users .desktop-table-view,.account-users .mobile-list-view,.account-users table{background-color:#fff}.account-users tbody tr.PENDING td:not(.actions){opacity:.6}.account-users tbody tr:not(.PENDING):hover{background-color:#f5f5f5;cursor:pointer}.account-users tbody tr td.status span{padding:.25rem .4rem;text-transform:lowercase;font-size:.9rem;border-radius:2px}.account-users tbody tr td.status span.PENDING{background-color:gray;color:#fff}.account-users tbody tr td.status span.ACTIVE{background-color:#12a6d3;color:#fff}.account-users .invite-user{margin-bottom:0}.account-users .user-paginator{background:transparent}\\n\"], dependencies: [{ kind: \"directive\", type: i2$1.RouterLink, selector: \":not(a):not(area)[routerLink]\", inputs: [\"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i6.MatPaginator, selector: \"mat-paginator\", inputs: [\"disabled\"], exportAs: [\"matPaginator\"] }, { kind: \"component\", type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i9.MatMenu, selector: \"mat-menu\", exportAs: [\"matMenu\"] }, { kind: \"component\", type: i9.MatMenuItem, selector: \"[mat-menu-item]\", inputs: [\"disabled\", \"disableRipple\", \"role\"], exportAs: [\"matMenuItem\"] }, { kind: \"directive\", type: i9.MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", exportAs: [\"matMenuTrigger\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountUsersComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-account-users', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"p-6 bg-white border-b border-gray-200\\\">\\n    <div class=\\\"md:flex md:items-center md:justify-between md:space-x-5\\\">\\n        <div class=\\\"flex items-start flex-1\\\">\\n            <div class=\\\"pt-1.5\\\">\\n                <h1 class=\\\"text-2xl font-bold text-gray-900\\\">Account Users</h1>\\n                <p class=\\\"text-sm font-medium text-gray-500\\\">\\n                    A list of all the users currently assigned to your account.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"mt-6 flex flex-col-reverse justify-stretch\\\">\\n            <button type=\\\"button\\\" [routerLink]=\\\"['/invite-user']\\\" *ngIf=\\\"!disableInvite\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Invite User\\n            </button>\\n\\n            <button type=\\\"button\\\" *ngIf=\\\"createAdminUser\\\" (click)=\\\"newAdminUser = true;\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Create Admin User\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"px-4 sm:px-6 lg:px-8 mt-0\\\">\\n    <div class=\\\"flex flex-col\\\">\\n        <div class=\\\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\\\">\\n            <div class=\\\"inline-block min-w-full py-2 align-middle\\\">\\n\\n                <div *ngIf=\\\"newAdminAdded\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n                         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Admin user successfully added.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"newAdminUser\\\" class=\\\"px-6 pb-6 mt-4 flex flex-col border-b\\\">\\n                    <p><b>Add New Admin User</b></p>\\n                    <input type=\\\"email\\\" [(ngModel)]=\\\"newAdminEmail\\\" placeholder=\\\"Enter email address for user\\\">\\n                    <input class=\\\"mt-2\\\" type=\\\"password\\\" [(ngModel)]=\\\"newAdminPassword\\\"\\n                           placeholder=\\\"Enter password for user\\\"\\n                           [ngClass]=\\\"{'border border-red-600': newAdminPassword && newAdminPassword.length < 8}\\\">\\n                    <div *ngIf=\\\"newAdminPassword && newAdminPassword.length < 8\\\">\\n                        <small class=\\\"text-red-600\\\">Password must be at least 8 characters long.</small>\\n                    </div>\\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\\n                        email.</small></div>\\n                    <div class=\\\"flex items-center justify-between my-4\\\">\\n                        <div></div>\\n                        <button (click)=\\\"saveNewAdminUser()\\\"\\n                                class=\\\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\\\">\\n                            Save New User\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"passwordReset\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Password reset email sent. Please check your email for further instructions</div>\\n                </div>\\n\\n                <div *ngIf=\\\"userUnlocked\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-primary h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This user has been successfully unlocked.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"userSuspended\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This user has been suspended.</div>\\n                </div>\\n\\n                <div class=\\\"mt-3 sm:mt-0 flex-1\\\">\\n                    <label for=\\\"mobile-search-candidate\\\" class=\\\"sr-only\\\">Search</label>\\n                    <div class=\\\"flex\\\">\\n                        <div class=\\\"relative flex-grow focus-within:z-10\\\">\\n                            <div class=\\\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\\\">\\n                                <svg class=\\\"h-5 w-5 text-gray-400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                     viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                    <path fill-rule=\\\"evenodd\\\"\\n                                          d=\\\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\\\"\\n                                          clip-rule=\\\"evenodd\\\"/>\\n                                </svg>\\n                            </div>\\n                            <input type=\\\"text\\\" name=\\\"mobile-search-candidate\\\" id=\\\"mobile-search-candidate\\\"\\n                                   class=\\\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\\\"\\n                                   placeholder=\\\"Search users\\\"\\n                                   (keyup)=\\\"searchText.next($event.target.value)\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <table class=\\\"min-w-full border-separate bg-white\\\" style=\\\"border-spacing: 0\\\">\\n                    <ng-template [ngIf]=\\\"users && users.length\\\">\\n\\n                        <thead class=\\\"bg-gray-100\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Name\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Email\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Status\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\\\">\\n                                <span class=\\\"sr-only\\\">Edit</span>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor=\\\"let user of users; let i = index\\\" class=\\\"hover:bg-gray-50 cursor-pointer\\\">\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\\\">\\n                                {{user.name}}\\n                            </td>\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                {{user.emailAddress}}\\n                            </td>\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <span [ngClass]=\\\"{'bg-success': user.status === 'ACTIVE', 'bg-primary': user.status === 'PENDING', 'bg-danger': user.status === 'SUSPENDED'}\\\"\\n                                    class=\\\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\\\">\\n                                    {{user.status.toLowerCase()}}</span>\\n                            </td>\\n                            <td class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <div class=\\\"flex items-center justify-end\\\">\\n                                    <button mat-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">\\n                                        Actions\\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\\n                                    </button>\\n                                    <mat-menu #menu=\\\"matMenu\\\">\\n                                        <button mat-menu-item (click)=\\\"removeUser(user)\\\">Remove</button>\\n                                        <button mat-menu-item (click)=\\\"resetPassword(user)\\\">Reset Password</button>\\n                                        <button mat-menu-item (click)=\\\"unlockUser(user.id)\\\"\\n                                                *ngIf=\\\"user.status === 'LOCKED' || user.status === 'SUSPENDED'\\\">Unlock\\n                                        </button>\\n                                        <button mat-menu-item (click)=\\\"suspendUser(user.id)\\\"\\n                                                *ngIf=\\\"user.status !== 'SUSPENDED'\\\">\\n                                            Suspend\\n                                        </button>\\n                                    </mat-menu>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td colspan=\\\"4\\\"\\n                                class=\\\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\\\">\\n                                <div class=\\\"paging-toolbar flex align-center justify-end\\\">\\n                                    <mat-paginator class=\\\"user-paginator flex1 pl050 mb0\\\" [length]=\\\"resultSize\\\"\\n                                                   [pageSize]=\\\"limit.getValue()\\\"\\n                                                   [pageIndex]=\\\"pageIndex\\\"\\n                                                   [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"\\n                                                   (page)=\\\"updatePage($event)\\\">\\n                                    </mat-paginator>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </ng-template>\\n                </table>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.list-items{background-color:#fff}.list-items .item-list{position:relative;border-bottom:1px solid #ddd;padding-left:1rem}.list-items .item-list:after{content:\\\"\\\\232a\\\";position:absolute;font-size:1.8rem;color:#ccc;right:0;top:25%}.list-items .item-list h3{margin:.3rem 0}.list-items .item-list p{margin:.3rem 0;color:#838383;font-size:.9rem}.list-items .item-list p:first-of-type{margin-bottom:0}.list-items .item-list p:last-of-type{margin-top:0}@media only screen and (max-width: 320px){.list-items .item-list h3{font-size:1.2rem}.list-items .item-list p{font-size:.85rem}}@media only screen and (max-width: 768px){.account-users .desktop-table-view{display:none}.account-users .mobile-list-view{display:block}}@media only screen and (min-width: 768px){.account-users .desktop-table-view{display:block;padding:1rem}.account-users .mobile-list-view{display:none}}.account-users .desktop-table-view,.account-users .mobile-list-view,.account-users table{background-color:#fff}.account-users tbody tr.PENDING td:not(.actions){opacity:.6}.account-users tbody tr:not(.PENDING):hover{background-color:#f5f5f5;cursor:pointer}.account-users tbody tr td.status span{padding:.25rem .4rem;text-transform:lowercase;font-size:.9rem;border-radius:2px}.account-users tbody tr td.status span.PENDING{background-color:gray;color:#fff}.account-users tbody tr td.status span.ACTIVE{background-color:#12a6d3;color:#fff}.account-users .invite-user{margin-bottom:0}.account-users .user-paginator{background:transparent}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: UserService }, { type: i2$1.Router }, { type: AuthenticationService }]; }, propDecorators: { userRoleRoute: [{\n                type: Input\n            }], disableInvite: [{\n                type: Input\n            }], createAdminUser: [{\n                type: Input\n            }] } });\n\nclass RoleService {\n    constructor(kbRequest, config) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n    }\n    getScopeAccesses() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/role/scopeAccesses')\n            .toPromise();\n    }\n}\nRoleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: RoleService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }], target: i0.ɵɵFactoryTarget.Injectable });\nRoleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: RoleService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: RoleService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }]; } });\n\nconst _$5 = lodash.default;\nclass EditRolesComponent {\n    constructor() {\n        this.closed = new EventEmitter();\n        this.saved = new EventEmitter();\n        this.updatedScopesChange = new EventEmitter();\n        this._ = _$5;\n        this.Object = Object;\n        this.disabled = {};\n        this.checked = {};\n        this.loading = true;\n        this.roles = [];\n        this.errors = {};\n    }\n    ngOnInit() {\n        if (!this.updatedScopes) {\n            this.updatedScopes = {};\n        }\n        if (this.scope) {\n            const userId = this.user ? this.user.id : null;\n            const promises = [\n                this.userService.getAssignableRoles(userId, this.scope),\n                this.loadUserRoles()\n            ];\n            Promise.all(promises).then(res => {\n                this.assignableRoles = res[0];\n                this.setInitialRoleState();\n                this.loading = false;\n            });\n        }\n    }\n    updateRole(event, scopeId) {\n        // Reset the displayed errors at this point;\n        this.errors = {};\n        const checked = event.target.checked;\n        const owner = event.target.value === 'OWNER';\n        let roleIds = [];\n        if (owner) {\n            if (checked) {\n                roleIds = [null];\n            }\n            else {\n                delete this.checked[scopeId].owner;\n                roleIds = this.setRoleIds(scopeId);\n            }\n            this.disabled[scopeId] = checked;\n        }\n        else {\n            roleIds = this.setRoleIds(scopeId);\n        }\n        this.updatedScopes[scopeId] = {\n            scope: this.scope,\n            scopeId,\n            roleIds: _$5.uniq(roleIds)\n        };\n        this.updatedScopesChange.next(this.updatedScopes);\n    }\n    updateUserScope() {\n        this.errors = {};\n        // Check if we are saving any ACCOUNT scopes. If we are, check there are some roles attached.\n        const accounts = _$5.filter(this.updatedScopes, update => {\n            return update.scope === 'ACCOUNT' && update.roleIds.length > 0;\n        });\n        if (accounts.length > 0) {\n            accounts.forEach(scopeUpdate => {\n                this.errors[scopeUpdate.scopeId] = 'Please select at least one Account role for this user.';\n            });\n            return false;\n        }\n        this.userService.updateUserScope(_$5.values(this.updatedScopes), this.user.id).then(() => {\n            this.closed.emit(true);\n        });\n    }\n    setInitialRoleState() {\n        this.assignableRoles.forEach(assignableRole => {\n            if (!this.checked[assignableRole.scopeId]) {\n                this.checked[assignableRole.scopeId] = {};\n            }\n            const allAssignableRoles = _$5.values(assignableRole.roles);\n            const existing = _$5.find(this.roles, { scopeId: assignableRole.scopeId });\n            if (existing && (existing.roles[0] === null && existing.roles.length === 1)) {\n                this.checked[assignableRole.scopeId]['owner'] = true;\n                this.disabled[assignableRole.scopeId] = true;\n            }\n            allAssignableRoles.forEach(role => {\n                if (role) {\n                    const checked = existing ? !!_$5.find(existing.roles, { id: role.id }) : false;\n                    this.checked[assignableRole.scopeId][role.id] = checked;\n                }\n            });\n        });\n    }\n    setRoleIds(scopeId) {\n        const ids = Object.keys(this.checked[scopeId]);\n        const res = ids.filter(id => {\n            return this.checked[scopeId][id];\n        });\n        return res.length ? res.map(Number) : [];\n    }\n    loadUserRoles() {\n        if (this.user) {\n            return this.userService.getAllUserAccountRoles(this.user.id).then(roles => {\n                this.roles = roles[this.scopeKey];\n                return true;\n            });\n        }\n    }\n}\nEditRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditRolesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditRolesComponent, selector: \"ka-edit-roles\", inputs: { scope: \"scope\", scopeKey: \"scopeKey\", user: \"user\", updatedScopes: \"updatedScopes\", hideApply: \"hideApply\", userService: \"userService\" }, outputs: { closed: \"closed\", saved: \"saved\", updatedScopesChange: \"updatedScopesChange\" }, ngImport: i0, template: \"<ng-template [ngIf]=\\\"assignableRoles\\\">\\n    <ng-template ngFor let-assignableRole [ngForOf]=\\\"_.orderBy(assignableRoles, ['scopeId'], ['asc'])\\\">\\n\\n        <fieldset class=\\\"mb-4 ml-4\\\">\\n            <legend class=\\\"text-sm font-medium text-gray-800\\\">{{assignableRole.scopeObjectDescription}}</legend>\\n\\n            <ng-template [ngIf]=\\\"_.reject(assignableRole.roles).length\\\">\\n                <div><i>You have reached the max number of users</i></div>\\n            </ng-template>\\n\\n            <ng-template [ngIf]=\\\"!_.reject(assignableRole.roles).length\\\">\\n                <div class=\\\"mt-4 flex items-center\\\">\\n\\n                    <ng-template ngFor let-roleIndex [ngForOf]=\\\"Object.keys(assignableRole.roles)\\\">\\n\\n                        <div class=\\\"flex items-start\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\">\\n                            <div class=\\\"flex items-center h-5\\\">\\n                                <input type=\\\"checkbox\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\"\\n                                       [disabled]=\\\"disabled[assignableRole.scopeId]\\\"\\n                                       [(ngModel)]=\\\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\\\"\\n                                       (change)=\\\"updateRole($event, assignableRole.scopeId)\\\"\\n                                       [name]=\\\"'name' + roleIndex\\\"\\n                                       class=\\\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\\\">\\n                            </div>\\n                            <div class=\\\"ml-3 text-sm\\\">\\n                                <label class=\\\"font-medium text-gray-700\\\">{{assignableRole.roles[roleIndex].name}}</label>\\n                            </div>\\n                        </div>\\n\\n                    </ng-template>\\n\\n                    <div class=\\\"flex items-start\\\">\\n                        <div class=\\\"flex items-center h-5\\\">\\n                            <input value=\\\"OWNER\\\" type=\\\"checkbox\\\" [name]=\\\"'owner' + assignableRole.scopeId\\\"\\n                                   [checked]=\\\"checked[assignableRole.scopeId]['owner']\\\"\\n                                   (change)=\\\"updateRole($event, assignableRole.scopeId)\\\"\\n                                   class=\\\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\\\">\\n                        </div>\\n                        <div class=\\\"ml-3 text-sm\\\">\\n                            <label class=\\\"font-medium text-gray-700\\\">Owner</label>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"text-red-500 m-2\\\" *ngIf=\\\"errors[assignableRole.scopeId]\\\">\\n                        {{errors[assignableRole.scopeId]}}\\n                    </div>\\n                </div>\\n            </ng-template>\\n\\n        </fieldset>\\n\\n    </ng-template>\\n</ng-template>\\n\\n<!--<table class=\\\"edit-roles\\\" *ngIf=\\\"assignableRoles\\\" [ngStyle]=\\\"{marginBottom: hideApply ? '0' : '100px'}\\\">-->\\n<!--    <tbody *ngFor=\\\"let assignableRole of _.orderBy(assignableRoles, ['scopeId'], ['asc'])\\\">-->\\n<!--    <tr class=\\\"thead\\\">-->\\n<!--        <th>{{assignableRole.scopeObjectDescription}}</th>-->\\n<!--    </tr>-->\\n<!--    <tr>-->\\n<!--        <td>-->\\n<!--            <div class=\\\"flex align-center\\\" *ngIf=\\\"!loading\\\">-->\\n<!--                <ng-template [ngIf]=\\\"_.reject(assignableRole.roles).length\\\">-->\\n<!--                    <i>You have reached the max number of users</i>-->\\n<!--                </ng-template>-->\\n\\n<!--                <ng-template [ngIf]=\\\"!_.reject(assignableRole.roles).length\\\">-->\\n<!--                    <span class=\\\"mr1 flex items-center align-baseline\\\" *ngIf=\\\"assignableRole.scope === 'ACCOUNT'\\\">-->\\n<!--                        <input type=\\\"checkbox\\\" value=\\\"OWNER\\\" class=\\\"role-checkbox\\\"-->\\n<!--                               [checked]=\\\"checked[assignableRole.scopeId]['owner']\\\"-->\\n<!--                               (change)=\\\"updateRole($event, assignableRole.scopeId)\\\">-->\\n<!--                        Owner-->\\n<!--                    </span>-->\\n<!--                    <ng-template ngFor let-roleIndex [ngForOf]=\\\"Object.keys(assignableRole.roles)\\\">-->\\n<!--                        <span class=\\\"mr1 flex items-center align-baseline\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\">-->\\n<!--                            <input type=\\\"checkbox\\\" class=\\\"role-checkbox\\\"-->\\n<!--                                   *ngIf=\\\"assignableRole.roles[roleIndex]\\\"-->\\n<!--                                   [disabled]=\\\"disabled[assignableRole.scopeId]\\\"-->\\n<!--                                   [(ngModel)]=\\\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\\\"-->\\n<!--                                   (change)=\\\"updateRole($event, assignableRole.scopeId)\\\">-->\\n<!--                            {{assignableRole.roles[roleIndex].name}}-->\\n<!--                        </span>-->\\n<!--                        <i *ngIf=\\\"!assignableRole.roles[roleIndex]\\\" class=\\\"mr2\\\">-->\\n<!--                            Upgrade-->\\n<!--                        </i>-->\\n<!--                    </ng-template>-->\\n<!--                </ng-template>-->\\n<!--            </div>-->\\n\\n<!--            <p class=\\\"mb0 mt050 text-red\\\"-->\\n<!--               *ngIf=\\\"errors[assignableRole.scopeId]\\\">{{errors[assignableRole.scopeId]}}</p>-->\\n<!--        </td>-->\\n\\n<!--    </tr>-->\\n<!--    </tbody>-->\\n<!--</table>-->\\n\\n<div class=\\\"flex align-center items-center justify-between p1 p-4 apply-bar\\\" *ngIf=\\\"!hideApply\\\">\\n    <div></div>\\n    <button mat-flat-button color=\\\"primary\\\" class=\\\"but butsm\\\" (click)=\\\"updateUserScope()\\\">Apply Changes</button>\\n</div>\\n\", styles: [\"table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}table.edit-roles{background-color:#fff}table.edit-roles tbody tr td{padding-left:1rem}table.edit-roles tbody tr.thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd;font-weight:600}table.edit-roles tbody tr:not(.thead):hover{background-color:#f5f5f5;cursor:pointer}table.edit-roles tbody .role-checkbox{height:auto;margin:0 .25rem 0 0}.apply-bar{position:fixed;bottom:0;right:0;left:0;background-color:#fff;border-top:2px solid #dddddd}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditRolesComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-roles', encapsulation: ViewEncapsulation.None, template: \"<ng-template [ngIf]=\\\"assignableRoles\\\">\\n    <ng-template ngFor let-assignableRole [ngForOf]=\\\"_.orderBy(assignableRoles, ['scopeId'], ['asc'])\\\">\\n\\n        <fieldset class=\\\"mb-4 ml-4\\\">\\n            <legend class=\\\"text-sm font-medium text-gray-800\\\">{{assignableRole.scopeObjectDescription}}</legend>\\n\\n            <ng-template [ngIf]=\\\"_.reject(assignableRole.roles).length\\\">\\n                <div><i>You have reached the max number of users</i></div>\\n            </ng-template>\\n\\n            <ng-template [ngIf]=\\\"!_.reject(assignableRole.roles).length\\\">\\n                <div class=\\\"mt-4 flex items-center\\\">\\n\\n                    <ng-template ngFor let-roleIndex [ngForOf]=\\\"Object.keys(assignableRole.roles)\\\">\\n\\n                        <div class=\\\"flex items-start\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\">\\n                            <div class=\\\"flex items-center h-5\\\">\\n                                <input type=\\\"checkbox\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\"\\n                                       [disabled]=\\\"disabled[assignableRole.scopeId]\\\"\\n                                       [(ngModel)]=\\\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\\\"\\n                                       (change)=\\\"updateRole($event, assignableRole.scopeId)\\\"\\n                                       [name]=\\\"'name' + roleIndex\\\"\\n                                       class=\\\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\\\">\\n                            </div>\\n                            <div class=\\\"ml-3 text-sm\\\">\\n                                <label class=\\\"font-medium text-gray-700\\\">{{assignableRole.roles[roleIndex].name}}</label>\\n                            </div>\\n                        </div>\\n\\n                    </ng-template>\\n\\n                    <div class=\\\"flex items-start\\\">\\n                        <div class=\\\"flex items-center h-5\\\">\\n                            <input value=\\\"OWNER\\\" type=\\\"checkbox\\\" [name]=\\\"'owner' + assignableRole.scopeId\\\"\\n                                   [checked]=\\\"checked[assignableRole.scopeId]['owner']\\\"\\n                                   (change)=\\\"updateRole($event, assignableRole.scopeId)\\\"\\n                                   class=\\\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\\\">\\n                        </div>\\n                        <div class=\\\"ml-3 text-sm\\\">\\n                            <label class=\\\"font-medium text-gray-700\\\">Owner</label>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"text-red-500 m-2\\\" *ngIf=\\\"errors[assignableRole.scopeId]\\\">\\n                        {{errors[assignableRole.scopeId]}}\\n                    </div>\\n                </div>\\n            </ng-template>\\n\\n        </fieldset>\\n\\n    </ng-template>\\n</ng-template>\\n\\n<!--<table class=\\\"edit-roles\\\" *ngIf=\\\"assignableRoles\\\" [ngStyle]=\\\"{marginBottom: hideApply ? '0' : '100px'}\\\">-->\\n<!--    <tbody *ngFor=\\\"let assignableRole of _.orderBy(assignableRoles, ['scopeId'], ['asc'])\\\">-->\\n<!--    <tr class=\\\"thead\\\">-->\\n<!--        <th>{{assignableRole.scopeObjectDescription}}</th>-->\\n<!--    </tr>-->\\n<!--    <tr>-->\\n<!--        <td>-->\\n<!--            <div class=\\\"flex align-center\\\" *ngIf=\\\"!loading\\\">-->\\n<!--                <ng-template [ngIf]=\\\"_.reject(assignableRole.roles).length\\\">-->\\n<!--                    <i>You have reached the max number of users</i>-->\\n<!--                </ng-template>-->\\n\\n<!--                <ng-template [ngIf]=\\\"!_.reject(assignableRole.roles).length\\\">-->\\n<!--                    <span class=\\\"mr1 flex items-center align-baseline\\\" *ngIf=\\\"assignableRole.scope === 'ACCOUNT'\\\">-->\\n<!--                        <input type=\\\"checkbox\\\" value=\\\"OWNER\\\" class=\\\"role-checkbox\\\"-->\\n<!--                               [checked]=\\\"checked[assignableRole.scopeId]['owner']\\\"-->\\n<!--                               (change)=\\\"updateRole($event, assignableRole.scopeId)\\\">-->\\n<!--                        Owner-->\\n<!--                    </span>-->\\n<!--                    <ng-template ngFor let-roleIndex [ngForOf]=\\\"Object.keys(assignableRole.roles)\\\">-->\\n<!--                        <span class=\\\"mr1 flex items-center align-baseline\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\">-->\\n<!--                            <input type=\\\"checkbox\\\" class=\\\"role-checkbox\\\"-->\\n<!--                                   *ngIf=\\\"assignableRole.roles[roleIndex]\\\"-->\\n<!--                                   [disabled]=\\\"disabled[assignableRole.scopeId]\\\"-->\\n<!--                                   [(ngModel)]=\\\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\\\"-->\\n<!--                                   (change)=\\\"updateRole($event, assignableRole.scopeId)\\\">-->\\n<!--                            {{assignableRole.roles[roleIndex].name}}-->\\n<!--                        </span>-->\\n<!--                        <i *ngIf=\\\"!assignableRole.roles[roleIndex]\\\" class=\\\"mr2\\\">-->\\n<!--                            Upgrade-->\\n<!--                        </i>-->\\n<!--                    </ng-template>-->\\n<!--                </ng-template>-->\\n<!--            </div>-->\\n\\n<!--            <p class=\\\"mb0 mt050 text-red\\\"-->\\n<!--               *ngIf=\\\"errors[assignableRole.scopeId]\\\">{{errors[assignableRole.scopeId]}}</p>-->\\n<!--        </td>-->\\n\\n<!--    </tr>-->\\n<!--    </tbody>-->\\n<!--</table>-->\\n\\n<div class=\\\"flex align-center items-center justify-between p1 p-4 apply-bar\\\" *ngIf=\\\"!hideApply\\\">\\n    <div></div>\\n    <button mat-flat-button color=\\\"primary\\\" class=\\\"but butsm\\\" (click)=\\\"updateUserScope()\\\">Apply Changes</button>\\n</div>\\n\", styles: [\"table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}table.edit-roles{background-color:#fff}table.edit-roles tbody tr td{padding-left:1rem}table.edit-roles tbody tr.thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd;font-weight:600}table.edit-roles tbody tr:not(.thead):hover{background-color:#f5f5f5;cursor:pointer}table.edit-roles tbody .role-checkbox{height:auto;margin:0 .25rem 0 0}.apply-bar{position:fixed;bottom:0;right:0;left:0;background-color:#fff;border-top:2px solid #dddddd}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { scope: [{\n                type: Input\n            }], scopeKey: [{\n                type: Input\n            }], user: [{\n                type: Input\n            }], updatedScopes: [{\n                type: Input\n            }], hideApply: [{\n                type: Input\n            }], userService: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], saved: [{\n                type: Output\n            }], updatedScopesChange: [{\n                type: Output\n            }] } });\n\nconst _$4 = lodash.default;\nclass UserRolesComponent {\n    constructor(userService, route, roleService, authService) {\n        this.userService = userService;\n        this.route = route;\n        this.roleService = roleService;\n        this.authService = authService;\n        this.user = {};\n        this.Object = Object;\n        this.editDetails = false;\n        this.scopeRoles = { ACCOUNT: {} };\n        this.scopeEdit = null;\n        this._ = _$4;\n        this.accountOwner = false;\n    }\n    ngOnInit() {\n        this.route.params.subscribe(params => {\n            this.loadUser();\n            this.userId = params.userId;\n        });\n        this.loadUser();\n    }\n    roleUpdated(value) {\n        this.accountOwner = _$4.values(value)[0].roleIds[0] === null;\n    }\n    saveUserDetails() {\n        const updates = [];\n        _$4.values(this.scopeRoles).forEach(scope => {\n            _$4.forEach(scope, update => {\n                updates.push(update);\n            });\n        });\n        if (updates.length) {\n            this.userService.updateUserScope(updates, this.user.id);\n        }\n    }\n    loadRoles(userId) {\n        this.userService.getUser(userId).then(user => {\n            this.user = user;\n        });\n        this.roleService.getScopeAccesses().then(scopeAccesses => {\n            delete scopeAccesses.ACCOUNT;\n            this.scopeAccesses = _$4.values(scopeAccesses);\n            _$4.forEach(scopeAccesses, scopeAccess => {\n                this.scopeRoles[scopeAccess.scope] = {};\n            });\n        });\n        this.userService.getAllUserAccountRoles(userId).then(roles => {\n            const role = _$4.values(roles.Account).length ? _$4.values(roles.Account)[0] : null;\n            if (role) {\n                this.accountOwner = role.roles[0] === null;\n            }\n        });\n    }\n    loadUser() {\n        this.authService.getLoggedInUser().then(user => {\n            this.loggedInUser = user;\n            this.loadRoles(this.userId);\n        });\n    }\n}\nUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserRolesComponent, deps: [{ token: UserService }, { token: i2$1.ActivatedRoute }, { token: RoleService }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: UserRolesComponent, selector: \"ka-user-roles\", ngImport: i0, template: \"<div class=\\\"user-roles\\\">\\n\\n    <div class=\\\"text-base font-medium\\\">{{user.name}}</div>\\n    <div class=\\\"text-sm text-gray-400 mb-4 border-b pb-4 border-gray-200\\\">{{user.emailAddress}}</div>\\n\\n    <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">Permissions</div>\\n\\n    <div class=\\\"mb2\\\">\\n        <ka-edit-roles *ngIf=\\\"user.id\\\" [scopeKey]=\\\"'Account'\\\" [scope]=\\\"'ACCOUNT'\\\" [user]=\\\"user\\\" [(updatedScopes)]=\\\"scopeRoles.ACCOUNT\\\"\\n                       [hideApply]=\\\"true\\\" (updatedScopesChange)=\\\"roleUpdated($event)\\\" [userService]=\\\"userService\\\"></ka-edit-roles>\\n        <p style=\\\"color: red\\\" *ngIf=\\\"accountError\\\">{{accountError}}</p>\\n    </div>\\n\\n    <mat-tab-group animationDuration=\\\"0\\\" *ngIf=\\\"!accountOwner\\\">\\n        <mat-tab *ngFor=\\\"let scopeAccess of scopeAccesses\\\" [label]=\\\"scopeAccess.scopeDescription\\\">\\n            <ka-edit-roles class=\\\"block mt-4\\\" *ngIf=\\\"user.id\\\" [userService]=\\\"userService\\\"\\n                [scopeKey]=\\\"scopeAccess.scopeDescription\\\" [scope]=\\\"scopeAccess.scope\\\" [user]=\\\"user\\\"\\n                           [(updatedScopes)]=\\\"scopeRoles[scopeAccess.scope]\\\" [hideApply]=\\\"true\\\"></ka-edit-roles>\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"flex items-center justify-between\\\">\\n        <div></div>\\n        <button mat-flat-button color=\\\"primary\\\" (click)=\\\"saveUserDetails()\\\">Save Changes</button>\\n    </div>\\n</div>\\n\", styles: [\"table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.user-roles .roles-container{background-color:#fff;padding:1rem}.user-roles table{background-color:#fff}.user-roles tbody tr.thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd;font-weight:600;padding-top:2rem}.user-roles tbody tr:not(.thead):hover{background-color:#f5f5f5;cursor:pointer}.user-roles tbody:first-of-type tr.thead th{padding-top:1rem}.user-roles .actionpanel.edit{margin-bottom:0}.user-roles .changes-panel{margin:0 1rem 2rem;background-color:#fff;padding:1rem 2rem;border-top:1px solid whitesmoke}.user-roles .changes-panel p{margin:0}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i7$1.MatTabGroup, selector: \"mat-tab-group\", inputs: [\"color\", \"disableRipple\"], exportAs: [\"matTabGroup\"] }, { kind: \"component\", type: i7$1.MatTab, selector: \"mat-tab\", inputs: [\"disabled\", \"label\", \"aria-label\", \"aria-labelledby\", \"labelClass\", \"bodyClass\"], exportAs: [\"matTab\"] }, { kind: \"component\", type: EditRolesComponent, selector: \"ka-edit-roles\", inputs: [\"scope\", \"scopeKey\", \"user\", \"updatedScopes\", \"hideApply\", \"userService\"], outputs: [\"closed\", \"saved\", \"updatedScopesChange\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserRolesComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-user-roles', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"user-roles\\\">\\n\\n    <div class=\\\"text-base font-medium\\\">{{user.name}}</div>\\n    <div class=\\\"text-sm text-gray-400 mb-4 border-b pb-4 border-gray-200\\\">{{user.emailAddress}}</div>\\n\\n    <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">Permissions</div>\\n\\n    <div class=\\\"mb2\\\">\\n        <ka-edit-roles *ngIf=\\\"user.id\\\" [scopeKey]=\\\"'Account'\\\" [scope]=\\\"'ACCOUNT'\\\" [user]=\\\"user\\\" [(updatedScopes)]=\\\"scopeRoles.ACCOUNT\\\"\\n                       [hideApply]=\\\"true\\\" (updatedScopesChange)=\\\"roleUpdated($event)\\\" [userService]=\\\"userService\\\"></ka-edit-roles>\\n        <p style=\\\"color: red\\\" *ngIf=\\\"accountError\\\">{{accountError}}</p>\\n    </div>\\n\\n    <mat-tab-group animationDuration=\\\"0\\\" *ngIf=\\\"!accountOwner\\\">\\n        <mat-tab *ngFor=\\\"let scopeAccess of scopeAccesses\\\" [label]=\\\"scopeAccess.scopeDescription\\\">\\n            <ka-edit-roles class=\\\"block mt-4\\\" *ngIf=\\\"user.id\\\" [userService]=\\\"userService\\\"\\n                [scopeKey]=\\\"scopeAccess.scopeDescription\\\" [scope]=\\\"scopeAccess.scope\\\" [user]=\\\"user\\\"\\n                           [(updatedScopes)]=\\\"scopeRoles[scopeAccess.scope]\\\" [hideApply]=\\\"true\\\"></ka-edit-roles>\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"flex items-center justify-between\\\">\\n        <div></div>\\n        <button mat-flat-button color=\\\"primary\\\" (click)=\\\"saveUserDetails()\\\">Save Changes</button>\\n    </div>\\n</div>\\n\", styles: [\"table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.user-roles .roles-container{background-color:#fff;padding:1rem}.user-roles table{background-color:#fff}.user-roles tbody tr.thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd;font-weight:600;padding-top:2rem}.user-roles tbody tr:not(.thead):hover{background-color:#f5f5f5;cursor:pointer}.user-roles tbody:first-of-type tr.thead th{padding-top:1rem}.user-roles .actionpanel.edit{margin-bottom:0}.user-roles .changes-panel{margin:0 1rem 2rem;background-color:#fff;padding:1rem 2rem;border-top:1px solid whitesmoke}.user-roles .changes-panel p{margin:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: UserService }, { type: i2$1.ActivatedRoute }, { type: RoleService }, { type: AuthenticationService }]; } });\n\nconst _$3 = lodash.default;\nclass InviteUserComponent {\n    constructor(roleService, accountService, location, userService) {\n        this.roleService = roleService;\n        this.accountService = accountService;\n        this.location = location;\n        this.userService = userService;\n        this.scopeRoles = { ACCOUNT: {} };\n        this.inviteComplete = false;\n    }\n    ngOnInit() {\n        this.roleService.getScopeAccesses().then(scopeAccesses => {\n            delete scopeAccesses['ACCOUNT'];\n            this.scopeAccesses = _$3.values(scopeAccesses);\n            _$3.forEach(scopeAccesses, scopeAccess => {\n                this.scopeRoles[scopeAccess.scope] = {};\n            });\n        });\n    }\n    save() {\n        this.accountError = '';\n        const accounts = _$3.filter(this.scopeRoles['ACCOUNT'], update => {\n            return update.scope === 'ACCOUNT' && update.roleIds.length === 0;\n        });\n        if (!_$3.values(this.scopeRoles['ACCOUNT']).length || accounts.length > 0) {\n            this.accountError = 'Please select at least one Account role for this user.';\n            return false;\n        }\n        const scopeRoles = [];\n        _$3.forEach(this.scopeRoles, (allRoles, scope) => {\n            _$3.forEach(allRoles, role => {\n                scopeRoles.push(role);\n            });\n        });\n        this.accountService.inviteUserToAccount(this.emailAddress, scopeRoles).then(() => {\n            this.inviteComplete = true;\n        });\n    }\n    back() {\n        this.location.back();\n    }\n}\nInviteUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InviteUserComponent, deps: [{ token: RoleService }, { token: AccountService }, { token: i3.Location }, { token: UserService }], target: i0.ɵɵFactoryTarget.Component });\nInviteUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: InviteUserComponent, selector: \"ka-invite-user\", ngImport: i0, template: \"<ng-template [ngIf]=\\\"inviteComplete\\\">\\n\\n    <div class=\\\"flex align-center justify-center p3 p-8 invite-sent\\\">\\n\\n        <h3 class=\\\"mb3 mb-8\\\"><mat-icon color=\\\"primary\\\">check</mat-icon> Invitation Sent</h3>\\n\\n        <p class=\\\"mb3 mb-8\\\">A confirmation email has been sent to <b>{{emailAddress}}</b>, the user will need to click on the confirmation\\n            link in order to activate their account.</p>\\n\\n        <button mat-flat-button class=\\\"but\\\" (click)=\\\"back()\\\">Return to list</button>\\n    </div>\\n\\n</ng-template>\\n\\n<ng-template [ngIf]=\\\"!inviteComplete\\\">\\n\\n    <div class=\\\"mb2 mb-8\\\">\\n        <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">User email address</div>\\n        <input type=\\\"text\\\" placeholder=\\\"Email address\\\" class=\\\"flex1 mr050 mt0 full\\\"\\n               [(ngModel)]=\\\"emailAddress\\\">\\n    </div>\\n\\n    <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">Permissions</div>\\n\\n    <div class=\\\"mb2 mb-4\\\">\\n        <ka-edit-roles [scopeKey]=\\\"'Account'\\\" [scope]=\\\"'ACCOUNT'\\\" [userService]=\\\"userService\\\"\\n                       [updatedScopes]=\\\"scopeRoles['ACCOUNT']\\\" [hideApply]=\\\"true\\\"></ka-edit-roles>\\n        <p style=\\\"color: red\\\" *ngIf=\\\"accountError\\\">{{accountError}}</p>\\n    </div>\\n\\n    <mat-tab-group animationDuration=\\\"0\\\">\\n        <mat-tab *ngFor=\\\"let scopeAccess of scopeAccesses\\\" [label]=\\\"scopeAccess.scopeDescription\\\">\\n            <ka-edit-roles class=\\\"block mt-4\\\" [scopeKey]=\\\"scopeAccess.scopeDescription\\\" [scope]=\\\"scopeAccess.scope\\\"\\n                           [updatedScopes]=\\\"scopeRoles[scopeAccess.scope]\\\" [hideApply]=\\\"true\\\" [userService]=\\\"userService\\\"></ka-edit-roles>\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"flex align-center justify-between mt2 mt-6\\\">\\n        <div></div>\\n        <button mat-flat-button color=\\\"primary\\\" class=\\\"but butsm\\\" (click)=\\\"save()\\\" [disabled]=\\\"!emailAddress\\\">Invite User</button>\\n    </div>\\n</ng-template>\\n\", styles: [\".invite-sent{background-color:#fff;flex-direction:column;text-align:center}.invite-sent h3{display:flex;align-content:center}.invite-sent h3 mat-icon{font-size:35px;height:35px;width:35px;margin-right:.5rem}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i7$1.MatTabGroup, selector: \"mat-tab-group\", inputs: [\"color\", \"disableRipple\"], exportAs: [\"matTabGroup\"] }, { kind: \"component\", type: i7$1.MatTab, selector: \"mat-tab\", inputs: [\"disabled\", \"label\", \"aria-label\", \"aria-labelledby\", \"labelClass\", \"bodyClass\"], exportAs: [\"matTab\"] }, { kind: \"component\", type: EditRolesComponent, selector: \"ka-edit-roles\", inputs: [\"scope\", \"scopeKey\", \"user\", \"updatedScopes\", \"hideApply\", \"userService\"], outputs: [\"closed\", \"saved\", \"updatedScopesChange\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InviteUserComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-invite-user', encapsulation: ViewEncapsulation.None, template: \"<ng-template [ngIf]=\\\"inviteComplete\\\">\\n\\n    <div class=\\\"flex align-center justify-center p3 p-8 invite-sent\\\">\\n\\n        <h3 class=\\\"mb3 mb-8\\\"><mat-icon color=\\\"primary\\\">check</mat-icon> Invitation Sent</h3>\\n\\n        <p class=\\\"mb3 mb-8\\\">A confirmation email has been sent to <b>{{emailAddress}}</b>, the user will need to click on the confirmation\\n            link in order to activate their account.</p>\\n\\n        <button mat-flat-button class=\\\"but\\\" (click)=\\\"back()\\\">Return to list</button>\\n    </div>\\n\\n</ng-template>\\n\\n<ng-template [ngIf]=\\\"!inviteComplete\\\">\\n\\n    <div class=\\\"mb2 mb-8\\\">\\n        <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">User email address</div>\\n        <input type=\\\"text\\\" placeholder=\\\"Email address\\\" class=\\\"flex1 mr050 mt0 full\\\"\\n               [(ngModel)]=\\\"emailAddress\\\">\\n    </div>\\n\\n    <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">Permissions</div>\\n\\n    <div class=\\\"mb2 mb-4\\\">\\n        <ka-edit-roles [scopeKey]=\\\"'Account'\\\" [scope]=\\\"'ACCOUNT'\\\" [userService]=\\\"userService\\\"\\n                       [updatedScopes]=\\\"scopeRoles['ACCOUNT']\\\" [hideApply]=\\\"true\\\"></ka-edit-roles>\\n        <p style=\\\"color: red\\\" *ngIf=\\\"accountError\\\">{{accountError}}</p>\\n    </div>\\n\\n    <mat-tab-group animationDuration=\\\"0\\\">\\n        <mat-tab *ngFor=\\\"let scopeAccess of scopeAccesses\\\" [label]=\\\"scopeAccess.scopeDescription\\\">\\n            <ka-edit-roles class=\\\"block mt-4\\\" [scopeKey]=\\\"scopeAccess.scopeDescription\\\" [scope]=\\\"scopeAccess.scope\\\"\\n                           [updatedScopes]=\\\"scopeRoles[scopeAccess.scope]\\\" [hideApply]=\\\"true\\\" [userService]=\\\"userService\\\"></ka-edit-roles>\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"flex align-center justify-between mt2 mt-6\\\">\\n        <div></div>\\n        <button mat-flat-button color=\\\"primary\\\" class=\\\"but butsm\\\" (click)=\\\"save()\\\" [disabled]=\\\"!emailAddress\\\">Invite User</button>\\n    </div>\\n</ng-template>\\n\", styles: [\".invite-sent{background-color:#fff;flex-direction:column;text-align:center}.invite-sent h3{display:flex;align-content:center}.invite-sent h3 mat-icon{font-size:35px;height:35px;width:35px;margin-right:.5rem}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: RoleService }, { type: AccountService }, { type: i3.Location }, { type: UserService }]; } });\n\nclass EditDetailsComponent extends BaseComponent {\n    constructor(kcAuthService) {\n        super(kcAuthService);\n        this.saved = new EventEmitter();\n        this.newEmailAddress = '';\n        this.newName = '';\n        this.currentPassword = '';\n        this.emailAvailable = true;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        if (!this.user) {\n            return this.authService.getLoggedInUser().then(user => {\n                this.user = user;\n                this.newName = user.name;\n                this.newEmailAddress = user.emailAddress;\n            });\n        }\n        this.newName = this.user.name;\n        this.newEmailAddress = this.user.emailAddress;\n    }\n    ngOnDestroy() {\n    }\n    checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n    saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserDetails(this.newEmailAddress, this.newName, this.currentPassword, this.user.id)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            this.saveError = 'There was a problem updating your details, please check and try again.';\n        });\n    }\n}\nEditDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditDetailsComponent, deps: [{ token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nEditDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditDetailsComponent, selector: \"ka-edit-details\", inputs: { user: \"user\" }, outputs: { saved: \"saved\" }, usesInheritance: true, ngImport: i0, template: \"<p class=\\\"mb2\\\">\\n    Update your basic account details here. You will be required to confirm you identity by entering your password\\n    prior to saving the new details.\\n</p>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Change the name for this account.</label>\\n    <input type=\\\"email\\\" placeholder=\\\"New name\\\" [(ngModel)]=\\\"newName\\\">\\n</div>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Change email address for this account.</label>\\n    <input type=\\\"email\\\" placeholder=\\\"New email address\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n           (change)=\\\"checkEmail()\\\" email #email=\\\"ngModel\\\" maxlength=\\\"200\\\">\\n    <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n    <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n</div>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Enter current password to confirm changes.</label>\\n    <input type=\\\"password\\\" placeholder=\\\"Enter password\\\" [(ngModel)]=\\\"currentPassword\\\" maxlength=\\\"100\\\">\\n</div>\\n\\n<div class=\\\"flex align-center justify-between\\\">\\n    <div></div>\\n    <button type=\\\"button\\\" class=\\\"but butsm\\\"\\n            [disabled]=\\\"!emailAvailable || !newEmailAddress || !newName || !currentPassword || email.invalid\\\"\\n            (click)=\\\"saveEmailAddress()\\\">\\n        Update details\\n    </button>\\n</div>\\n\\n\\n<p *ngIf=\\\"saveError\\\" class=\\\"mt2 flex align-center error\\\">\\n    {{saveError}}\\n</p>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { kind: \"directive\", type: i2.EmailValidator, selector: \"[email][formControlName],[email][formControl],[email][ngModel]\", inputs: [\"email\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditDetailsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-details', encapsulation: ViewEncapsulation.None, template: \"<p class=\\\"mb2\\\">\\n    Update your basic account details here. You will be required to confirm you identity by entering your password\\n    prior to saving the new details.\\n</p>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Change the name for this account.</label>\\n    <input type=\\\"email\\\" placeholder=\\\"New name\\\" [(ngModel)]=\\\"newName\\\">\\n</div>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Change email address for this account.</label>\\n    <input type=\\\"email\\\" placeholder=\\\"New email address\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n           (change)=\\\"checkEmail()\\\" email #email=\\\"ngModel\\\" maxlength=\\\"200\\\">\\n    <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n    <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n</div>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Enter current password to confirm changes.</label>\\n    <input type=\\\"password\\\" placeholder=\\\"Enter password\\\" [(ngModel)]=\\\"currentPassword\\\" maxlength=\\\"100\\\">\\n</div>\\n\\n<div class=\\\"flex align-center justify-between\\\">\\n    <div></div>\\n    <button type=\\\"button\\\" class=\\\"but butsm\\\"\\n            [disabled]=\\\"!emailAvailable || !newEmailAddress || !newName || !currentPassword || email.invalid\\\"\\n            (click)=\\\"saveEmailAddress()\\\">\\n        Update details\\n    </button>\\n</div>\\n\\n\\n<p *ngIf=\\\"saveError\\\" class=\\\"mt2 flex align-center error\\\">\\n    {{saveError}}\\n</p>\\n\" }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }]; }, propDecorators: { user: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass NotificationService {\n    constructor(kbRequest, config) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n        this.notificationCount = new BehaviorSubject(0);\n    }\n    getNotification(id) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/item', {\n            params: { id }\n        }).toPromise();\n    }\n    getUserNotifications(projectKey = '', limit = '10', offset = '0') {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/', {\n            params: { projectKey, limit, offset }\n        }).toPromise();\n    }\n    getUnreadNotificationCount() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/unreadCount')\n            .toPromise().then(count => {\n            this.notificationCount.next(count);\n            return count;\n        });\n    }\n    markNotificationsRead(notificationIds) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/notification/markRead', notificationIds)\n            .toPromise().then(() => {\n            this.getUnreadNotificationCount();\n        });\n    }\n    markNotificationsUnread(notificationIds) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/notification/markUnread', notificationIds)\n            .toPromise().then(() => {\n            this.getUnreadNotificationCount();\n        });\n    }\n}\nNotificationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }], target: i0.ɵɵFactoryTarget.Injectable });\nNotificationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }]; } });\n\nconst _$2 = lodash.default;\nclass NotificationsComponent {\n    constructor(notificationService) {\n        this.notificationService = notificationService;\n        this.notifications = [];\n        this.selectAll = false;\n        this.someSelected = false;\n    }\n    ngOnInit() {\n        this.notificationService.getUserNotifications()\n            .then(notifications => this.notifications = notifications);\n    }\n    selectAllChange(value) {\n        this.notifications.forEach(notification => {\n            notification._checked = value;\n        });\n        this.someSelected = _$2.some(this.notifications, '_checked');\n    }\n    checkboxChange(value) {\n        this.selectAll = _$2.every(this.notifications, '_checked');\n        this.someSelected = _$2.some(this.notifications, '_checked');\n    }\n    markSelectedRead() {\n        const selected = _$2.filter(this.notifications, '_checked');\n        this.notificationService.markNotificationsRead(_$2.map(selected, 'id')).then(() => {\n            _$2.forEach(selected, notification => {\n                notification.read = true;\n            });\n        });\n    }\n    markSelectedUnread() {\n        const selected = _$2.filter(this.notifications, '_checked');\n        this.notificationService.markNotificationsUnread(_$2.map(selected, 'id')).then(() => {\n            _$2.forEach(selected, notification => {\n                notification.read = false;\n            });\n        });\n    }\n}\nNotificationsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationsComponent, deps: [{ token: NotificationService }], target: i0.ɵɵFactoryTarget.Component });\nNotificationsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: NotificationsComponent, selector: \"ka-notifications\", ngImport: i0, template: \"<div class=\\\"flex align-center justify-between\\\">\\n    <div></div>\\n    <button mat-flat-button [matMenuTriggerFor]=\\\"actionMenu\\\" color=\\\"primary\\\" [disabled]=\\\"!someSelected\\\">Actions</button>\\n    <mat-menu #actionMenu=\\\"matMenu\\\">\\n        <button mat-menu-item (click)=\\\"markSelectedRead()\\\">Mark Selected as Read</button>\\n        <button mat-menu-item (click)=\\\"markSelectedUnread()\\\">Mark Selected as Unread</button>\\n    </mat-menu>\\n</div>\\n\\n<table mat-table [dataSource]=\\\"notifications\\\">\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"check\\\">\\n        <th mat-header-cell *matHeaderCellDef> <mat-checkbox class=\\\"pl-2\\\" [(ngModel)]=\\\"selectAll\\\" (ngModelChange)=\\\"selectAllChange($event)\\\"></mat-checkbox> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50 border-l-4 border-blue-200': !element.read}\\\">\\n            <mat-checkbox class=\\\"pl-2\\\" [(ngModel)]=\\\"element._checked\\\" (ngModelChange)=\\\"checkboxChange($event)\\\"></mat-checkbox>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"title\\\">\\n        <th mat-header-cell *matHeaderCellDef> Title </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"truncate w-1/4 max-w-xs\\\"\\n            [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\"> {{element.title}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"content\\\">\\n        <th mat-header-cell *matHeaderCellDef> Content </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"truncate w-1/4 max-w-xs\\\"\\n            [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            <span class=\\\"capitalize\\\">{{element.content}}</span>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"date\\\">\\n        <th mat-header-cell *matHeaderCellDef> Date </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            {{element.formattedDate}}\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"level\\\">\\n        <th mat-header-cell *matHeaderCellDef>  </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-right\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            <mat-chip-list class=\\\"flex justify-end\\\">\\n                <mat-chip *ngIf=\\\"element.level.key === 'critical'\\\" color=\\\"warn\\\" class=\\\"capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n                <mat-chip *ngIf=\\\"element.level.key === 'warning'\\\" class=\\\"bg-yellow-500 capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n                <mat-chip *ngIf=\\\"element.level.key === 'info'\\\" color=\\\"primary\\\" class=\\\"capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n            </mat-chip-list>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"action\\\">\\n        <th mat-header-cell *matHeaderCellDef>  </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\" class=\\\"text-right\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n\\n        </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"['check', 'title', 'content', 'date', 'level', 'action']\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['check', 'title', 'content', 'date', 'level', 'action'];\\\"></tr>\\n</table>\\n\", styles: [\"table tr.mat-row:hover{background-color:#f5f5f5;cursor:pointer}table td,table th{padding:.5rem}table td:first-of-type,table th:first-of-type{padding-left:0}\\n\"], dependencies: [{ kind: \"directive\", type: i2$1.RouterLink, selector: \":not(a):not(area)[routerLink]\", inputs: [\"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i9.MatMenu, selector: \"mat-menu\", exportAs: [\"matMenu\"] }, { kind: \"component\", type: i9.MatMenuItem, selector: \"[mat-menu-item]\", inputs: [\"disabled\", \"disableRipple\", \"role\"], exportAs: [\"matMenuItem\"] }, { kind: \"directive\", type: i9.MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", exportAs: [\"matMenuTrigger\"] }, { kind: \"component\", type: i7$2.MatTable, selector: \"mat-table, table[mat-table]\", exportAs: [\"matTable\"] }, { kind: \"directive\", type: i7$2.MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: i7$2.MatHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: [\"matHeaderRowDef\", \"matHeaderRowDefSticky\"] }, { kind: \"directive\", type: i7$2.MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { kind: \"directive\", type: i7$2.MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: i7$2.MatRowDef, selector: \"[matRowDef]\", inputs: [\"matRowDefColumns\", \"matRowDefWhen\"] }, { kind: \"directive\", type: i7$2.MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: i7$2.MatCell, selector: \"mat-cell, td[mat-cell]\" }, { kind: \"component\", type: i7$2.MatHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", exportAs: [\"matHeaderRow\"] }, { kind: \"component\", type: i7$2.MatRow, selector: \"mat-row, tr[mat-row]\", exportAs: [\"matRow\"] }, { kind: \"component\", type: i8.MatChipList, selector: \"mat-chip-list\", inputs: [\"role\", \"aria-describedby\", \"errorStateMatcher\", \"multiple\", \"compareWith\", \"value\", \"required\", \"placeholder\", \"disabled\", \"aria-orientation\", \"selectable\", \"tabIndex\"], outputs: [\"change\", \"valueChange\"], exportAs: [\"matChipList\"] }, { kind: \"directive\", type: i8.MatChip, selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", inputs: [\"color\", \"disableRipple\", \"tabIndex\", \"role\", \"selected\", \"value\", \"selectable\", \"disabled\", \"removable\"], outputs: [\"selectionChange\", \"destroyed\", \"removed\"], exportAs: [\"matChip\"] }, { kind: \"component\", type: i9$1.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\"], exportAs: [\"matCheckbox\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-notifications', template: \"<div class=\\\"flex align-center justify-between\\\">\\n    <div></div>\\n    <button mat-flat-button [matMenuTriggerFor]=\\\"actionMenu\\\" color=\\\"primary\\\" [disabled]=\\\"!someSelected\\\">Actions</button>\\n    <mat-menu #actionMenu=\\\"matMenu\\\">\\n        <button mat-menu-item (click)=\\\"markSelectedRead()\\\">Mark Selected as Read</button>\\n        <button mat-menu-item (click)=\\\"markSelectedUnread()\\\">Mark Selected as Unread</button>\\n    </mat-menu>\\n</div>\\n\\n<table mat-table [dataSource]=\\\"notifications\\\">\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"check\\\">\\n        <th mat-header-cell *matHeaderCellDef> <mat-checkbox class=\\\"pl-2\\\" [(ngModel)]=\\\"selectAll\\\" (ngModelChange)=\\\"selectAllChange($event)\\\"></mat-checkbox> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50 border-l-4 border-blue-200': !element.read}\\\">\\n            <mat-checkbox class=\\\"pl-2\\\" [(ngModel)]=\\\"element._checked\\\" (ngModelChange)=\\\"checkboxChange($event)\\\"></mat-checkbox>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"title\\\">\\n        <th mat-header-cell *matHeaderCellDef> Title </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"truncate w-1/4 max-w-xs\\\"\\n            [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\"> {{element.title}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"content\\\">\\n        <th mat-header-cell *matHeaderCellDef> Content </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"truncate w-1/4 max-w-xs\\\"\\n            [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            <span class=\\\"capitalize\\\">{{element.content}}</span>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"date\\\">\\n        <th mat-header-cell *matHeaderCellDef> Date </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            {{element.formattedDate}}\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"level\\\">\\n        <th mat-header-cell *matHeaderCellDef>  </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-right\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            <mat-chip-list class=\\\"flex justify-end\\\">\\n                <mat-chip *ngIf=\\\"element.level.key === 'critical'\\\" color=\\\"warn\\\" class=\\\"capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n                <mat-chip *ngIf=\\\"element.level.key === 'warning'\\\" class=\\\"bg-yellow-500 capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n                <mat-chip *ngIf=\\\"element.level.key === 'info'\\\" color=\\\"primary\\\" class=\\\"capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n            </mat-chip-list>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"action\\\">\\n        <th mat-header-cell *matHeaderCellDef>  </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\" class=\\\"text-right\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n\\n        </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"['check', 'title', 'content', 'date', 'level', 'action']\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['check', 'title', 'content', 'date', 'level', 'action'];\\\"></tr>\\n</table>\\n\", styles: [\"table tr.mat-row:hover{background-color:#f5f5f5;cursor:pointer}table td,table th{padding:.5rem}table td:first-of-type,table th:first-of-type{padding-left:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: NotificationService }]; } });\n\nclass NotificationComponent {\n    constructor(route, notificationService) {\n        this.route = route;\n        this.notificationService = notificationService;\n    }\n    ngOnInit() {\n        this.notificationId = this.route.snapshot.params.id;\n        this.notificationService.getNotification(this.notificationId).then(notification => {\n            if (notification && !notification.read) {\n                notification.read = true;\n                this.notificationService.markNotificationsRead([this.notificationId]);\n            }\n            this.notification = notification;\n        });\n    }\n    updateNotificationRead(event) {\n        const markFunction = event ? 'markNotificationsRead' : 'markNotificationsUnread';\n        this.notificationService[markFunction]([this.notificationId]);\n    }\n}\nNotificationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationComponent, deps: [{ token: i2$1.ActivatedRoute }, { token: NotificationService }], target: i0.ɵɵFactoryTarget.Component });\nNotificationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: NotificationComponent, selector: \"ka-notification\", ngImport: i0, template: \"<!-- This example requires Tailwind CSS v2.0+ -->\\n<div *ngIf=\\\"notification\\\" class=\\\"bg-white shadow overflow-hidden sm:rounded-lg\\\">\\n    <div class=\\\"px-4 py-5 sm:px-6\\\">\\n        <h3 class=\\\"text-lg leading-6 font-medium text-gray-900\\\">\\n            {{notification.title}}\\n        </h3>\\n        <p class=\\\"mt-1 max-w-2xl text-sm text-gray-500\\\">\\n            Notification\\n        </p>\\n    </div>\\n    <div class=\\\"border-t border-gray-200\\\">\\n        <dl>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Received at\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.formattedDate}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Content\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.content}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Level\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    <mat-chip-list>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'critical'\\\" color=\\\"warn\\\" class=\\\"capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'warning'\\\" class=\\\"bg-yellow-500 capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'info'\\\" color=\\\"primary\\\" class=\\\"capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                    </mat-chip-list>\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Category\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.category}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Read\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    <mat-checkbox [(ngModel)]=\\\"notification.read\\\" (ngModelChange)=\\\"updateNotificationRead($event)\\\"></mat-checkbox>\\n                </dd>\\n            </div>\\n        </dl>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i8.MatChipList, selector: \"mat-chip-list\", inputs: [\"role\", \"aria-describedby\", \"errorStateMatcher\", \"multiple\", \"compareWith\", \"value\", \"required\", \"placeholder\", \"disabled\", \"aria-orientation\", \"selectable\", \"tabIndex\"], outputs: [\"change\", \"valueChange\"], exportAs: [\"matChipList\"] }, { kind: \"directive\", type: i8.MatChip, selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", inputs: [\"color\", \"disableRipple\", \"tabIndex\", \"role\", \"selected\", \"value\", \"selectable\", \"disabled\", \"removable\"], outputs: [\"selectionChange\", \"destroyed\", \"removed\"], exportAs: [\"matChip\"] }, { kind: \"component\", type: i9$1.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\"], exportAs: [\"matCheckbox\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-notification', template: \"<!-- This example requires Tailwind CSS v2.0+ -->\\n<div *ngIf=\\\"notification\\\" class=\\\"bg-white shadow overflow-hidden sm:rounded-lg\\\">\\n    <div class=\\\"px-4 py-5 sm:px-6\\\">\\n        <h3 class=\\\"text-lg leading-6 font-medium text-gray-900\\\">\\n            {{notification.title}}\\n        </h3>\\n        <p class=\\\"mt-1 max-w-2xl text-sm text-gray-500\\\">\\n            Notification\\n        </p>\\n    </div>\\n    <div class=\\\"border-t border-gray-200\\\">\\n        <dl>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Received at\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.formattedDate}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Content\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.content}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Level\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    <mat-chip-list>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'critical'\\\" color=\\\"warn\\\" class=\\\"capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'warning'\\\" class=\\\"bg-yellow-500 capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'info'\\\" color=\\\"primary\\\" class=\\\"capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                    </mat-chip-list>\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Category\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.category}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Read\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    <mat-checkbox [(ngModel)]=\\\"notification.read\\\" (ngModelChange)=\\\"updateNotificationRead($event)\\\"></mat-checkbox>\\n                </dd>\\n            </div>\\n        </dl>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i2$1.ActivatedRoute }, { type: NotificationService }]; } });\n\nconst _$1 = lodash.default;\nclass AccountsComponent {\n    constructor(accountService, router) {\n        this.accountService = accountService;\n        this.router = router;\n        this.searchText = new BehaviorSubject('');\n        this.limit = new BehaviorSubject(100);\n        this.offset = new BehaviorSubject(0);\n        this.pageIndex = 0;\n        this.resultSize = 0;\n        this.reloadAccounts = new Subject$1();\n        this.allSelected = false;\n        this.selectionMade = false;\n        this.lodash = _$1;\n        this.passwordReset = false;\n        this.accountUnlocked = false;\n        this.accountSuspended = false;\n        this.newAccount = false;\n        this.newAccountEmail = '';\n        this.newAccountName = '';\n        this.newAccountPassword = null;\n        this.newAccountAdded = false;\n    }\n    ngOnInit() {\n        merge(this.searchText, this.limit, this.offset, this.reloadAccounts)\n            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(() => this.getAccounts()))\n            .subscribe((accounts) => {\n            this.accounts = accounts;\n        });\n    }\n    accountAction(account) {\n        if (this.accountClickThrough) {\n            this.router.navigate([this.accountClickThrough, account.accountId]);\n        }\n    }\n    saveNewAdminUser() {\n        if (this.newAccountPassword && this.newAccountPassword.length < 8) {\n            return true;\n        }\n        return this.accountService.createAccount(this.newAccountName, this.newAccountEmail, this.newAccountPassword || null, null)\n            .then(res => {\n            this.newAccountName = '';\n            this.newAccountEmail = '';\n            this.newAccountPassword = null;\n            this.newAccount = false;\n            this.newAccountAdded = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.newAccountAdded = false;\n            }, 3000);\n        });\n    }\n    viewAccount(user) {\n    }\n    toggleSelectAllUsers() {\n        this.allSelected = !this.allSelected;\n        this.selectionMade = this.allSelected;\n        this.accounts = this.lodash.map(this.accounts, user => {\n            user.selected = this.allSelected;\n            return user;\n        });\n    }\n    toggleUsersSelected(user) {\n        user.selected = !user.selected;\n        this.selectionMade = this.lodash.some(this.accounts, 'selected');\n    }\n    search(searchTerm) {\n        this.searchText.next(searchTerm);\n    }\n    updatePage(pageEvent) {\n        const limit = this.limit.getValue();\n        if (pageEvent.pageSize !== limit) {\n            this.offset.next(0);\n            this.limit.next(pageEvent.pageSize);\n            this.pageIndex = 0;\n        }\n        else {\n            this.offset.next(pageEvent.pageSize * (pageEvent.pageIndex));\n            this.pageIndex = pageEvent.pageIndex;\n        }\n    }\n    reactivate(account, note) {\n        this.accountService.reactivateAccount(account.accountId, note).then(() => {\n            this.accountUnlocked = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.accountUnlocked = false;\n            }, 3000);\n        });\n    }\n    suspend(account, note) {\n        this.accountService.suspendAccount(account.accountId, note).then(() => {\n            this.accountSuspended = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.accountSuspended = false;\n            }, 3000);\n        });\n    }\n    getAccounts() {\n        return this.accountService.searchForAccounts(this.searchText.getValue(), this.limit.getValue(), this.offset.getValue()).pipe(map((data) => {\n            this.resultSize = data.length;\n            return data;\n        }));\n    }\n}\nAccountsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountsComponent, deps: [{ token: AccountService }, { token: i2$1.Router }], target: i0.ɵɵFactoryTarget.Component });\nAccountsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: AccountsComponent, selector: \"ka-accounts\", inputs: { accountClickThrough: \"accountClickThrough\" }, ngImport: i0, template: \"<div class=\\\"p-6 bg-white border-b border-gray-200\\\">\\n    <div class=\\\"md:flex md:items-center md:justify-between md:space-x-5\\\">\\n        <div class=\\\"flex items-start flex-1\\\">\\n            <div class=\\\"pt-1.5\\\">\\n                <h1 class=\\\"text-2xl font-bold text-gray-900\\\">Accounts</h1>\\n                <p class=\\\"text-sm font-medium text-gray-500\\\">\\n                    A list of all the accounts in the system.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"mt-6 flex flex-col-reverse justify-stretch\\\">\\n            <button type=\\\"button\\\" (click)=\\\"newAccount = true;\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Create New Account\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"px-4 sm:px-6 lg:px-8 mt-0\\\">\\n    <div class=\\\"flex flex-col\\\">\\n        <div class=\\\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\\\">\\n            <div class=\\\"inline-block min-w-full py-2 align-middle\\\">\\n\\n                <div *ngIf=\\\"newAccountAdded\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n                         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">New account successfully added.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"newAccount\\\" class=\\\"px-6 pb-6 mt-4 flex flex-col border-b\\\">\\n                    <p><b>Add New Account</b></p>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"newAccountName\\\" placeholder=\\\"Enter name for the new account\\\">\\n\\n                    <input class=\\\"mt-2\\\" type=\\\"email\\\" [(ngModel)]=\\\"newAccountEmail\\\"\\n                           placeholder=\\\"Enter email address for account user\\\">\\n                    <input class=\\\"mt-2\\\" type=\\\"password\\\" [(ngModel)]=\\\"newAccountPassword\\\"\\n                           placeholder=\\\"Enter password for user\\\"\\n                           [ngClass]=\\\"{'border border-red-600': newAccountPassword && newAccountPassword.length < 8}\\\">\\n                    <div *ngIf=\\\"newAccountPassword && newAccountPassword.length < 8\\\">\\n                        <small class=\\\"text-red-600\\\">Password must be at least 8 characters long.</small>\\n                    </div>\\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\\n                        email.</small></div>\\n                    <div class=\\\"flex items-center justify-between my-4\\\">\\n                        <div></div>\\n                        <button (click)=\\\"saveNewAdminUser()\\\"\\n                                class=\\\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\\\">\\n                            Save New Account\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"passwordReset\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Password reset email sent. Please check your email for further instructions</div>\\n                </div>\\n\\n                <div *ngIf=\\\"accountUnlocked\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-primary h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This account has been successfully reactivated.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"accountSuspended\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This account has been suspended.</div>\\n                </div>\\n\\n                <div class=\\\"mt-3 sm:mt-0 flex-1\\\">\\n                    <label for=\\\"mobile-search-candidate\\\" class=\\\"sr-only\\\">Search</label>\\n                    <div class=\\\"flex\\\">\\n                        <div class=\\\"relative flex-grow focus-within:z-10\\\">\\n                            <div class=\\\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\\\">\\n                                <svg class=\\\"h-5 w-5 text-gray-400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                     viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                    <path fill-rule=\\\"evenodd\\\"\\n                                          d=\\\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\\\"\\n                                          clip-rule=\\\"evenodd\\\"/>\\n                                </svg>\\n                            </div>\\n                            <input type=\\\"text\\\" name=\\\"mobile-search-candidate\\\" id=\\\"mobile-search-candidate\\\"\\n                                   class=\\\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\\\"\\n                                   placeholder=\\\"Search users\\\"\\n                                   (keyup)=\\\"searchText.next($event.target.value)\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <table class=\\\"min-w-full border-separate bg-white\\\" style=\\\"border-spacing: 0\\\">\\n                    <ng-template [ngIf]=\\\"accounts && accounts.length\\\">\\n\\n                        <thead class=\\\"bg-gray-100\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Name\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Status\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\\\">\\n                                <span class=\\\"sr-only\\\">Edit</span>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody *ngFor=\\\"let account of accounts; let i = index\\\">\\n                        <tr class=\\\"hover:bg-gray-50 cursor-pointer\\\" (click)=\\\"accountAction(account)\\\">\\n                            <td (click)=\\\"viewAccount(account)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\\\">\\n                                {{account.name}}\\n                            </td>\\n                            <td (click)=\\\"viewAccount(account)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <span [ngClass]=\\\"{'bg-success': account.status === 'ACTIVE', 'bg-primary': account.status === 'PENDING', 'bg-danger': account.status === 'SUSPENDED'}\\\"\\n                                      class=\\\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\\\">\\n                                    {{account.status.toLowerCase()}}</span>\\n                            </td>\\n                            <td class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <div class=\\\"flex items-center justify-end\\\">\\n                                    <button mat-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">\\n                                        Actions\\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\\n                                    </button>\\n                                    <mat-menu #menu=\\\"matMenu\\\">\\n                                        <button mat-menu-item (click)=\\\"account.showNoteField = 'reactivate'\\\"\\n                                                *ngIf=\\\"account.status === 'LOCKED' || account.status === 'SUSPENDED'\\\">\\n                                            Reactivate\\n                                        </button>\\n                                        <button mat-menu-item (click)=\\\"account.showNoteField = 'suspend'\\\"\\n                                                *ngIf=\\\"account.status !== 'SUSPENDED'\\\">\\n                                            Suspend\\n                                        </button>\\n                                    </mat-menu>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"account.showNoteField\\\" class=\\\"hover:bg-white\\\">\\n                            <td [colSpan]=\\\"3\\\" class=\\\"pl-4\\\">\\n                                <div class=\\\"my-2\\\">\\n                                    <input type=\\\"text\\\" [ngClass]=\\\"{'border border-red-600': !account.note}\\\"\\n                                           class=\\\"w-full \\\" [(ngModel)]=\\\"account.note\\\"\\n                                           placeholder=\\\"Please enter accompanying note\\\">\\n                                </div>\\n                                <div class=\\\"flex items-center justify-between mt-4\\\">\\n                                    <button\\n                                        class=\\\"py-2 px-4 border border-gray-500 text-gray-500 font-semibold rounded-md hover:bg-gray-50 focus:outline-none\\\"\\n                                        (click)=\\\"account.showNoteField = ''\\\">\\n                                        Cancel\\n                                    </button>\\n                                    <button [disabled]=\\\"!account.note\\\"\\n                                            (click)=\\\"account.showNoteField === 'suspend' ? suspend(account, account.note) : reactivate(account, account.note)\\\"\\n                                            class=\\\"disabled:opacity-50 py-2 px-4 bg-primary text-white font-semibold rounded-md focus:outline-none\\\">\\n                                        Save note and {{account.showNoteField}}\\n                                    </button>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                        <tbody>\\n                        <tr>\\n                            <td colspan=\\\"4\\\"\\n                                class=\\\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\\\">\\n                                <div class=\\\"paging-toolbar flex align-center justify-end\\\">\\n                                    <mat-paginator class=\\\"user-paginator flex1 pl050 mb0\\\" [length]=\\\"resultSize\\\"\\n                                                   [pageSize]=\\\"limit.getValue()\\\"\\n                                                   [pageIndex]=\\\"pageIndex\\\"\\n                                                   [pageSizeOptions]=\\\"[5, 10, 25, 100, 500, 1000]\\\"\\n                                                   (page)=\\\"updatePage($event)\\\">\\n                                    </mat-paginator>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </ng-template>\\n                </table>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.list-items{background-color:#fff}.list-items .item-list{position:relative;border-bottom:1px solid #ddd;padding-left:1rem}.list-items .item-list:after{content:\\\"\\\\232a\\\";position:absolute;font-size:1.8rem;color:#ccc;right:0;top:25%}.list-items .item-list h3{margin:.3rem 0}.list-items .item-list p{margin:.3rem 0;color:#838383;font-size:.9rem}.list-items .item-list p:first-of-type{margin-bottom:0}.list-items .item-list p:last-of-type{margin-top:0}@media only screen and (max-width: 320px){.list-items .item-list h3{font-size:1.2rem}.list-items .item-list p{font-size:.85rem}}@media only screen and (max-width: 768px){.account-users .desktop-table-view{display:none}.account-users .mobile-list-view{display:block}}@media only screen and (min-width: 768px){.account-users .desktop-table-view{display:block;padding:1rem}.account-users .mobile-list-view{display:none}}.account-users .desktop-table-view,.account-users .mobile-list-view,.account-users table{background-color:#fff}.account-users tbody tr.PENDING td:not(.actions){opacity:.6}.account-users tbody tr:not(.PENDING):hover{background-color:#f5f5f5;cursor:pointer}.account-users tbody tr td.status span{padding:.25rem .4rem;text-transform:lowercase;font-size:.9rem;border-radius:2px}.account-users tbody tr td.status span.PENDING{background-color:gray;color:#fff}.account-users tbody tr td.status span.ACTIVE{background-color:#12a6d3;color:#fff}.account-users .invite-user{margin-bottom:0}.account-users .user-paginator{background:transparent}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i6.MatPaginator, selector: \"mat-paginator\", inputs: [\"disabled\"], exportAs: [\"matPaginator\"] }, { kind: \"component\", type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i9.MatMenu, selector: \"mat-menu\", exportAs: [\"matMenu\"] }, { kind: \"component\", type: i9.MatMenuItem, selector: \"[mat-menu-item]\", inputs: [\"disabled\", \"disableRipple\", \"role\"], exportAs: [\"matMenuItem\"] }, { kind: \"directive\", type: i9.MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", exportAs: [\"matMenuTrigger\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-accounts', template: \"<div class=\\\"p-6 bg-white border-b border-gray-200\\\">\\n    <div class=\\\"md:flex md:items-center md:justify-between md:space-x-5\\\">\\n        <div class=\\\"flex items-start flex-1\\\">\\n            <div class=\\\"pt-1.5\\\">\\n                <h1 class=\\\"text-2xl font-bold text-gray-900\\\">Accounts</h1>\\n                <p class=\\\"text-sm font-medium text-gray-500\\\">\\n                    A list of all the accounts in the system.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"mt-6 flex flex-col-reverse justify-stretch\\\">\\n            <button type=\\\"button\\\" (click)=\\\"newAccount = true;\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Create New Account\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"px-4 sm:px-6 lg:px-8 mt-0\\\">\\n    <div class=\\\"flex flex-col\\\">\\n        <div class=\\\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\\\">\\n            <div class=\\\"inline-block min-w-full py-2 align-middle\\\">\\n\\n                <div *ngIf=\\\"newAccountAdded\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n                         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">New account successfully added.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"newAccount\\\" class=\\\"px-6 pb-6 mt-4 flex flex-col border-b\\\">\\n                    <p><b>Add New Account</b></p>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"newAccountName\\\" placeholder=\\\"Enter name for the new account\\\">\\n\\n                    <input class=\\\"mt-2\\\" type=\\\"email\\\" [(ngModel)]=\\\"newAccountEmail\\\"\\n                           placeholder=\\\"Enter email address for account user\\\">\\n                    <input class=\\\"mt-2\\\" type=\\\"password\\\" [(ngModel)]=\\\"newAccountPassword\\\"\\n                           placeholder=\\\"Enter password for user\\\"\\n                           [ngClass]=\\\"{'border border-red-600': newAccountPassword && newAccountPassword.length < 8}\\\">\\n                    <div *ngIf=\\\"newAccountPassword && newAccountPassword.length < 8\\\">\\n                        <small class=\\\"text-red-600\\\">Password must be at least 8 characters long.</small>\\n                    </div>\\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\\n                        email.</small></div>\\n                    <div class=\\\"flex items-center justify-between my-4\\\">\\n                        <div></div>\\n                        <button (click)=\\\"saveNewAdminUser()\\\"\\n                                class=\\\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\\\">\\n                            Save New Account\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"passwordReset\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Password reset email sent. Please check your email for further instructions</div>\\n                </div>\\n\\n                <div *ngIf=\\\"accountUnlocked\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-primary h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This account has been successfully reactivated.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"accountSuspended\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This account has been suspended.</div>\\n                </div>\\n\\n                <div class=\\\"mt-3 sm:mt-0 flex-1\\\">\\n                    <label for=\\\"mobile-search-candidate\\\" class=\\\"sr-only\\\">Search</label>\\n                    <div class=\\\"flex\\\">\\n                        <div class=\\\"relative flex-grow focus-within:z-10\\\">\\n                            <div class=\\\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\\\">\\n                                <svg class=\\\"h-5 w-5 text-gray-400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                     viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                    <path fill-rule=\\\"evenodd\\\"\\n                                          d=\\\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\\\"\\n                                          clip-rule=\\\"evenodd\\\"/>\\n                                </svg>\\n                            </div>\\n                            <input type=\\\"text\\\" name=\\\"mobile-search-candidate\\\" id=\\\"mobile-search-candidate\\\"\\n                                   class=\\\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\\\"\\n                                   placeholder=\\\"Search users\\\"\\n                                   (keyup)=\\\"searchText.next($event.target.value)\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <table class=\\\"min-w-full border-separate bg-white\\\" style=\\\"border-spacing: 0\\\">\\n                    <ng-template [ngIf]=\\\"accounts && accounts.length\\\">\\n\\n                        <thead class=\\\"bg-gray-100\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Name\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Status\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\\\">\\n                                <span class=\\\"sr-only\\\">Edit</span>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody *ngFor=\\\"let account of accounts; let i = index\\\">\\n                        <tr class=\\\"hover:bg-gray-50 cursor-pointer\\\" (click)=\\\"accountAction(account)\\\">\\n                            <td (click)=\\\"viewAccount(account)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\\\">\\n                                {{account.name}}\\n                            </td>\\n                            <td (click)=\\\"viewAccount(account)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <span [ngClass]=\\\"{'bg-success': account.status === 'ACTIVE', 'bg-primary': account.status === 'PENDING', 'bg-danger': account.status === 'SUSPENDED'}\\\"\\n                                      class=\\\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\\\">\\n                                    {{account.status.toLowerCase()}}</span>\\n                            </td>\\n                            <td class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <div class=\\\"flex items-center justify-end\\\">\\n                                    <button mat-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">\\n                                        Actions\\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\\n                                    </button>\\n                                    <mat-menu #menu=\\\"matMenu\\\">\\n                                        <button mat-menu-item (click)=\\\"account.showNoteField = 'reactivate'\\\"\\n                                                *ngIf=\\\"account.status === 'LOCKED' || account.status === 'SUSPENDED'\\\">\\n                                            Reactivate\\n                                        </button>\\n                                        <button mat-menu-item (click)=\\\"account.showNoteField = 'suspend'\\\"\\n                                                *ngIf=\\\"account.status !== 'SUSPENDED'\\\">\\n                                            Suspend\\n                                        </button>\\n                                    </mat-menu>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"account.showNoteField\\\" class=\\\"hover:bg-white\\\">\\n                            <td [colSpan]=\\\"3\\\" class=\\\"pl-4\\\">\\n                                <div class=\\\"my-2\\\">\\n                                    <input type=\\\"text\\\" [ngClass]=\\\"{'border border-red-600': !account.note}\\\"\\n                                           class=\\\"w-full \\\" [(ngModel)]=\\\"account.note\\\"\\n                                           placeholder=\\\"Please enter accompanying note\\\">\\n                                </div>\\n                                <div class=\\\"flex items-center justify-between mt-4\\\">\\n                                    <button\\n                                        class=\\\"py-2 px-4 border border-gray-500 text-gray-500 font-semibold rounded-md hover:bg-gray-50 focus:outline-none\\\"\\n                                        (click)=\\\"account.showNoteField = ''\\\">\\n                                        Cancel\\n                                    </button>\\n                                    <button [disabled]=\\\"!account.note\\\"\\n                                            (click)=\\\"account.showNoteField === 'suspend' ? suspend(account, account.note) : reactivate(account, account.note)\\\"\\n                                            class=\\\"disabled:opacity-50 py-2 px-4 bg-primary text-white font-semibold rounded-md focus:outline-none\\\">\\n                                        Save note and {{account.showNoteField}}\\n                                    </button>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                        <tbody>\\n                        <tr>\\n                            <td colspan=\\\"4\\\"\\n                                class=\\\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\\\">\\n                                <div class=\\\"paging-toolbar flex align-center justify-end\\\">\\n                                    <mat-paginator class=\\\"user-paginator flex1 pl050 mb0\\\" [length]=\\\"resultSize\\\"\\n                                                   [pageSize]=\\\"limit.getValue()\\\"\\n                                                   [pageIndex]=\\\"pageIndex\\\"\\n                                                   [pageSizeOptions]=\\\"[5, 10, 25, 100, 500, 1000]\\\"\\n                                                   (page)=\\\"updatePage($event)\\\">\\n                                    </mat-paginator>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </ng-template>\\n                </table>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.list-items{background-color:#fff}.list-items .item-list{position:relative;border-bottom:1px solid #ddd;padding-left:1rem}.list-items .item-list:after{content:\\\"\\\\232a\\\";position:absolute;font-size:1.8rem;color:#ccc;right:0;top:25%}.list-items .item-list h3{margin:.3rem 0}.list-items .item-list p{margin:.3rem 0;color:#838383;font-size:.9rem}.list-items .item-list p:first-of-type{margin-bottom:0}.list-items .item-list p:last-of-type{margin-top:0}@media only screen and (max-width: 320px){.list-items .item-list h3{font-size:1.2rem}.list-items .item-list p{font-size:.85rem}}@media only screen and (max-width: 768px){.account-users .desktop-table-view{display:none}.account-users .mobile-list-view{display:block}}@media only screen and (min-width: 768px){.account-users .desktop-table-view{display:block;padding:1rem}.account-users .mobile-list-view{display:none}}.account-users .desktop-table-view,.account-users .mobile-list-view,.account-users table{background-color:#fff}.account-users tbody tr.PENDING td:not(.actions){opacity:.6}.account-users tbody tr:not(.PENDING):hover{background-color:#f5f5f5;cursor:pointer}.account-users tbody tr td.status span{padding:.25rem .4rem;text-transform:lowercase;font-size:.9rem;border-radius:2px}.account-users tbody tr td.status span.PENDING{background-color:gray;color:#fff}.account-users tbody tr td.status span.ACTIVE{background-color:#12a6d3;color:#fff}.account-users .invite-user{margin-bottom:0}.account-users .user-paginator{background:transparent}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: AccountService }, { type: i2$1.Router }]; }, propDecorators: { accountClickThrough: [{\n                type: Input\n            }] } });\n\nclass InvitationComponent extends BaseComponent {\n    constructor(kcAuthService, route) {\n        super(kcAuthService);\n        this.route = route;\n        this.details = {};\n        this.name = '';\n        this.password = '';\n        this.inviteAccepted = false;\n        this.invitationError = false;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.invitationCode = this.route.snapshot.queryParams.invitationCode;\n        this.authService.getInvitationDetails(this.invitationCode).then(details => {\n            this.details = details;\n        }).catch(err => {\n            this.invitationError = true;\n        });\n    }\n    acceptInvitation() {\n        this.authService.acceptInvitation(this.invitationCode, this.name, this.password, this.details.emailAddress).then(() => {\n            this.inviteAccepted = true;\n        });\n    }\n}\nInvitationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InvitationComponent, deps: [{ token: AuthenticationService }, { token: i2$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nInvitationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: InvitationComponent, selector: \"ka-invitation\", inputs: { authenticationService: \"authenticationService\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\\\">\\n\\n    <div class=\\\"actioninfo p2w p1m\\\">\\n        <ng-template [ngIf]=\\\"!inviteAccepted && !invitationError\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <b>Invitation Details</b>\\n            </h4>\\n\\n            <div class=\\\"mb1\\\">\\n                <p class=\\\"mb-4\\\">You have been invited to join the {{details.accountName}} account using email address\\n                    <b>{{details.emailAddress}}</b></p>\\n\\n                <ng-template [ngIf]=\\\"details.newUser\\\">\\n\\n                    <p class=\\\"mb-4\\\">Please enter your full name and create a new password in order to log into your account.</p>\\n\\n                    <p>\\n                        <label>Full Name</label>\\n                        <input class=\\\"w-full\\\" type=\\\"text\\\" [(ngModel)]=\\\"name\\\">\\n                    </p>\\n\\n                    <p>\\n                        <label>New Password</label>\\n                        <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\">\\n                    </p>\\n\\n                </ng-template>\\n\\n                <p class=\\\"mt-4\\\">To accept this invitation please click on the 'Accept Invitation' button.</p>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"inviteAccepted\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-green-500 h-24 w-24 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                </svg>\\n                <div class=\\\"text-lg\\\">Invitation Accepted. You have been added to the {{details.accountName}} account.</div>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"invitationError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-yellow-500 h-24 w-24 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\" />\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem with the invitation code supplied, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n    </div>\\n    <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n        <button *ngIf=\\\"!inviteAccepted && !invitationError\\\" class=\\\"button small-button white-button disabled:opacity-50\\\" (click)=\\\"acceptInvitation()\\\"\\n            [disabled]=\\\"details.newUser && (!name || !password)\\\">\\n            Accept Invitation\\n        </button>\\n    </div>\\n\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InvitationComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-invitation', template: \"<div class=\\\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\\\">\\n\\n    <div class=\\\"actioninfo p2w p1m\\\">\\n        <ng-template [ngIf]=\\\"!inviteAccepted && !invitationError\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <b>Invitation Details</b>\\n            </h4>\\n\\n            <div class=\\\"mb1\\\">\\n                <p class=\\\"mb-4\\\">You have been invited to join the {{details.accountName}} account using email address\\n                    <b>{{details.emailAddress}}</b></p>\\n\\n                <ng-template [ngIf]=\\\"details.newUser\\\">\\n\\n                    <p class=\\\"mb-4\\\">Please enter your full name and create a new password in order to log into your account.</p>\\n\\n                    <p>\\n                        <label>Full Name</label>\\n                        <input class=\\\"w-full\\\" type=\\\"text\\\" [(ngModel)]=\\\"name\\\">\\n                    </p>\\n\\n                    <p>\\n                        <label>New Password</label>\\n                        <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\">\\n                    </p>\\n\\n                </ng-template>\\n\\n                <p class=\\\"mt-4\\\">To accept this invitation please click on the 'Accept Invitation' button.</p>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"inviteAccepted\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-green-500 h-24 w-24 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                </svg>\\n                <div class=\\\"text-lg\\\">Invitation Accepted. You have been added to the {{details.accountName}} account.</div>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"invitationError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-yellow-500 h-24 w-24 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\" />\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem with the invitation code supplied, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n    </div>\\n    <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n        <button *ngIf=\\\"!inviteAccepted && !invitationError\\\" class=\\\"button small-button white-button disabled:opacity-50\\\" (click)=\\\"acceptInvitation()\\\"\\n            [disabled]=\\\"details.newUser && (!name || !password)\\\">\\n            Accept Invitation\\n        </button>\\n    </div>\\n\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }, { type: i2$1.ActivatedRoute }]; }, propDecorators: { authenticationService: [{\n                type: Input\n            }] } });\n\nclass PasswordResetComponent extends BaseComponent {\n    constructor(kcAuthService, route) {\n        super(kcAuthService);\n        this.route = route;\n        this.loginRoute = '/login';\n        this.codeError = false;\n        this.resetError = false;\n        this.resetComplete = false;\n    }\n    async ngOnInit() {\n        super.ngOnInit();\n        this.resetCode = this.route.snapshot.queryParams.code;\n        this.authService.getEmailForPasswordReset(this.resetCode).then(resetEmail => {\n            this.resetEmail = resetEmail;\n        }).catch(err => {\n            this.codeError = true;\n        });\n    }\n    recaptchaResolved(response) {\n        this.recaptchaResponse = response;\n    }\n    saveNewPassword() {\n        this.authService.resetPassword(this.resetEmail, this.confirmPassword, this.resetCode, this.recaptchaResponse)\n            .then(() => {\n            this.resetComplete = true;\n            setTimeout(() => {\n                window.location.href = this.loginRoute;\n            }, 5000);\n        })\n            .catch(err => {\n            this.resetError = true;\n        });\n    }\n}\nPasswordResetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: PasswordResetComponent, deps: [{ token: AuthenticationService }, { token: i2$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nPasswordResetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: PasswordResetComponent, selector: \"ka-password-reset\", inputs: { authenticationService: \"authenticationService\", loginRoute: \"loginRoute\", recaptchaKey: \"recaptchaKey\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\\\">\\n\\n    <div class=\\\"actioninfo p2w p1m\\\">\\n        <ng-template [ngIf]=\\\"resetEmail && !resetComplete && !resetError && !codeError\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <b>Enter New Password</b>\\n            </h4>\\n\\n            <div class=\\\"mb-4\\\">\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>Current Email Address</label>\\n                    <input class=\\\"w-full\\\" type=\\\"text\\\" [value]=\\\"resetEmail\\\" disabled>\\n                </div>\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>New Password</label>\\n                    <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\">\\n                </div>\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>Confirm New Password</label>\\n                    <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\">\\n                </div>\\n\\n                <div *ngIf=\\\"confirmPassword && password !== confirmPassword\\\"\\n                     class=\\\"text-red-600 text-sm\\\">\\n                    Passwords do not match\\n                </div>\\n\\n            </div>\\n\\n            <re-captcha class=\\\"mt-4\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                        [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"resetComplete\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-secondary h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">Your password has been successfully reset.</div>\\n            </div>\\n\\n            <a class=\\\"justify-center text-primary mt-8 cursor-pointer hover:underline flex items-center\\\"\\n               [routerLink]=\\\"[loginRoute]\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-6 w-6\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\"\\n                     stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M11 17l-5-5m0 0l5-5m-5 5h12\\\"/>\\n                </svg>\\n                Go to login\\n            </a>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"codeError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem with the reset code supplied, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"resetError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem resetting your password at this time, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n    </div>\\n    <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n        <button class=\\\"button small-button white-button disabled:opacity-50\\\"\\n                *ngIf=\\\"resetEmail && !resetComplete && !resetError && !codeError\\\"\\n                [disabled]=\\\"!confirmPassword || confirmPassword !== password\\\"\\n                (click)=\\\"saveNewPassword()\\\">\\n            Save New Password\\n        </button>\\n    </div>\\n\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i2$1.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i5.RecaptchaComponent, selector: \"re-captcha\", inputs: [\"id\", \"siteKey\", \"theme\", \"type\", \"size\", \"badge\", \"tabIndex\"], outputs: [\"resolved\"], exportAs: [\"reCaptcha\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: PasswordResetComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-password-reset', template: \"<div class=\\\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\\\">\\n\\n    <div class=\\\"actioninfo p2w p1m\\\">\\n        <ng-template [ngIf]=\\\"resetEmail && !resetComplete && !resetError && !codeError\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <b>Enter New Password</b>\\n            </h4>\\n\\n            <div class=\\\"mb-4\\\">\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>Current Email Address</label>\\n                    <input class=\\\"w-full\\\" type=\\\"text\\\" [value]=\\\"resetEmail\\\" disabled>\\n                </div>\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>New Password</label>\\n                    <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\">\\n                </div>\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>Confirm New Password</label>\\n                    <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\">\\n                </div>\\n\\n                <div *ngIf=\\\"confirmPassword && password !== confirmPassword\\\"\\n                     class=\\\"text-red-600 text-sm\\\">\\n                    Passwords do not match\\n                </div>\\n\\n            </div>\\n\\n            <re-captcha class=\\\"mt-4\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                        [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"resetComplete\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-secondary h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">Your password has been successfully reset.</div>\\n            </div>\\n\\n            <a class=\\\"justify-center text-primary mt-8 cursor-pointer hover:underline flex items-center\\\"\\n               [routerLink]=\\\"[loginRoute]\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-6 w-6\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\"\\n                     stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M11 17l-5-5m0 0l5-5m-5 5h12\\\"/>\\n                </svg>\\n                Go to login\\n            </a>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"codeError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem with the reset code supplied, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"resetError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem resetting your password at this time, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n    </div>\\n    <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n        <button class=\\\"button small-button white-button disabled:opacity-50\\\"\\n                *ngIf=\\\"resetEmail && !resetComplete && !resetError && !codeError\\\"\\n                [disabled]=\\\"!confirmPassword || confirmPassword !== password\\\"\\n                (click)=\\\"saveNewPassword()\\\">\\n            Save New Password\\n        </button>\\n    </div>\\n\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }, { type: i2$1.ActivatedRoute }]; }, propDecorators: { authenticationService: [{\n                type: Input\n            }], loginRoute: [{\n                type: Input\n            }], recaptchaKey: [{\n                type: Input\n            }] } });\n\nclass NgKiniAuthModule {\n    static forRoot(conf) {\n        return {\n            ngModule: NgKiniAuthModule,\n            providers: [\n                { provide: KiniAuthModuleConfig, useValue: conf || {} }\n            ]\n        };\n    }\n}\nNgKiniAuthModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NgKiniAuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgKiniAuthModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.6\", ngImport: i0, type: NgKiniAuthModule, declarations: [AccountSummaryComponent,\n        EditNameComponent,\n        EditEmailComponent,\n        TwoFactorComponent,\n        LoginComponent,\n        InlineModalComponent,\n        BaseComponent,\n        EditBackupEmailComponent,\n        EditMobileComponent,\n        AddressBookComponent,\n        ContactDetailsComponent,\n        CountryCodesDirective,\n        PostcodeLookupDirective,\n        AccountUsersComponent,\n        UserRolesComponent,\n        EditRolesComponent,\n        InviteUserComponent,\n        EditDetailsComponent,\n        EditAccountNameComponent,\n        NotificationsComponent,\n        NotificationComponent,\n        AccountsComponent,\n        InvitationComponent,\n        PasswordResetComponent,\n        ChangePasswordComponent], imports: [NgKinibindModule,\n        RouterModule,\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        MatPaginatorModule,\n        MatIconModule,\n        MatButtonModule,\n        MatMenuModule,\n        MatTabsModule,\n        RecaptchaModule,\n        MatTableModule,\n        MatChipsModule,\n        MatCheckboxModule], exports: [AccountSummaryComponent,\n        EditEmailComponent,\n        TwoFactorComponent,\n        LoginComponent,\n        AddressBookComponent,\n        ContactDetailsComponent,\n        AccountUsersComponent,\n        UserRolesComponent,\n        EditRolesComponent,\n        InviteUserComponent,\n        EditAccountNameComponent,\n        NotificationsComponent,\n        NotificationComponent,\n        AccountsComponent,\n        InvitationComponent,\n        PasswordResetComponent] });\nNgKiniAuthModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NgKiniAuthModule, imports: [NgKinibindModule,\n        RouterModule,\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        MatPaginatorModule,\n        MatIconModule,\n        MatButtonModule,\n        MatMenuModule,\n        MatTabsModule,\n        RecaptchaModule,\n        MatTableModule,\n        MatChipsModule,\n        MatCheckboxModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NgKiniAuthModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        AccountSummaryComponent,\n                        EditNameComponent,\n                        EditEmailComponent,\n                        TwoFactorComponent,\n                        LoginComponent,\n                        InlineModalComponent,\n                        BaseComponent,\n                        EditBackupEmailComponent,\n                        EditMobileComponent,\n                        AddressBookComponent,\n                        ContactDetailsComponent,\n                        CountryCodesDirective,\n                        PostcodeLookupDirective,\n                        AccountUsersComponent,\n                        UserRolesComponent,\n                        EditRolesComponent,\n                        InviteUserComponent,\n                        EditDetailsComponent,\n                        EditAccountNameComponent,\n                        NotificationsComponent,\n                        NotificationComponent,\n                        AccountsComponent,\n                        InvitationComponent,\n                        PasswordResetComponent,\n                        ChangePasswordComponent\n                    ],\n                    imports: [\n                        NgKinibindModule,\n                        RouterModule,\n                        CommonModule,\n                        FormsModule,\n                        HttpClientModule,\n                        ReactiveFormsModule,\n                        MatPaginatorModule,\n                        MatIconModule,\n                        MatButtonModule,\n                        MatMenuModule,\n                        MatTabsModule,\n                        RecaptchaModule,\n                        MatTableModule,\n                        MatChipsModule,\n                        MatCheckboxModule\n                    ],\n                    exports: [\n                        AccountSummaryComponent,\n                        EditEmailComponent,\n                        TwoFactorComponent,\n                        LoginComponent,\n                        AddressBookComponent,\n                        ContactDetailsComponent,\n                        AccountUsersComponent,\n                        UserRolesComponent,\n                        EditRolesComponent,\n                        InviteUserComponent,\n                        EditAccountNameComponent,\n                        NotificationsComponent,\n                        NotificationComponent,\n                        AccountsComponent,\n                        InvitationComponent,\n                        PasswordResetComponent\n                    ]\n                }]\n        }] });\nclass KiniAuthModuleConfig {\n}\n\nconst _ = lodash.default;\nclass AuthenticationService {\n    constructor(kbRequest, config, http) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n        this.http = http;\n        this.authUser = new BehaviorSubject$1(null);\n        this.sessionData = new BehaviorSubject$1(null);\n        this.loadingRequests = new BehaviorSubject$1(false);\n        const user = sessionStorage.getItem('loggedInUser');\n        this.authUser.next(JSON.parse(user));\n        const sessionData = sessionStorage.getItem('sessionData');\n        if (sessionData && _.filter(JSON.parse(sessionData)).length) {\n            this.sessionData.next(JSON.parse(sessionData));\n        }\n    }\n    async getLoggedInUser(reloadSession) {\n        if (reloadSession || !this.sessionData.getValue()) {\n            await this.getSessionData();\n        }\n        const res = await this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user')\n            .toPromise();\n        if (res) {\n            await this.setSessionUser(res);\n            const sessionData = sessionStorage.getItem('sessionData');\n            if (sessionData && _.filter(JSON.parse(sessionData)).length) {\n                this.sessionData.next(JSON.parse(sessionData));\n            }\n            else {\n                await this.getSessionData();\n            }\n            return res;\n        }\n        return null;\n    }\n    login(username, password, clientTwoFactorData, recaptcha) {\n        const request = this.config.guestHttpURL + `/auth/login`;\n        const headers = new HttpHeaders({ 'X-CAPTCHA-TOKEN': recaptcha || '' });\n        const options = { headers };\n        return this.kbRequest.makePostRequest(request, {\n            emailAddress: username,\n            password: this.getHashedPassword(password, username),\n            clientTwoFactorData: clientTwoFactorData || null\n        }, options).toPromise().then((user) => {\n            if (user === 'REQUIRES_2FA') {\n                return user;\n            }\n            else {\n                return this.getSessionData().then(() => {\n                    return this.setSessionUser(user);\n                });\n            }\n        });\n    }\n    sendPasswordReset(emailAddress, recaptcha) {\n        const headers = new HttpHeaders({ 'X-CAPTCHA-TOKEN': recaptcha || '' });\n        return this.http.get(this.config.guestHttpURL + '/auth/passwordReset', {\n            params: { emailAddress },\n            headers\n        }).toPromise();\n    }\n    getEmailForPasswordReset(resetCode) {\n        return this.http.get(this.config.guestHttpURL + '/auth/passwordReset/' + resetCode)\n            .toPromise();\n    }\n    resetPassword(emailAddress, newPassword, resetCode, recaptcha) {\n        const headers = new HttpHeaders({ 'X-CAPTCHA-TOKEN': recaptcha || '' });\n        const options = { headers };\n        return this.http.post(this.config.guestHttpURL + '/auth/passwordReset', {\n            newPassword: this.getHashedPassword(newPassword, emailAddress, true),\n            resetCode\n        }, options).toPromise();\n    }\n    changeUserPassword(newPassword, existingPassword, email) {\n        return this.http.post(this.config.accessHttpURL + '/user/changeUserPassword', {\n            newPassword: this.getHashedPassword(newPassword, email, true),\n            password: this.getHashedPassword(existingPassword, email)\n        }).toPromise();\n    }\n    updateApplicationSettings(settings) {\n        return this.http.put(this.config.accessHttpURL + '/user/applicationSettings', settings).toPromise();\n    }\n    isAdminNow() {\n        const session = this.sessionData.getValue();\n        if (session && session.privileges) {\n            const accountId = session.account ? session.account.accountId : null;\n            const privileges = session.privileges.ACCOUNT;\n            if (privileges['*']) {\n                return true;\n            }\n            return privileges[accountId] ? privileges[accountId].indexOf('*') > -1 : false;\n        }\n        return false;\n    }\n    isAdmin() {\n        return this.sessionData.pipe(map(session => {\n            if (session && session.privileges) {\n                const accountId = session.account ? session.account.accountId : null;\n                const privileges = session.privileges.ACCOUNT;\n                if (privileges['*']) {\n                    return true;\n                }\n                return privileges[accountId] ? privileges[accountId].indexOf('*') > -1 : false;\n            }\n            return false;\n        }));\n    }\n    closeActiveSession() {\n        return this.kbRequest.makeGetRequest('/guest/auth/closeActiveSessions').toPromise()\n            .then(res => {\n            return this.getSessionData().then(() => {\n                return res;\n            });\n        });\n    }\n    generateTwoFactorSettings() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/twoFactorSettings')\n            .toPromise();\n    }\n    authenticateNewTwoFactor(code, secret) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/newTwoFactor', {\n            params: { code, secret }\n        }).toPromise().then(user => {\n            if (user) {\n                this.setSessionUser(user);\n            }\n            return user;\n        });\n    }\n    async authenticateTwoFactor(code) {\n        const url = this.config.guestHttpURL + `/auth/twoFactor?code=${code}`;\n        const result = await this.kbRequest.makeGetRequest(url).toPromise();\n        if (result) {\n            sessionStorage.removeItem('pendingLoginSession');\n            await this.getLoggedInUser(true);\n            return result;\n        }\n        else {\n            throw (result);\n        }\n    }\n    disableTwoFactor() {\n        const url = this.config.accessHttpURL + '/user/disableTwoFA';\n        return this.kbRequest.makeGetRequest(url).toPromise().then(user => {\n            this.setSessionUser(user);\n        });\n    }\n    doesUserExist(username) {\n        return Promise.resolve(true);\n    }\n    emailAvailable(emailAddress) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + `/auth/emailExists?emailAddress=${emailAddress}`).toPromise().then(res => {\n            return !res;\n        });\n    }\n    getInvitationDetails(invitationCode) {\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + `/registration/invitation/${invitationCode}`).toPromise();\n    }\n    acceptInvitation(invitationCode, name = '', password = '', email = '') {\n        return this.kbRequest.makePostRequest(this.config.guestHttpURL + `/registration/invitation/${invitationCode}`, { name, password: this.getHashedPassword(password, email, true) }).toPromise();\n    }\n    validateUserPassword(emailAddress, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/auth/validatePassword', {\n            emailAddress,\n            password: this.getHashedPassword(password)\n        }).toPromise();\n    }\n    changeUserDetails(newEmailAddress, newName, password, userId) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeDetails', {\n            newEmailAddress,\n            newName,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    changeUserName(newName, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeName', {\n            newName,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    changeUserEmailAddress(newEmailAddress, password) {\n        const sessionData = this.sessionData.getValue();\n        const params = { newEmailAddress, password };\n        if (sessionData.sessionSalt) {\n            params.password = this.getHashedPassword(password);\n            params.hashedPassword = sha512.sha512(password + newEmailAddress);\n        }\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeEmail', params).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    changeUserBackEmailAddress(newEmailAddress, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeBackupEmail', {\n            newEmailAddress,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    changeUserMobile(newMobile, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeMobile', {\n            newMobile,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    getGoogleAuthSettings() {\n        return Promise.resolve(123);\n    }\n    logout() {\n        this.authUser.next(null);\n        this.sessionData.next(null);\n        sessionStorage.clear();\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + '/auth/logout')\n            .toPromise();\n    }\n    setSessionUser(user) {\n        sessionStorage.setItem('loggedInUser', JSON.stringify(user));\n        this.authUser.next(user);\n        return Promise.resolve(user);\n    }\n    setLoadingRequest(value) {\n        this.loadingRequests.next(value);\n    }\n    sessionTransfer(token) {\n        return this.http.post(this.config.guestHttpURL + '/auth/sessionTransfer', token).toPromise();\n    }\n    getSessionData() {\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + '/session')\n            .toPromise()\n            .then(sessionData => {\n            if (sessionData) {\n                sessionStorage.setItem('sessionData', JSON.stringify(sessionData));\n                this.sessionData.next(sessionData);\n                return sessionData;\n            }\n            else {\n                sessionStorage.removeItem('sessionData');\n                this.sessionData.next(null);\n                return null;\n            }\n        });\n    }\n    getHashedPassword(password, emailAddress, newPassword = false) {\n        let hashedPassword;\n        const sessionData = this.sessionData.getValue();\n        const loggedInUser = this.authUser.getValue();\n        const email = emailAddress ? emailAddress : (loggedInUser ? loggedInUser.emailAddress : '');\n        const hash = sha512.sha512(password + email);\n        if (newPassword) {\n            return hash;\n        }\n        if (email && sessionData && sessionData.sessionSalt) {\n            hashedPassword = sha512.sha512(hash + sessionData.sessionSalt);\n        }\n        return hashedPassword || password;\n    }\n}\nAuthenticationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AuthenticationService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }, { token: i3$1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthenticationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AuthenticationService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AuthenticationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }, { type: i3$1.HttpClient }]; } });\n\n/*\n * Public API Surface of ng-kiniauth\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AccountService, AccountSummaryComponent, AccountUsersComponent, AccountsComponent, AddressBookComponent, AuthenticationService, ContactDetailsComponent, EditAccountNameComponent, EditEmailComponent, EditRolesComponent, InvitationComponent, InviteUserComponent, KiniAuthModuleConfig, LoginComponent, NgKiniAuthModule, NotificationComponent, NotificationService, NotificationsComponent, PasswordResetComponent, TwoFactorComponent, UserRolesComponent, UserService };\n//# sourceMappingURL=ng-kiniauth.mjs.map\n","map":{"version":3,"file":"ng-kiniauth.mjs","sources":["../../../projects/ng-kiniauth/src/lib/views/base-component.ts","../../../projects/ng-kiniauth/src/lib/services/account.service.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-name/edit-name.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-name/edit-name.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-email/edit-email.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-email/edit-email.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/two-factor/two-factor.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/two-factor/two-factor.component.html","../../../projects/ng-kiniauth/src/lib/views/inline-modal/inline-modal.component.ts","../../../projects/ng-kiniauth/src/lib/views/inline-modal/inline-modal.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-backup-email/edit-backup-email.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-backup-email/edit-backup-email.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-mobile/edit-mobile.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-mobile/edit-mobile.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-account-name/edit-account-name.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-account-name/edit-account-name.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/change-password/change-password.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/change-password/change-password.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/account-summary.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/account-summary.component.html","../../../projects/ng-kiniauth/src/lib/views/auth/login/login.component.ts","../../../projects/ng-kiniauth/src/lib/views/auth/login/login.component.html","../../../projects/ng-kiniauth/src/lib/services/contact.service.ts","../../../projects/ng-kiniauth/src/lib/views/address-book/address-book.component.ts","../../../projects/ng-kiniauth/src/lib/views/address-book/address-book.component.html","../../../projects/ng-kiniauth/src/lib/views/contact-details/contact-details.component.ts","../../../projects/ng-kiniauth/src/lib/views/contact-details/contact-details.component.html","../../../projects/ng-kiniauth/src/lib/directives/country-codes/country-codes.directive.ts","../../../projects/ng-kiniauth/src/lib/directives/postcode-lookup/postcode-lookup.directive.ts","../../../projects/ng-kiniauth/src/lib/services/user.service.ts","../../../projects/ng-kiniauth/src/lib/views/account-users/account-users.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-users/account-users.component.html","../../../projects/ng-kiniauth/src/lib/services/role.service.ts","../../../projects/ng-kiniauth/src/lib/views/user-roles/edit-roles/edit-roles.component.ts","../../../projects/ng-kiniauth/src/lib/views/user-roles/edit-roles/edit-roles.component.html","../../../projects/ng-kiniauth/src/lib/views/user-roles/user-roles.component.ts","../../../projects/ng-kiniauth/src/lib/views/user-roles/user-roles.component.html","../../../projects/ng-kiniauth/src/lib/views/invite-user/invite-user.component.ts","../../../projects/ng-kiniauth/src/lib/views/invite-user/invite-user.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-details/edit-details.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-details/edit-details.component.html","../../../projects/ng-kiniauth/src/lib/services/notification.service.ts","../../../projects/ng-kiniauth/src/lib/views/notifications/notifications.component.ts","../../../projects/ng-kiniauth/src/lib/views/notifications/notifications.component.html","../../../projects/ng-kiniauth/src/lib/views/notifications/notification/notification.component.ts","../../../projects/ng-kiniauth/src/lib/views/notifications/notification/notification.component.html","../../../projects/ng-kiniauth/src/lib/views/accounts/accounts.component.ts","../../../projects/ng-kiniauth/src/lib/views/accounts/accounts.component.html","../../../projects/ng-kiniauth/src/lib/views/invitation/invitation.component.ts","../../../projects/ng-kiniauth/src/lib/views/invitation/invitation.component.html","../../../projects/ng-kiniauth/src/lib/views/password-reset/password-reset.component.ts","../../../projects/ng-kiniauth/src/lib/views/password-reset/password-reset.component.html","../../../projects/ng-kiniauth/src/ng-kiniauth.module.ts","../../../projects/ng-kiniauth/src/lib/services/authentication.service.ts","../../../projects/ng-kiniauth/src/public-api.ts","../../../projects/ng-kiniauth/src/ng-kiniauth.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Component({\n    selector: 'ka-base-component',\n    template: ''\n})\nexport class BaseComponent implements OnInit {\n\n    @Input() authenticationService;\n\n    public authService;\n\n    constructor(public kcAuthService: AuthenticationService) {\n\n    }\n\n    ngOnInit(): void {\n        this.authService = this.authenticationService ? this.authenticationService : this.kcAuthService;\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {KinibindRequestService} from 'ng-kinibind';\nimport {KiniAuthModuleConfig} from '../../ng-kiniauth.module';\nimport {AuthenticationService} from './authentication.service';\nimport * as lodash from 'lodash';\n\nconst _ = lodash.default;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AccountService {\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig,\n                private authService: AuthenticationService) {\n    }\n\n    public getAccount(accountId?) {\n        const accountString = accountId ? `/${accountId}` : '';\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account' + accountString).toPromise()\n            .catch(err => {\n                return null;\n            });\n    }\n\n    public searchForAccounts(searchString?, limit?, offset?) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account', {\n            params: _.pickBy({searchString, limit, offset}, _.identity)\n        });\n    }\n\n    public createAccount(accountName, emailAddress = null, rawPassword = null, name = null) {\n        let password = rawPassword;\n        if (rawPassword) {\n            password = this.authService.getHashedPassword(rawPassword, emailAddress, true);\n        }\n\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account',\n            _.omitBy({accountName, emailAddress, password, name}, _.isNil)\n        ).toPromise();\n    }\n\n    public suspendAccount(accountId, note) {\n        return this.kbRequest.makeRequest('PUT',\n            this.config.accessHttpURL + '/account/' + accountId + '/suspend', {\n                params: {note}\n            })\n            .toPromise();\n    }\n\n    public updateAccountName(accountId, newAccountName) {\n        return this.kbRequest.makeRequest('PUT',\n            this.config.accessHttpURL + '/account/' + accountId + '/name', {\n                params: {newAccountName}\n            })\n            .toPromise();\n    }\n\n    public reactivateAccount(accountId, note) {\n        return this.kbRequest.makeRequest('PUT',\n            this.config.accessHttpURL + '/account/' + accountId + '/reactivate', {\n                params: {note}\n            })\n            .toPromise();\n    }\n\n    public changeAccountName(newName, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account/changeName', {\n            newName,\n            password: this.authService.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return true;\n            }\n        });\n    }\n\n    public inviteUserToAccount(emailAddress, assignedRoles) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account/invite?emailAddress=' + emailAddress,\n            assignedRoles).toPromise();\n    }\n\n}\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-name',\n    templateUrl: './edit-name.component.html',\n    styleUrls: ['./edit-name.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditNameComponent implements OnInit, OnDestroy {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newName = '';\n    public currentPassword = '';\n    public saveError: string;\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    ngOnDestroy(): void {\n\n    }\n\n    public saveNewName() {\n        this.saveError = '';\n        this.authService.changeUserName(this.newName, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                this.saveError = 'There was a problem updating your details, please check and try again.';\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your user name. You will be required to confirm you identity by entering your password\n                prior to saving the new name.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new name you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"text\" name=\"name\" [(ngModel)]=\"newName\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!newName || !currentPassword\" (click)=\"saveNewName()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Save Changes</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-email',\n    templateUrl: './edit-email.component.html',\n    styleUrls: ['./edit-email.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditEmailComponent implements OnInit, OnDestroy {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newEmailAddress = '';\n    public currentPassword = '';\n    public saveError: string;\n    public emailAvailable = true;\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    ngOnDestroy(): void {\n\n    }\n\n    public checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n\n    public saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserEmailAddress(this.newEmailAddress, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                if (err.error.validationErrors.emailAddress.email.errorMessage) {\n                    this.saveError = 'Email error: ' + err.error.validationErrors.emailAddress.email.errorMessage;\n                } else {\n                    this.saveError = 'There was a problem changing the email address, please check and try again.';\n                }\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your email address. You will be required to confirm you identity by entering your password\n                prior to saving the new email address.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new email address you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"email\" #email=\"ngModel\" name=\"email\" [(ngModel)]=\"newEmailAddress\"\n                               (change)=\"checkEmail()\" placeholder=\"New email address\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                        <span style=\"color: red\" *ngIf=\"!emailAvailable\">An account already exists with this email address</span>\n                        <span style=\"color: red\" *ngIf=\"email.invalid\">Not a valid email address</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\"\n                    (click)=\"saveEmailAddress()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Update email address</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-two-factor',\n    templateUrl: './two-factor.component.html',\n    styleUrls: ['./two-factor.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TwoFactorComponent implements OnInit {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public user: any;\n    public settings: any;\n    public twoFACode: string;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n            return user;\n        }).then(() => {\n            this.authService.generateTwoFactorSettings().then(settings => {\n                this.settings = settings;\n            });\n        });\n    }\n\n    public verifyCode() {\n        this.authService.authenticateNewTwoFactor(this.twoFACode, this.settings.secret)\n            .then(res => {\n                this.saved.emit(res);\n            });\n    }\n\n}\n","<ng-template [ngIf]=\"settings\">\n    <div class=\"font-medium text-lg ml-6 mt-4\">Google Authenticator</div>\n\n    <div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n        <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n            <div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            After downloading and installing the Google Authenticator app, scan the QR code below\n                            to link your account.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <img [src]=\"settings.qrCode\" alt=\"\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            If you are unable to scan the QR code below, please enter the following code...</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <input type=\"text\" name=\"name\" [value]=\"settings.secret\" disabled\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md cursor-text\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            Once linked, please enter the verification code you see in the Google Authenticator app\n                            below.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <input type=\"text\" name=\"name\" [(ngModel)]=\"twoFACode\" maxlength=\"10\"\n                                   placeholder=\"Enter verification code\"\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n\n                            <button type=\"button\" [disabled]=\"!twoFACode\" (click)=\"verifyCode()\"\n                                    class=\"mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                                Verify Code\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"font-medium ml-6 text-lg\">Backup Codes</div>\n    <div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n        <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n            <div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            The following one-time codes can be used if you need to gain access to your account in an\n                            emergency.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <div *ngFor=\"let code of settings.backupCodes\">{{code}}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, OnInit, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'ka-inline-modal',\n    templateUrl: './inline-modal.component.html',\n    styleUrls: ['./inline-modal.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InlineModalComponent implements OnInit {\n\n    @Output('closed') closed: EventEmitter<boolean> = new EventEmitter();\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    public back() {\n        this.closed.emit(true);\n    }\n\n}\n","<div class=\"inline-modal\">\n\n    <div class=\"flex pt2 px2 justify-end\">\n        <a class=\"close-link\" (click)=\"back()\">\n            &#10005;\n        </a>\n    </div>\n\n    <div class=\"grid grid-desktop my2 px1\">\n\n        <ng-content></ng-content>\n\n    </div>\n\n\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-backup-email',\n    templateUrl: './edit-backup-email.component.html',\n    styleUrls: ['./edit-backup-email.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditBackupEmailComponent implements OnInit {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newEmailAddress = '';\n    public currentPassword = '';\n    public saveError: string;\n    public emailAvailable = true;\n\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    public checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n\n    public saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserBackEmailAddress(this.newEmailAddress, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                this.saveError = 'There was a problem changing the email address, please check and try again.';\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your backup email address. You will be required to confirm you identity by entering your password\n                prior to saving the new email address.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new email address you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"email\" placeholder=\"New email address\" name=\"email\" [(ngModel)]=\"newEmailAddress\"\n                               (change)=\"checkEmail()\" email #email=\"ngModel\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                        <span style=\"color: red\" *ngIf=\"!emailAvailable\">An account already exists with this email address</span>\n                        <span style=\"color: red\" *ngIf=\"email.invalid\">Not a valid email address</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\"\n                    (click)=\"saveEmailAddress()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Update email address</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-mobile',\n    templateUrl: './edit-mobile.component.html',\n    styleUrls: ['./edit-mobile.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditMobileComponent implements OnInit {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newMobile = '';\n    public currentPassword = '';\n    public saveError: string;\n\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    public saveMobileNumber() {\n        this.saveError = '';\n        this.authService.changeUserMobile(this.newMobile, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                if (err.error.validationErrors.mobileNumber.regexp.errorMessage) {\n                    this.saveError = 'Number error: ' + err.error.validationErrors.mobileNumber.regexp.errorMessage;\n                } else {\n                    this.saveError = 'There was a problem changing the mobile number, please check and try again.';\n                }\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your mobile number. You will be required to confirm you identity by entering your password\n                prior to saving the new number.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new mobile number you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"text\" name=\"name\" [(ngModel)]=\"newMobile\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!newMobile || !currentPassword\" (click)=\"saveMobileNumber()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Update mobile number</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-account-name',\n    templateUrl: './edit-account-name.component.html',\n    styleUrls: ['./edit-account-name.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditAccountNameComponent implements OnInit, OnDestroy {\n\n    @Input() authService;\n    @Input() accountService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newName = '';\n    public currentPassword = '';\n    public saveError: string;\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    ngOnDestroy(): void {\n\n    }\n\n    public saveNewName() {\n        this.saveError = '';\n        this.accountService.changeAccountName(this.newName, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                this.saveError = 'There was a problem changing the account name, please check and try again.';\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your account name. You will be required to confirm you identity by entering your password\n                prior to saving the new name.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new name you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"text\" name=\"name\" [(ngModel)]=\"newName\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!newName || !currentPassword\" (click)=\"saveNewName()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Save Changes</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\n\n@Component({\n    selector: 'ka-change-password',\n    templateUrl: './change-password.component.html',\n    styleUrls: ['./change-password.component.sass']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n    @Input() email: string;\n    @Input() authService: any;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public password: string;\n    public confirmPassword: string;\n    public existingPassword: string;\n    public saveError = false;\n    public changeComplete = false;\n    public isLengthOk = false;\n    public isLowerCaseOk = false;\n    public isUpperCaseOk = false;\n    public isDigitOk = false;\n    public isSpecialOk = false;\n    public isPasswordOk = false;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    public passwordChange() {\n        const strongPassword = new RegExp('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})');\n        this.isPasswordOk = strongPassword.test(this.password);\n\n        const lower = new RegExp('(?=.*[a-z])');\n        const upper = new RegExp('(?=.*[A-Z])');\n        const digit = new RegExp('(?=.*[0-9])');\n        const special = new RegExp('(?=.*[^A-Za-z0-9])');\n        const length = new RegExp('(?=.{8,})');\n\n        this.isLengthOk = length.test(this.password);\n        this.isLowerCaseOk = lower.test(this.password);\n        this.isUpperCaseOk = upper.test(this.password);\n        this.isDigitOk = digit.test(this.password);\n        this.isSpecialOk = special.test(this.password);\n    }\n\n    public saveNewPassword() {\n        this.saveError = false;\n        this.authService.changeUserPassword(this.confirmPassword, this.existingPassword, this.email)\n            .then(() => {\n                this.changeComplete = true;\n                setTimeout(() => {\n                    this.saved.emit(Date.now());\n                }, 3000);\n            })\n            .catch(err => {\n                this.saveError = true;\n                setTimeout(() => {\n                    this.saved.emit(Date.now());\n                }, 3000);\n            });\n    }\n\n}\n","<div *ngIf=\"saveError\" class=\"my-8 flex items-center justify-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-16 w-16 mr-2\" fill=\"none\"\n         viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n    </svg>\n    <div class=\"text-lg\">There was a problem changing your password at this time, please check your details and\n        try again.\n    </div>\n</div>\n\n<div *ngIf=\"changeComplete\" class=\"my-8 flex items-center justify-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\"\n         viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n    </svg>\n    <div class=\"text-lg\">Your password has been successfully changed.</div>\n</div>\n<ng-template [ngIf]=\"!saveError && !changeComplete\">\n    <div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n        <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n\n            <div>\n                <div class=\"mb-8\">\n                    Change your existing password. You will need to enter your current password to confirm the changes.\n                </div>\n                <div class=\"font-medium text-base mb-4\">New Password</div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            Enter the new password to use.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2 \">\n                            <input type=\"password\" name=\"name\" [(ngModel)]=\"password\" (ngModelChange)=\"passwordChange()\"\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n\n                            <div class=\"mt-2 text-gray-500\">\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isLengthOk}\">\n                                    <svg [ngClass]=\"{visible: isLengthOk, invisible: !isLengthOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                          class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>8 characters</b>\n                                </div>\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isLowerCaseOk}\">\n                                    <svg [ngClass]=\"{visible: isLowerCaseOk, invisible: !isLowerCaseOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                         class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>one lower case</b>\n                                </div>\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isUpperCaseOk}\">\n                                    <svg [ngClass]=\"{visible: isUpperCaseOk, invisible: !isUpperCaseOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                         class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>one upper case</b>\n                                </div>\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isDigitOk}\">\n                                    <svg [ngClass]=\"{visible: isDigitOk, invisible: !isDigitOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                         class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>one number</b>\n                                </div>\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isSpecialOk}\">\n                                    <svg [ngClass]=\"{visible: isSpecialOk, invisible: !isSpecialOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                         class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>one special character</b>\n                                </div>\n                            </div>\n\n\n                        </div>\n\n                    </div>\n                </div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            Confirm new password.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <input type=\"password\" name=\"password\" [(ngModel)]=\"confirmPassword\"\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                            <span class=\"text-sm text-red-600\"\n                                  [ngClass]=\"{visible: confirmPassword && password !== confirmPassword, invisible: !confirmPassword || password === confirmPassword}\">Passwords do not match</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class=\"font-medium text-base my-4\">Existing Password</div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            Enter your existing password.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <input type=\"password\" name=\"name\" [(ngModel)]=\"existingPassword\"\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class=\"pt-5\">\n            <div class=\"flex justify-end\">\n                <button type=\"button\" (click)=\"saveNewPassword()\"\n                        [disabled]=\"!isPasswordOk || !existingPassword || (!confirmPassword || confirmPassword !== password)\"\n                        class=\"disabled:opacity-50 ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                    Save New Password\n                </button>\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { BaseComponent } from '../base-component';\nimport { AccountService } from '../../services/account.service';\n\n@Component({\n    selector: 'ka-account-summary',\n    templateUrl: './account-summary.component.html',\n    styleUrls: ['./account-summary.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AccountSummaryComponent extends BaseComponent implements OnInit, OnDestroy {\n\n    @Input() authenticationService: any;\n    @Input() showPasswordReset = true;\n    @Input() showAccountDetails = true;\n\n    public security: any;\n    public account: any;\n    public twoFactorConfig: any;\n    public reloadTwoFactor: Subject<boolean> = new Subject();\n    public isLoading = true;\n\n    public editName = false;\n    public editAccountName = false;\n    public editEmail = false;\n    public editMobile = false;\n    public editBackup = false;\n    public enableTwoFa = false;\n    public changePassword = false;\n\n    private userSub: Subscription;\n\n    constructor(kcAuthService: AuthenticationService,\n                public accountService: AccountService) {\n        super(kcAuthService);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.loadAccount();\n        this.userSub = this.authService.authUser.subscribe(user => this.security = user);\n        return this.authService.getLoggedInUser();\n    }\n\n    ngOnDestroy(): void {\n        this.userSub.unsubscribe();\n    }\n\n    public loadAccount() {\n        this.editAccountName = false;\n        this.accountService.getAccount().then(account => {\n            this.account = account;\n        });\n    }\n\n    public resetAccountPassword() {\n        const message = 'We are going to reset the account password to a temporary one and email the registered ' +\n            'email address. Are you sure you wish to proceed?';\n        if (window.confirm(message)) {\n            this.authService.resetAccountPassword();\n        }\n    }\n\n    public disable2FA() {\n        const message = 'Are you sure you would like to turn off Two Factor Authentication?';\n        if (window.confirm(message)) {\n            this.authService.disableTwoFactor().then(() => {\n                this.reloadTwoFactor.next(true);\n            });\n        }\n    }\n\n}\n","<ng-template [ngIf]=\"!editName && !editEmail && !editBackup && !editMobile && !enableTwoFa && !changePassword\">\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\" *ngIf=\"account && showAccountDetails\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Account Details</h4>\n\n            <p class=\"mb0\" *ngIf=\"security\">Your account name is currently set to\n                <strong>{{account.name}}</strong></p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editAccountName = true;\">Edit Account Name\n            </button>\n        </div>\n\n    </div>\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0 flex align-center\">\n                <img src=\"https://www.gravatar.com/avatar/{{security.hashedEmail}}?d=mp\" height=\"40\" alt=\"user-gravatar\"\n                     class=\"mr1 mr-4\">\n                {{security.name}}\n            </h4>\n\n            <div class=\"mb1\">\n                <p *ngIf=\"security\">If you need to update your name, you can do so here.</p>\n            </div>\n\n            <div *ngIf=\"security\">\n                <p class=\"mb0\">Your user icon is based on your Gravatar image. You can easily create/edit your image by visiting the <a href=\"https://gravatar.com\" target=\"_blank\">Gravatar website.</a></p>\n            </div>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editName = true;\">Edit Name\n            </button>\n        </div>\n\n    </div>\n\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Email Address</h4>\n\n            <p class=\"mb0\" *ngIf=\"security\">Your account email address is currently set to\n                <strong>{{security.emailAddress}}</strong></p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editEmail = true;\">Edit Email\n                Address\n            </button>\n        </div>\n\n    </div>\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\" *ngIf=\"showPasswordReset\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Password</h4>\n\n            <p class=\"mb0\">Change your existing password.</p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"changePassword = true\">Change Password</button>\n        </div>\n\n    </div>\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Mobile Phone Number</h4>\n\n            <p *ngIf=\"security && security.mobileNumber\">Your mobile number is currently set to\n                <strong>{{security.mobileNumber}}</strong></p>\n\n            <p *ngIf=\"security && !security.mobileNumber\"><strong>\n                No mobile number has been set.\n            </strong></p>\n\n            <p class=\"mb0\">\n                We use your mobile phone number as an extra layer of security. It can also be used to help restore\n                access to your account.\n            </p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editMobile = true;\">Edit Mobile Number</button>\n        </div>\n\n    </div>\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Backup Email Address</h4>\n\n            <p *ngIf=\"security && security.backupEmailAddress\">Your account backup email address is currently set to\n                <strong>{{security.backupEmailAddress}}</strong></p>\n\n            <p *ngIf=\"security && !security.backupEmailAddress\"><strong>\n                No backup email address has been set.\n            </strong></p>\n\n            <p class=\"mb0\">\n                In the event you need to restore access to your account we can use this secondary email address\n                to help you gain access.\n            </p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editBackup = true;\">Edit Email Address</button>\n        </div>\n\n    </div>\n\n<!--    <div class=\"actionpanel sixtyforty mx1 mb2\">-->\n\n<!--        <div class=\"actioninfo p2w p1m\">-->\n<!--            <h4 class=\"mb1 mt0\">Two Factor Authentication</h4>-->\n\n<!--            <p class=\"mb0\">-->\n<!--                To increase security on your account you can enable two factor authentication. Currently this uses the-->\n<!--                Google Authenticator app downloadable for your mobile device.-->\n<!--            </p>-->\n\n<!--        </div>-->\n<!--        <div class=\"actions flex flex-col align-center justify-center p1\">-->\n\n<!--            <span *ngIf=\"!security\">Loading...</span>-->\n\n<!--            <button class=\"button small-button white-button\" (click)=\"enableTwoFa = true\"-->\n<!--                    *ngIf=\"security && !security.twoFactorData\">-->\n<!--                Enable 2FA-->\n<!--            </button>-->\n<!--            <button class=\"button small-button alert-button\" *ngIf=\"security && security.twoFactorData\"-->\n<!--                    (click)=\"disable2FA()\">-->\n<!--                Disable 2FA-->\n<!--            </button>-->\n<!--        </div>-->\n\n<!--    </div>-->\n\n</ng-template>\n<ka-inline-modal *ngIf=\"editName\" (closed)=\"editName = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit User Name</div>\n    <ka-edit-name [authService]=\"authService\" (saved)=\"editName = false;\"></ka-edit-name>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"editAccountName\" (closed)=\"editAccountName = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit Account Name</div>\n    <ka-edit-account-name [accountService]=\"accountService\" [authService]=\"authService\" (saved)=\"loadAccount()\"></ka-edit-account-name>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"editEmail\" (closed)=\"editEmail = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit Email Address</div>\n    <ka-edit-email [authService]=\"authService\" (saved)=\"editEmail = false;\"></ka-edit-email>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"editMobile\" (closed)=\"editMobile = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit Mobile Phone Number</div>\n    <ka-edit-mobile [authService]=\"authService\" (saved)=\"editMobile = false;\"></ka-edit-mobile>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"editBackup\" (closed)=\"editBackup = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit Backup Email Address</div>\n    <ka-edit-backup-email [authService]=\"authService\" (saved)=\"editBackup = false;\"></ka-edit-backup-email>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"enableTwoFa\" (closed)=\"enableTwoFa = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Enable Two Factor Authentication</div>\n    <ka-two-factor [authService]=\"authService\" (saved)=\"enableTwoFa = false;\"></ka-two-factor>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"changePassword\" (closed)=\"changePassword = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Change Password</div>\n    <ka-change-password [authService]=\"authService\" (saved)=\"changePassword = false;\" [email]=\"security.emailAddress\"></ka-change-password>\n</ka-inline-modal>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../../../services/authentication.service';\nimport { BaseComponent } from '../../base-component';\n\n@Component({\n    selector: 'ka-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class LoginComponent extends BaseComponent implements OnInit {\n\n    @Input() loginRoute: string;\n    @Input() recaptchaKey: string;\n    @Input() preventRedirect = false;\n\n    @Output() loggedIn = new EventEmitter();\n\n    public email: string;\n    public forgottenEmail: string;\n    public password: string;\n    public loading = false;\n    public loginError = false;\n    public twoFA = false;\n    public twoFACode: string;\n    public twoFAError = false;\n    public showRecaptcha = false;\n    public recaptchaResponse: string;\n    public activeSession = false;\n    public forgottenPassword = false;\n    public passwordResetSent = false;\n\n    constructor(private router: Router,\n                kcAuthService: AuthenticationService) {\n        super(kcAuthService);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        this.authService.sessionData.subscribe(session => {\n            if (session && session.delayedCaptchas && session.delayedCaptchas['guest/auth/login']) {\n                this.showRecaptcha = true;\n            }\n        });\n\n        return Promise.resolve(true);\n    }\n\n    public recaptchaResolved(response) {\n        this.recaptchaResponse = response;\n    }\n\n    public login() {\n        this.loginError = false;\n        if (this.email && this.password) {\n            this.loading = true;\n            const clientTwoFactorData = localStorage.getItem('clientTwoFactorData');\n            return this.authService.login(this.email, this.password, clientTwoFactorData || null, (this.showRecaptcha ? this.recaptchaResponse : null))\n                .then((res: any) => {\n                    this.loading = false;\n                    if (res === 'REQUIRES_2FA') {\n                        this.twoFA = true;\n                        return true;\n                    } else if (res === 'ACTIVE_SESSION') {\n                        this.activeSession = true;\n                    } else {\n                        this.loggedIn.emit(res);\n                        if (!this.preventRedirect) {\n                            return this.router.navigate([this.loginRoute || '/']);\n                        }\n                    }\n                })\n                .catch(err => {\n                    this.authService.getSessionData();\n                    this.loginError = true;\n                    this.loading = false;\n                });\n        }\n    }\n\n    public sendForgottenPassword() {\n        this.authService.sendPasswordReset(this.forgottenEmail, this.recaptchaResponse).then(() => {\n            this.passwordResetSent = true;\n            setTimeout(() => {\n                window.location.reload();\n            }, 5000);\n        });\n    }\n\n    public closeActiveSession() {\n        this.authService.closeActiveSession().then(res => {\n            if (res === 'REQUIRES_2FA') {\n                this.activeSession = false;\n                this.twoFA = true;\n                return true;\n            } else if (res === 'ACTIVE_SESSION') {\n                this.activeSession = true;\n            } else {\n                this.activeSession = false;\n                if (!this.preventRedirect) {\n                    return this.router.navigate([this.loginRoute || '/']);\n                }\n            }\n        });\n    }\n\n    public checkUsername() {\n        this.authService.doesUserExist(this.email).then(res => {\n        });\n    }\n\n    public authenticate() {\n        this.loading = true;\n        if (this.twoFACode) {\n            return this.authService.authenticateTwoFactor(this.twoFACode)\n                .then(clientTwoFactorData => {\n                    this.loading = false;\n                    if (clientTwoFactorData) {\n                        localStorage.setItem('clientTwoFactorData', String(clientTwoFactorData));\n                    }\n                    this.loggedIn.emit(clientTwoFactorData);\n                    if (!this.preventRedirect) {\n                        return this.router.navigate([this.loginRoute || '/']);\n                    }\n                })\n                .catch(error => {\n                    this.authService.getSessionData();\n                    this.twoFAError = true;\n                    this.loading = false;\n                    return error;\n                });\n        }\n    }\n\n}\n","<div class=\"login\">\n\n    <div class=\"login-container\" *ngIf=\"!twoFA && !activeSession && !forgottenPassword\">\n\n        <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Sign in to your account</h2>\n\n        <label>Enter your username or email address</label>\n        <input type=\"text\" placeholder=\"Username\" name=\"email\" [(ngModel)]=\"email\" required\n               (change)=\"checkUsername()\">\n\n        <label>Enter your password</label>\n        <input type=\"password\" placeholder=\"Password\" name=\"password\" [(ngModel)]=\"password\"\n               (keyup.enter)=\"login()\" required>\n\n        <p class=\"error\" *ngIf=\"loginError\">Email or password incorrect, please check and try again.</p>\n\n        <re-captcha class=\"mt-8\" *ngIf=\"showRecaptcha\" (resolved)=\"recaptchaResolved($event)\"\n                    [siteKey]=\"recaptchaKey\"></re-captcha>\n\n        <button\n            class=\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\"\n            *ngIf=\"!loading\" (click)=\"login()\"\n            [disabled]=\"!email || !password\">Sign in\n        </button>\n\n        <a class=\"text-center text-secondary mt-4 cursor-pointer hover:underline\"\n           (click)=\"forgottenPassword = true\">I've forgotten my password</a>\n    </div>\n\n    <div class=\"login-container\" *ngIf=\"forgottenPassword\">\n\n        <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Forgotten Password\n        </h2>\n\n        <ng-template [ngIf]=\"!passwordResetSent\">\n            <label>Enter your username or email address</label>\n            <input type=\"text\" placeholder=\"Email address\" name=\"forgottenEmail\" [(ngModel)]=\"forgottenEmail\" required>\n\n            <re-captcha class=\"mt-8\" (resolved)=\"recaptchaResolved($event)\"\n                        [siteKey]=\"recaptchaKey\"></re-captcha>\n\n            <button\n                class=\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-secondary focus:outline-none\"\n                (click)=\"sendForgottenPassword()\" [disabled]=\"!forgottenEmail\">\n                Request Password Reset\n            </button>\n        </ng-template>\n\n        <div *ngIf=\"passwordResetSent\" class=\"py-8 flex items-center justify-center\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-12 w-12 text-secondary mr-4\" fill=\"none\"\n                 viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n            </svg>\n            <div class=\"font-medium text-lg\">Password reset has been requested.</div>\n        </div>\n\n        <a class=\"justify-center text-primary mt-4 cursor-pointer hover:underline flex items-center\"\n           (click)=\"forgottenPassword = false; passwordResetSent = false\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"\n                 stroke=\"currentColor\" stroke-width=\"2\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11 17l-5-5m0 0l5-5m-5 5h12\"/>\n            </svg>\n            Back to login</a>\n    </div>\n\n    <div class=\"two-fa-container\" *ngIf=\"activeSession\">\n        <p class=\"text-center\">We have detected other active logged in sessions for your user account. To continue with\n            this login and terminate any other active sessions please click the button below.</p>\n\n        <button\n            class=\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-danger focus:outline-none\"\n            (click)=\"closeActiveSession()\">Close my other sessions and\n            continue\n        </button>\n    </div>\n\n    <div class=\"two-fa-container\" *ngIf=\"twoFA\">\n        <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Two Factor Authentication</h2>\n\n        <p>Enter your second factor authentication code.</p>\n\n        <input placeholder=\"Verification code\" [(ngModel)]=\"twoFACode\"\n               (keyup.enter)=\"authenticate()\">\n\n        <p class=\"error py-4\" *ngIf=\"twoFAError\">Invalid code, please try again.</p>\n\n        <button\n            class=\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\"\n            *ngIf=\"!loading\" (click)=\"authenticate()\"\n            [disabled]=\"!twoFACode\">Login\n        </button>\n\n    </div>\n\n</div>\n","import { Injectable } from '@angular/core';\nimport { KinibindRequestService } from 'ng-kinibind';\nimport { KiniAuthModuleConfig } from '../../ng-kiniauth.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContactService {\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig) {\n    }\n\n    public getContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact', {\n            params: {\n                contactId\n            }\n        }).toPromise();\n    }\n\n    public getContacts() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/contacts').toPromise();\n    }\n\n    public setDefaultContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/default', {\n            params: {\n                contactId: contactId\n            }\n        }).toPromise();\n    }\n\n    public deleteContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/delete', {\n            params: {\n                contactId: contactId\n            }\n        }).toPromise();\n    }\n}\n","import { Component, EventEmitter, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { KinibindModel, KinibindRequestService } from 'ng-kinibind';\nimport { ContactService } from '../../services/contact.service';\n\n@Component({\n    selector: 'ka-address-book',\n    templateUrl: './address-book.component.html',\n    styleUrls: ['./address-book.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddressBookComponent implements OnInit {\n\n    @Input() editContactURL: string;\n    @Input() deleteContactURL: string;\n    @Input() defaultContactURL: string;\n    @Input() source: string;\n\n    public contacts: KinibindModel = new KinibindModel();\n    public reload: EventEmitter<boolean> = new EventEmitter<boolean>();\n    public contactLoading;\n\n    constructor(private contactService: ContactService,\n                private kbRequest: KinibindRequestService) {\n    }\n\n    ngOnInit() {\n        this.contactService.getContacts().then(contacts => {\n            this.contacts.data = contacts;\n        });\n    }\n\n    public deleteContact(contactId) {\n        const message = 'Are you sure you would like to delete this contact?';\n        if (window.confirm(message)) {\n            return this.contactService.deleteContact(contactId).then(() => {\n                this.reload.next(true);\n            });\n        }\n    }\n\n    public makeDefault(contactId) {\n        return this.contactService.setDefaultContact(contactId).then(() => {\n            this.reload.next(true);\n        });\n    }\n\n}\n","<div class=\"contacts-wrapper\">\n\n    <div class=\"contact-block new\" [routerLink]=\"[editContactURL]\">\n        <span style=\"font-size: 2rem\"><b>+</b></span>\n        <span>New Contact</span>\n    </div>\n\n    <div class=\"contact-block existing\" *ngFor=\"let contact of contacts.data; let i = index\">\n        <div class=\"contact-loading\" *ngIf=\"contactLoading === i\">\n            <span style=\"color: white\">loading...</span>\n        </div>\n\n        <div class=\"flex align-center justify-between\" style=\"width: 100%\">\n            <p class=\"m0\"><strong>{{contact.name}}</strong></p>\n            <a class=\"delete-method\" (click)=\"deleteContact(contact.id)\" style=\"text-decoration: none\">\n                &#10005;\n            </a>\n        </div>\n\n        <p [innerHTML]=\"contact.htmlAddressLinesString\"></p>\n        <p style=\"margin-bottom: 0\"><strong>Telephone: </strong>{{contact.telephoneNumber}}</p>\n        <p><strong>Email: </strong>{{contact.emailAddress}}</p>\n\n        <div style=\"width: 100%\" class=\"flex align-center justify-between\">\n            <p class=\"flex align-center confirm1 m0\" *ngIf=\"contact.defaultContact\">\n                <span>&#10004;</span>&nbsp;&nbsp;Default contact\n            </p>\n            <button class=\"but butsm\" *ngIf=\"!contact.defaultContact\"\n                    (click)=\"makeDefault(contact.id)\">\n                Make Default\n            </button>\n            <a class=\"edit\" [routerLink]=\"[editContactURL + '/' + contact.id]\">\n                Edit\n            </a>\n        </div>\n\n    </div>\n\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { KinibindModel, KinibindRequestService } from 'ng-kinibind';\nimport { Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\nimport { Location } from '@angular/common';\nimport { ContactService } from '../../services/contact.service';\n\n@Component({\n    selector: 'ka-contact-details',\n    templateUrl: './contact-details.component.html',\n    styleUrls: ['./contact-details.component.sass']\n})\nexport class ContactDetailsComponent implements OnInit {\n\n    @Input() contactId: any;\n    @Input() savedRoute: any;\n    @Input() readOnlyAddress = true;\n    @Input() hiddenFields: any = [];\n\n    // @ViewChild('contactForm') public contactForm: NgForm;\n\n    @Output() loaded: EventEmitter<any> = new EventEmitter<any>();\n    @Output() contactSaved: EventEmitter<any> = new EventEmitter<any>();\n\n    public contact: KinibindModel = new KinibindModel();\n    public countries = [];\n\n    constructor(private kbRequest: KinibindRequestService,\n                private location: Location,\n                private router: Router,\n                private contactService: ContactService) {\n\n    }\n\n    ngOnInit() {\n        this.contactService.getContact(this.contactId).then(contact => {\n            this.contact.data = contact;\n        });\n\n        this.setCountries();\n    }\n\n    public saved() {\n        if (this.savedRoute) {\n            if (this.savedRoute === 'BACK') {\n                this.location.back();\n            } else {\n                this.router.navigate([this.savedRoute]);\n            }\n        } else {\n            this.contactSaved.emit(this.contact.data);\n        }\n    }\n\n    private setCountries() {\n        this.countries = [\n            {\"name\": \"United Kingdom\", \"code\": \"GB\"},\n            {\"name\": \"United States\", \"code\": \"US\"},\n            {\"name\": \"Afghanistan\", \"code\": \"AF\"},\n            {\"name\": \"Åland Islands\", \"code\": \"AX\"},\n            {\"name\": \"Albania\", \"code\": \"AL\"},\n            {\"name\": \"Algeria\", \"code\": \"DZ\"},\n            {\"name\": \"American Samoa\", \"code\": \"AS\"},\n            {\"name\": \"AndorrA\", \"code\": \"AD\"},\n            {\"name\": \"Angola\", \"code\": \"AO\"},\n            {\"name\": \"Anguilla\", \"code\": \"AI\"},\n            {\"name\": \"Antarctica\", \"code\": \"AQ\"},\n            {\"name\": \"Antigua and Barbuda\", \"code\": \"AG\"},\n            {\"name\": \"Argentina\", \"code\": \"AR\"},\n            {\"name\": \"Armenia\", \"code\": \"AM\"},\n            {\"name\": \"Aruba\", \"code\": \"AW\"},\n            {\"name\": \"Australia\", \"code\": \"AU\"},\n            {\"name\": \"Austria\", \"code\": \"AT\"},\n            {\"name\": \"Azerbaijan\", \"code\": \"AZ\"},\n            {\"name\": \"Bahamas\", \"code\": \"BS\"},\n            {\"name\": \"Bahrain\", \"code\": \"BH\"},\n            {\"name\": \"Bangladesh\", \"code\": \"BD\"},\n            {\"name\": \"Barbados\", \"code\": \"BB\"},\n            {\"name\": \"Belarus\", \"code\": \"BY\"},\n            {\"name\": \"Belgium\", \"code\": \"BE\"},\n            {\"name\": \"Belize\", \"code\": \"BZ\"},\n            {\"name\": \"Benin\", \"code\": \"BJ\"},\n            {\"name\": \"Bermuda\", \"code\": \"BM\"},\n            {\"name\": \"Bhutan\", \"code\": \"BT\"},\n            {\"name\": \"Bolivia\", \"code\": \"BO\"},\n            {\"name\": \"Bosnia and Herzegovina\", \"code\": \"BA\"},\n            {\"name\": \"Botswana\", \"code\": \"BW\"},\n            {\"name\": \"Bouvet Island\", \"code\": \"BV\"},\n            {\"name\": \"Brazil\", \"code\": \"BR\"},\n            {\"name\": \"British Indian Ocean Territory\", \"code\": \"IO\"},\n            {\"name\": \"Brunei Darussalam\", \"code\": \"BN\"},\n            {\"name\": \"Bulgaria\", \"code\": \"BG\"},\n            {\"name\": \"Burkina Faso\", \"code\": \"BF\"},\n            {\"name\": \"Burundi\", \"code\": \"BI\"},\n            {\"name\": \"Cambodia\", \"code\": \"KH\"},\n            {\"name\": \"Cameroon\", \"code\": \"CM\"},\n            {\"name\": \"Canada\", \"code\": \"CA\"},\n            {\"name\": \"Cape Verde\", \"code\": \"CV\"},\n            {\"name\": \"Cayman Islands\", \"code\": \"KY\"},\n            {\"name\": \"Central African Republic\", \"code\": \"CF\"},\n            {\"name\": \"Chad\", \"code\": \"TD\"},\n            {\"name\": \"Chile\", \"code\": \"CL\"},\n            {\"name\": \"China\", \"code\": \"CN\"},\n            {\"name\": \"Christmas Island\", \"code\": \"CX\"},\n            {\"name\": \"Cocos (Keeling) Islands\", \"code\": \"CC\"},\n            {\"name\": \"Colombia\", \"code\": \"CO\"},\n            {\"name\": \"Comoros\", \"code\": \"KM\"},\n            {\"name\": \"Congo\", \"code\": \"CG\"},\n            {\"name\": \"Congo, The Democratic Republic of the\", \"code\": \"CD\"},\n            {\"name\": \"Cook Islands\", \"code\": \"CK\"},\n            {\"name\": \"Costa Rica\", \"code\": \"CR\"},\n            {\"name\": \"Cote D'Ivoire\", \"code\": \"CI\"},\n            {\"name\": \"Croatia\", \"code\": \"HR\"},\n            {\"name\": \"Cuba\", \"code\": \"CU\"},\n            {\"name\": \"Cyprus\", \"code\": \"CY\"},\n            {\"name\": \"Czech Republic\", \"code\": \"CZ\"},\n            {\"name\": \"Denmark\", \"code\": \"DK\"},\n            {\"name\": \"Djibouti\", \"code\": \"DJ\"},\n            {\"name\": \"Dominica\", \"code\": \"DM\"},\n            {\"name\": \"Dominican Republic\", \"code\": \"DO\"},\n            {\"name\": \"Ecuador\", \"code\": \"EC\"},\n            {\"name\": \"Egypt\", \"code\": \"EG\"},\n            {\"name\": \"El Salvador\", \"code\": \"SV\"},\n            {\"name\": \"Equatorial Guinea\", \"code\": \"GQ\"},\n            {\"name\": \"Eritrea\", \"code\": \"ER\"},\n            {\"name\": \"Estonia\", \"code\": \"EE\"},\n            {\"name\": \"Ethiopia\", \"code\": \"ET\"},\n            {\"name\": \"Falkland Islands (Malvinas)\", \"code\": \"FK\"},\n            {\"name\": \"Faroe Islands\", \"code\": \"FO\"},\n            {\"name\": \"Fiji\", \"code\": \"FJ\"},\n            {\"name\": \"Finland\", \"code\": \"FI\"},\n            {\"name\": \"France\", \"code\": \"FR\"},\n            {\"name\": \"French Guiana\", \"code\": \"GF\"},\n            {\"name\": \"French Polynesia\", \"code\": \"PF\"},\n            {\"name\": \"French Southern Territories\", \"code\": \"TF\"},\n            {\"name\": \"Gabon\", \"code\": \"GA\"},\n            {\"name\": \"Gambia\", \"code\": \"GM\"},\n            {\"name\": \"Georgia\", \"code\": \"GE\"},\n            {\"name\": \"Germany\", \"code\": \"DE\"},\n            {\"name\": \"Ghana\", \"code\": \"GH\"},\n            {\"name\": \"Gibraltar\", \"code\": \"GI\"},\n            {\"name\": \"Greece\", \"code\": \"GR\"},\n            {\"name\": \"Greenland\", \"code\": \"GL\"},\n            {\"name\": \"Grenada\", \"code\": \"GD\"},\n            {\"name\": \"Guadeloupe\", \"code\": \"GP\"},\n            {\"name\": \"Guam\", \"code\": \"GU\"},\n            {\"name\": \"Guatemala\", \"code\": \"GT\"},\n            {\"name\": \"Guernsey\", \"code\": \"GG\"},\n            {\"name\": \"Guinea\", \"code\": \"GN\"},\n            {\"name\": \"Guinea-Bissau\", \"code\": \"GW\"},\n            {\"name\": \"Guyana\", \"code\": \"GY\"},\n            {\"name\": \"Haiti\", \"code\": \"HT\"},\n            {\"name\": \"Heard Island and Mcdonald Islands\", \"code\": \"HM\"},\n            {\"name\": \"Holy See (Vatican City State)\", \"code\": \"VA\"},\n            {\"name\": \"Honduras\", \"code\": \"HN\"},\n            {\"name\": \"Hong Kong\", \"code\": \"HK\"},\n            {\"name\": \"Hungary\", \"code\": \"HU\"},\n            {\"name\": \"Iceland\", \"code\": \"IS\"},\n            {\"name\": \"India\", \"code\": \"IN\"},\n            {\"name\": \"Indonesia\", \"code\": \"ID\"},\n            {\"name\": \"Iran, Islamic Republic Of\", \"code\": \"IR\"},\n            {\"name\": \"Iraq\", \"code\": \"IQ\"},\n            {\"name\": \"Ireland\", \"code\": \"IE\"},\n            {\"name\": \"Isle of Man\", \"code\": \"IM\"},\n            {\"name\": \"Israel\", \"code\": \"IL\"},\n            {\"name\": \"Italy\", \"code\": \"IT\"},\n            {\"name\": \"Jamaica\", \"code\": \"JM\"},\n            {\"name\": \"Japan\", \"code\": \"JP\"},\n            {\"name\": \"Jersey\", \"code\": \"JE\"},\n            {\"name\": \"Jordan\", \"code\": \"JO\"},\n            {\"name\": \"Kazakhstan\", \"code\": \"KZ\"},\n            {\"name\": \"Kenya\", \"code\": \"KE\"},\n            {\"name\": \"Kiribati\", \"code\": \"KI\"},\n            {\"name\": \"Korea, Democratic People's Republic of\", \"code\": \"KP\"},\n            {\"name\": \"Korea, Republic of\", \"code\": \"KR\"},\n            {\"name\": \"Kuwait\", \"code\": \"KW\"},\n            {\"name\": \"Kyrgyzstan\", \"code\": \"KG\"},\n            {\"name\": \"Lao People's Democratic Republic\", \"code\": \"LA\"},\n            {\"name\": \"Latvia\", \"code\": \"LV\"},\n            {\"name\": \"Lebanon\", \"code\": \"LB\"},\n            {\"name\": \"Lesotho\", \"code\": \"LS\"},\n            {\"name\": \"Liberia\", \"code\": \"LR\"},\n            {\"name\": \"Libyan Arab Jamahiriya\", \"code\": \"LY\"},\n            {\"name\": \"Liechtenstein\", \"code\": \"LI\"},\n            {\"name\": \"Lithuania\", \"code\": \"LT\"},\n            {\"name\": \"Luxembourg\", \"code\": \"LU\"},\n            {\"name\": \"Macao\", \"code\": \"MO\"},\n            {\"name\": \"Macedonia, The Former Yugoslav Republic of\", \"code\": \"MK\"},\n            {\"name\": \"Madagascar\", \"code\": \"MG\"},\n            {\"name\": \"Malawi\", \"code\": \"MW\"},\n            {\"name\": \"Malaysia\", \"code\": \"MY\"},\n            {\"name\": \"Maldives\", \"code\": \"MV\"},\n            {\"name\": \"Mali\", \"code\": \"ML\"},\n            {\"name\": \"Malta\", \"code\": \"MT\"},\n            {\"name\": \"Marshall Islands\", \"code\": \"MH\"},\n            {\"name\": \"Martinique\", \"code\": \"MQ\"},\n            {\"name\": \"Mauritania\", \"code\": \"MR\"},\n            {\"name\": \"Mauritius\", \"code\": \"MU\"},\n            {\"name\": \"Mayotte\", \"code\": \"YT\"},\n            {\"name\": \"Mexico\", \"code\": \"MX\"},\n            {\"name\": \"Micronesia, Federated States of\", \"code\": \"FM\"},\n            {\"name\": \"Moldova, Republic of\", \"code\": \"MD\"},\n            {\"name\": \"Monaco\", \"code\": \"MC\"},\n            {\"name\": \"Mongolia\", \"code\": \"MN\"},\n            {\"name\": \"Montserrat\", \"code\": \"MS\"},\n            {\"name\": \"Morocco\", \"code\": \"MA\"},\n            {\"name\": \"Mozambique\", \"code\": \"MZ\"},\n            {\"name\": \"Myanmar\", \"code\": \"MM\"},\n            {\"name\": \"Namibia\", \"code\": \"NA\"},\n            {\"name\": \"Nauru\", \"code\": \"NR\"},\n            {\"name\": \"Nepal\", \"code\": \"NP\"},\n            {\"name\": \"Netherlands\", \"code\": \"NL\"},\n            {\"name\": \"Netherlands Antilles\", \"code\": \"AN\"},\n            {\"name\": \"New Caledonia\", \"code\": \"NC\"},\n            {\"name\": \"New Zealand\", \"code\": \"NZ\"},\n            {\"name\": \"Nicaragua\", \"code\": \"NI\"},\n            {\"name\": \"Niger\", \"code\": \"NE\"},\n            {\"name\": \"Nigeria\", \"code\": \"NG\"},\n            {\"name\": \"Niue\", \"code\": \"NU\"},\n            {\"name\": \"Norfolk Island\", \"code\": \"NF\"},\n            {\"name\": \"Northern Mariana Islands\", \"code\": \"MP\"},\n            {\"name\": \"Norway\", \"code\": \"NO\"},\n            {\"name\": \"Oman\", \"code\": \"OM\"},\n            {\"name\": \"Pakistan\", \"code\": \"PK\"},\n            {\"name\": \"Palau\", \"code\": \"PW\"},\n            {\"name\": \"Palestinian Territory, Occupied\", \"code\": \"PS\"},\n            {\"name\": \"Panama\", \"code\": \"PA\"},\n            {\"name\": \"Papua New Guinea\", \"code\": \"PG\"},\n            {\"name\": \"Paraguay\", \"code\": \"PY\"},\n            {\"name\": \"Peru\", \"code\": \"PE\"},\n            {\"name\": \"Philippines\", \"code\": \"PH\"},\n            {\"name\": \"Pitcairn\", \"code\": \"PN\"},\n            {\"name\": \"Poland\", \"code\": \"PL\"},\n            {\"name\": \"Portugal\", \"code\": \"PT\"},\n            {\"name\": \"Puerto Rico\", \"code\": \"PR\"},\n            {\"name\": \"Qatar\", \"code\": \"QA\"},\n            {\"name\": \"Reunion\", \"code\": \"RE\"},\n            {\"name\": \"Romania\", \"code\": \"RO\"},\n            {\"name\": \"Russian Federation\", \"code\": \"RU\"},\n            {\"name\": \"RWANDA\", \"code\": \"RW\"},\n            {\"name\": \"Saint Helena\", \"code\": \"SH\"},\n            {\"name\": \"Saint Kitts and Nevis\", \"code\": \"KN\"},\n            {\"name\": \"Saint Lucia\", \"code\": \"LC\"},\n            {\"name\": \"Saint Pierre and Miquelon\", \"code\": \"PM\"},\n            {\"name\": \"Saint Vincent and the Grenadines\", \"code\": \"VC\"},\n            {\"name\": \"Samoa\", \"code\": \"WS\"},\n            {\"name\": \"San Marino\", \"code\": \"SM\"},\n            {\"name\": \"Sao Tome and Principe\", \"code\": \"ST\"},\n            {\"name\": \"Saudi Arabia\", \"code\": \"SA\"},\n            {\"name\": \"Senegal\", \"code\": \"SN\"},\n            {\"name\": \"Serbia and Montenegro\", \"code\": \"CS\"},\n            {\"name\": \"Seychelles\", \"code\": \"SC\"},\n            {\"name\": \"Sierra Leone\", \"code\": \"SL\"},\n            {\"name\": \"Singapore\", \"code\": \"SG\"},\n            {\"name\": \"Slovakia\", \"code\": \"SK\"},\n            {\"name\": \"Slovenia\", \"code\": \"SI\"},\n            {\"name\": \"Solomon Islands\", \"code\": \"SB\"},\n            {\"name\": \"Somalia\", \"code\": \"SO\"},\n            {\"name\": \"South Africa\", \"code\": \"ZA\"},\n            {\"name\": \"South Georgia and the South Sandwich Islands\", \"code\": \"GS\"},\n            {\"name\": \"Spain\", \"code\": \"ES\"},\n            {\"name\": \"Sri Lanka\", \"code\": \"LK\"},\n            {\"name\": \"Sudan\", \"code\": \"SD\"},\n            {\"name\": \"Suriname\", \"code\": \"SR\"},\n            {\"name\": \"Svalbard and Jan Mayen\", \"code\": \"SJ\"},\n            {\"name\": \"Swaziland\", \"code\": \"SZ\"},\n            {\"name\": \"Sweden\", \"code\": \"SE\"},\n            {\"name\": \"Switzerland\", \"code\": \"CH\"},\n            {\"name\": \"Syrian Arab Republic\", \"code\": \"SY\"},\n            {\"name\": \"Taiwan, Province of China\", \"code\": \"TW\"},\n            {\"name\": \"Tajikistan\", \"code\": \"TJ\"},\n            {\"name\": \"Tanzania, United Republic of\", \"code\": \"TZ\"},\n            {\"name\": \"Thailand\", \"code\": \"TH\"},\n            {\"name\": \"Timor-Leste\", \"code\": \"TL\"},\n            {\"name\": \"Togo\", \"code\": \"TG\"},\n            {\"name\": \"Tokelau\", \"code\": \"TK\"},\n            {\"name\": \"Tonga\", \"code\": \"TO\"},\n            {\"name\": \"Trinidad and Tobago\", \"code\": \"TT\"},\n            {\"name\": \"Tunisia\", \"code\": \"TN\"},\n            {\"name\": \"Turkey\", \"code\": \"TR\"},\n            {\"name\": \"Turkmenistan\", \"code\": \"TM\"},\n            {\"name\": \"Turks and Caicos Islands\", \"code\": \"TC\"},\n            {\"name\": \"Tuvalu\", \"code\": \"TV\"},\n            {\"name\": \"Uganda\", \"code\": \"UG\"},\n            {\"name\": \"Ukraine\", \"code\": \"UA\"},\n            {\"name\": \"United Arab Emirates\", \"code\": \"AE\"},\n            {\"name\": \"United States Minor Outlying Islands\", \"code\": \"UM\"},\n            {\"name\": \"Uruguay\", \"code\": \"UY\"},\n            {\"name\": \"Uzbekistan\", \"code\": \"UZ\"},\n            {\"name\": \"Vanuatu\", \"code\": \"VU\"},\n            {\"name\": \"Venezuela\", \"code\": \"VE\"},\n            {\"name\": \"Viet Nam\", \"code\": \"VN\"},\n            {\"name\": \"Virgin Islands, British\", \"code\": \"VG\"},\n            {\"name\": \"Virgin Islands, U.S.\", \"code\": \"VI\"},\n            {\"name\": \"Wallis and Futuna\", \"code\": \"WF\"},\n            {\"name\": \"Western Sahara\", \"code\": \"EH\"},\n            {\"name\": \"Yemen\", \"code\": \"YE\"},\n            {\"name\": \"Zambia\", \"code\": \"ZM\"},\n            {\"name\": \"Zimbabwe\", \"code\": \"ZW\"}\n        ];\n    }\n\n}\n","<!--<form class=\"px2 py2 whitebk mb1\" #contactForm=\"ngForm\" (ngSubmit)=\"saveContact()\">-->\n\n    <div *ngIf=\"contact.data\">\n\n        <label>\n            <input class=\"full\" type=\"text\" name=\"name\" [(ngModel)]=\"contact.data.name\" required>\n            <span>Full Name <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n        </label>\n\n        <label>\n            <input class=\"full\" type=\"text\" name=\"organisation\" [(ngModel)]=\"contact.data.organisation\">\n            Name of Business / Organisation\n        </label>\n\n        <label>\n            <input type=\"text\" class=\"full\" name=\"addressStreet1\"\n                   [(ngModel)]=\"contact.data.street1\" required>\n            <span>Address 1 <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n        </label>\n\n        <label>\n            <input type=\"text\" class=\"full\" name=\"addressStreet2\"\n                   [(ngModel)]=\"contact.data.street2\">\n            Address 2\n        </label>\n\n        <div class=\"flex align-center flex-wrap\">\n            <label>\n                <input type=\"text\" class=\"full\" name=\"addressCity\"\n                       [(ngModel)]=\"contact.data.city\" required>\n                <span>Town / City <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n            </label>\n\n            <label>\n                <input type=\"text\" class=\"full\" name=\"addressCounty\"\n                       [(ngModel)]=\"contact.data.county\" required>\n                <span>State / County / Region <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n            </label>\n        </div>\n\n        <label>\n            <select name=\"country\" required [(ngModel)]=\"contact.data.countryCode\">\n                <option *ngFor=\"let country of countries\" [value]=\"country.code\">\n                    {{country.name}}\n                </option>\n            </select>\n            <span>Country <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n        </label>\n\n        <label>\n            <input type=\"text\" name=\"postcode\"\n                   [(ngModel)]=\"contact.data.postcode\" required>\n            <span>Postcode <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n        </label>\n\n        <label>\n            <input type=\"number\" name=\"telephoneNumber\" [(ngModel)]=\"contact.data.telephoneNumber\">\n            Telephone Number\n        </label>\n\n    </div>\n\n    <div class=\"flex justify-end mt2\">\n<!--        <button type=\"submit\" class=\"mt2 but butsm\" [disabled]=\"contactForm.invalid\">-->\n<!--            SAVE CHANGES-->\n<!--        </button>-->\n    </div>\n\n<!--</form>-->\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { KinibindRequestService } from 'ng-kinibind';\n\n@Directive({\n    selector: '[netCountryCodes]',\n    exportAs: 'countryCodes'\n})\nexport class CountryCodesDirective implements OnInit {\n\n    private searchURL = '/internal/application/countryCodes';\n\n    public results: any[] = [];\n\n    @Input() promotedCountries: string;\n    @Input() valueFormat: string;\n    @Input() onInit: boolean;\n\n    constructor(private kbRequest: KinibindRequestService) {\n    }\n\n    public search() {\n        const params: any = {};\n\n        if (this.promotedCountries) {\n            params.promotedCountries = this.promotedCountries;\n        }\n\n        if (this.valueFormat) {\n            params.valueFormat = this.valueFormat;\n        }\n\n        return this.kbRequest.makePostRequest(this.searchURL, params).toPromise()\n            .then((results: any) => this.results = results);\n    }\n\n    ngOnInit(): void {\n        if (this.onInit) {\n            this.search();\n        }\n    }\n\n}\n","import { Directive, Input } from '@angular/core';\nimport { KinibindRequestService } from 'ng-kinibind';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Directive({\n    selector: '[netPostcodeLookup]',\n    exportAs: 'postcodeLookup'\n})\nexport class PostcodeLookupDirective {\n\n    private searchURL = '/internal/application/searchAddress';\n\n    public results: any[] = [];\n    public match = false;\n    public complete = false;\n\n    @Input() postcode: Observable<string>;\n    @Input() country: Observable<string>;\n\n    constructor(private kbRequest: KinibindRequestService) {\n    }\n\n    public search(postcode, country) {\n        this.results = [];\n        this.complete = false;\n        return this.kbRequest.makePostRequest(this.searchURL,\n            { term: postcode, countryCode: country }).toPromise()\n            .then((results: any) => {\n                this.results = results;\n                this.complete = true;\n            });\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {KinibindRequestService} from 'ng-kinibind';\nimport {KiniAuthModuleConfig} from '../../ng-kiniauth.module';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\nimport {AuthenticationService} from './authentication.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig,\n                private authService: AuthenticationService) {\n    }\n\n    public getUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/summary', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public createAdminUser(emailAddress, rawPassword?, name?) {\n        let password = rawPassword;\n        if (rawPassword) {\n            password = this.authService.getHashedPassword(rawPassword, emailAddress, true);\n        }\n\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/admin',\n            _.omitBy({emailAddress, password, name}, _.isNil)\n        ).toPromise();\n    }\n\n    public getUserExtended(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public getAccountUsers(searchString?, limit?, offset?) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/search', {\n            params: _.pickBy({searchString, limit, offset}, _.identity)\n        });\n    }\n\n    public getAllUserAccountRoles(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/roles', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public getAssignableRoles(userId, scope, filterString = '', offset = 0, limit = 10) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/assignableRoles', {\n            params: {userId, scope, filterString, offset, limit}\n        }).toPromise();\n    }\n\n    public updateUserScope(scopeObjects, userId) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + `/user/updateUserScope?userId=${userId}`,\n            scopeObjects).toPromise();\n    }\n\n    public removeUserFromAccount(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account/removeUser', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public requestPasswordReset(emailAddress) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/passwordReset', {\n            params: {emailAddress}\n        }).toPromise();\n    }\n\n    public unlockUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/unlock', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public suspendUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/suspend', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public getAccounts(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/accounts', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public switchAccount(accountId, userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/switchAccount', {\n            params: {accountId, userId}\n        }).toPromise();\n    }\n}\n","import {Component, Input, OnInit, ViewEncapsulation} from '@angular/core';\nimport {debounceTime, distinctUntilChanged, map, switchMap} from 'rxjs/operators';\nimport {BehaviorSubject, merge, Subject} from 'rxjs';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\nimport {UserService} from '../../services/user.service';\nimport {Router} from '@angular/router';\nimport {AuthenticationService} from '../../services/authentication.service';\n\n@Component({\n    selector: 'ka-account-users',\n    templateUrl: './account-users.component.html',\n    styleUrls: ['./account-users.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AccountUsersComponent implements OnInit {\n\n    @Input() userRoleRoute: string;\n    @Input() disableInvite: boolean;\n    @Input() createAdminUser: boolean;\n\n    public users: any[];\n    public searchText = new BehaviorSubject<string>('');\n    public limit = new BehaviorSubject<number>(10);\n    public offset = new BehaviorSubject<number>(0);\n    public pageIndex = 0;\n    public resultSize = 0;\n    public reloadUsers = new Subject();\n    public allSelected = false;\n    public selectionMade = false;\n    public lodash = _;\n    public passwordReset = false;\n    public userUnlocked = false;\n    public userSuspended = false;\n    public newAdminUser = false;\n    public newAdminEmail = '';\n    public newAdminPassword: string = null;\n    public newAdminAdded = false;\n\n    constructor(private userService: UserService,\n                private router: Router,\n                private authService: AuthenticationService) {\n    }\n\n    ngOnInit() {\n        merge(this.searchText, this.limit, this.offset, this.reloadUsers)\n            .pipe(\n                debounceTime(300),\n                distinctUntilChanged(),\n                switchMap(() =>\n                    this.getUsers()\n                )\n            )\n            .subscribe((users: any) => {\n                this.users = users;\n            });\n    }\n\n    public saveNewAdminUser() {\n        if (this.newAdminPassword && this.newAdminPassword.length < 8) {\n            return true;\n        }\n\n        return this.userService.createAdminUser(this.newAdminEmail, this.newAdminPassword || null, null)\n            .then(res => {\n                this.newAdminEmail = '';\n                this.newAdminPassword = null;\n                this.newAdminUser = false;\n                this.newAdminAdded = true;\n                this.reloadUsers.next(Date.now());\n                setTimeout(() => {\n                    this.newAdminAdded = false;\n                }, 3000);\n            });\n    }\n\n    public viewUser(user) {\n        if (user.status !== 'PENDING') {\n            const route = this.userRoleRoute ? this.userRoleRoute + '/' + user.id : user.id;\n            this.router.navigate([route]);\n        }\n    }\n\n    public toggleSelectAllUsers() {\n        this.allSelected = !this.allSelected;\n        this.selectionMade = this.allSelected;\n        this.users = this.lodash.map(this.users, user => {\n            user.selected = this.allSelected;\n            return user;\n        });\n    }\n\n    public toggleUsersSelected(user) {\n        user.selected = !user.selected;\n        this.selectionMade = this.lodash.some(this.users, 'selected');\n    }\n\n    public search(searchTerm: string) {\n        this.searchText.next(searchTerm);\n    }\n\n    public updatePage(pageEvent) {\n        const limit = this.limit.getValue();\n\n        if (pageEvent.pageSize !== limit) {\n            this.offset.next(0);\n            this.limit.next(pageEvent.pageSize);\n            this.pageIndex = 0;\n        } else {\n            this.offset.next(pageEvent.pageSize * (pageEvent.pageIndex));\n            this.pageIndex = pageEvent.pageIndex;\n        }\n    }\n\n    public removeUser(user) {\n        const message = 'Are you sure you would like to remove this user?';\n        if (window.confirm(message)) {\n            this.userService.removeUserFromAccount(user.id).then(() => {\n                this.reloadUsers.next(Date.now());\n            });\n        }\n    }\n\n    public resetPassword(user) {\n        this.authService.sendPasswordReset(user.emailAddress, null).then(() => {\n            this.passwordReset = true;\n            setTimeout(() => {\n                this.passwordReset = false;\n            }, 3000);\n        });\n    }\n\n    public unlockUser(userId) {\n        this.userService.unlockUser(userId).then(() => {\n            this.userUnlocked = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.userUnlocked = false;\n            }, 3000);\n        });\n    }\n\n    public suspendUser(userId) {\n        this.userService.suspendUser(userId).then(() => {\n            this.userSuspended = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.userSuspended = false;\n            }, 3000);\n        });\n    }\n\n    private getUsers() {\n        return this.userService.getAccountUsers(\n            this.searchText.getValue(),\n            this.limit.getValue(),\n            this.offset.getValue()\n        ).pipe(map((data: any) => {\n            this.resultSize = data.totalRecords;\n            return data.results;\n        }));\n    }\n\n}\n","<div class=\"p-6 bg-white border-b border-gray-200\">\n    <div class=\"md:flex md:items-center md:justify-between md:space-x-5\">\n        <div class=\"flex items-start flex-1\">\n            <div class=\"pt-1.5\">\n                <h1 class=\"text-2xl font-bold text-gray-900\">Account Users</h1>\n                <p class=\"text-sm font-medium text-gray-500\">\n                    A list of all the users currently assigned to your account.\n                </p>\n            </div>\n        </div>\n        <div class=\"mt-6 flex flex-col-reverse justify-stretch\">\n            <button type=\"button\" [routerLink]=\"['/invite-user']\" *ngIf=\"!disableInvite\"\n                    class=\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\">\n                Invite User\n            </button>\n\n            <button type=\"button\" *ngIf=\"createAdminUser\" (click)=\"newAdminUser = true;\"\n                    class=\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\">\n                Create Admin User\n            </button>\n        </div>\n    </div>\n</div>\n<div class=\"px-4 sm:px-6 lg:px-8 mt-0\">\n    <div class=\"flex flex-col\">\n        <div class=\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\">\n            <div class=\"inline-block min-w-full py-2 align-middle\">\n\n                <div *ngIf=\"newAdminAdded\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\"\n                         viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                    </svg>\n                    <div class=\"text-lg\">Admin user successfully added.</div>\n                </div>\n\n                <div *ngIf=\"newAdminUser\" class=\"px-6 pb-6 mt-4 flex flex-col border-b\">\n                    <p><b>Add New Admin User</b></p>\n                    <input type=\"email\" [(ngModel)]=\"newAdminEmail\" placeholder=\"Enter email address for user\">\n                    <input class=\"mt-2\" type=\"password\" [(ngModel)]=\"newAdminPassword\"\n                           placeholder=\"Enter password for user\"\n                           [ngClass]=\"{'border border-red-600': newAdminPassword && newAdminPassword.length < 8}\">\n                    <div *ngIf=\"newAdminPassword && newAdminPassword.length < 8\">\n                        <small class=\"text-red-600\">Password must be at least 8 characters long.</small>\n                    </div>\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\n                        email.</small></div>\n                    <div class=\"flex items-center justify-between my-4\">\n                        <div></div>\n                        <button (click)=\"saveNewAdminUser()\"\n                                class=\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\">\n                            Save New User\n                        </button>\n                    </div>\n                </div>\n\n                <div *ngIf=\"passwordReset\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    <div class=\"text-lg\">Password reset email sent. Please check your email for further instructions</div>\n                </div>\n\n                <div *ngIf=\"userUnlocked\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-primary h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\" />\n                    </svg>\n                    <div class=\"text-lg\">This user has been successfully unlocked.</div>\n                </div>\n\n                <div *ngIf=\"userSuspended\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n                    </svg>\n                    <div class=\"text-lg\">This user has been suspended.</div>\n                </div>\n\n                <div class=\"mt-3 sm:mt-0 flex-1\">\n                    <label for=\"mobile-search-candidate\" class=\"sr-only\">Search</label>\n                    <div class=\"flex\">\n                        <div class=\"relative flex-grow focus-within:z-10\">\n                            <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                                <svg class=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\"\n                                     viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                                    <path fill-rule=\"evenodd\"\n                                          d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                                          clip-rule=\"evenodd\"/>\n                                </svg>\n                            </div>\n                            <input type=\"text\" name=\"mobile-search-candidate\" id=\"mobile-search-candidate\"\n                                   class=\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\"\n                                   placeholder=\"Search users\"\n                                   (keyup)=\"searchText.next($event.target.value)\">\n                        </div>\n                    </div>\n                </div>\n                <table class=\"min-w-full border-separate bg-white\" style=\"border-spacing: 0\">\n                    <ng-template [ngIf]=\"users && users.length\">\n\n                        <thead class=\"bg-gray-100\">\n                        <tr>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Name\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Email\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Status\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\">\n                                <span class=\"sr-only\">Edit</span>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let user of users; let i = index\" class=\"hover:bg-gray-50 cursor-pointer\">\n                            <td (click)=\"viewUser(user)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\">\n                                {{user.name}}\n                            </td>\n                            <td (click)=\"viewUser(user)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                {{user.emailAddress}}\n                            </td>\n                            <td (click)=\"viewUser(user)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                <span [ngClass]=\"{'bg-success': user.status === 'ACTIVE', 'bg-primary': user.status === 'PENDING', 'bg-danger': user.status === 'SUSPENDED'}\"\n                                    class=\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\">\n                                    {{user.status.toLowerCase()}}</span>\n                            </td>\n                            <td class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                <div class=\"flex items-center justify-end\">\n                                    <button mat-button [matMenuTriggerFor]=\"menu\" color=\"primary\">\n                                        Actions\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\n                                    </button>\n                                    <mat-menu #menu=\"matMenu\">\n                                        <button mat-menu-item (click)=\"removeUser(user)\">Remove</button>\n                                        <button mat-menu-item (click)=\"resetPassword(user)\">Reset Password</button>\n                                        <button mat-menu-item (click)=\"unlockUser(user.id)\"\n                                                *ngIf=\"user.status === 'LOCKED' || user.status === 'SUSPENDED'\">Unlock\n                                        </button>\n                                        <button mat-menu-item (click)=\"suspendUser(user.id)\"\n                                                *ngIf=\"user.status !== 'SUSPENDED'\">\n                                            Suspend\n                                        </button>\n                                    </mat-menu>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"4\"\n                                class=\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\">\n                                <div class=\"paging-toolbar flex align-center justify-end\">\n                                    <mat-paginator class=\"user-paginator flex1 pl050 mb0\" [length]=\"resultSize\"\n                                                   [pageSize]=\"limit.getValue()\"\n                                                   [pageIndex]=\"pageIndex\"\n                                                   [pageSizeOptions]=\"[5, 10, 25, 100]\"\n                                                   (page)=\"updatePage($event)\">\n                                    </mat-paginator>\n                                </div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </ng-template>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { KinibindRequestService } from 'ng-kinibind';\nimport { KiniAuthModuleConfig } from '../../ng-kiniauth.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RoleService {\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig) {\n    }\n\n    public getScopeAccesses() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/role/scopeAccesses')\n            .toPromise();\n    }\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\n\n@Component({\n    selector: 'ka-edit-roles',\n    templateUrl: './edit-roles.component.html',\n    styleUrls: ['./edit-roles.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditRolesComponent implements OnInit {\n\n    @Input() scope: string;\n    @Input() scopeKey: string;\n    @Input() user: any;\n    @Input() updatedScopes: any;\n    @Input() hideApply: boolean;\n    @Input() userService;\n\n    @Output() closed: EventEmitter<any> = new EventEmitter<any>();\n    @Output() saved: EventEmitter<any> = new EventEmitter<any>();\n    @Output() updatedScopesChange: EventEmitter<any> = new EventEmitter<any>();\n\n    public assignableRoles: any[];\n    public _ = _;\n    public Object = Object;\n    public disabled = {};\n    public checked: any = {};\n    public loading = true;\n    public roles: any[] = [];\n    public errors = {};\n\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        if (!this.updatedScopes) {\n            this.updatedScopes = {};\n        }\n        if (this.scope) {\n            const userId = this.user ? this.user.id : null;\n            const promises = [\n                this.userService.getAssignableRoles(userId, this.scope),\n                this.loadUserRoles()\n            ];\n            Promise.all(promises).then(res => {\n                this.assignableRoles = res[0];\n                this.setInitialRoleState();\n                this.loading = false;\n            });\n        }\n    }\n\n    public updateRole(event, scopeId) {\n        // Reset the displayed errors at this point;\n        this.errors = {};\n        const checked = event.target.checked;\n        const owner = event.target.value === 'OWNER';\n        let roleIds: any[] = [];\n\n        if (owner) {\n            if (checked) {\n                roleIds = [null];\n            } else {\n                delete this.checked[scopeId].owner;\n                roleIds = this.setRoleIds(scopeId);\n            }\n\n            this.disabled[scopeId] = checked;\n        } else {\n            roleIds = this.setRoleIds(scopeId);\n        }\n\n        this.updatedScopes[scopeId] = {\n            scope: this.scope,\n            scopeId,\n            roleIds: _.uniq(roleIds)\n        };\n        this.updatedScopesChange.next(this.updatedScopes);\n    }\n\n    public updateUserScope() {\n        this.errors = {};\n        // Check if we are saving any ACCOUNT scopes. If we are, check there are some roles attached.\n        const accounts = _.filter(this.updatedScopes, update => {\n            return update.scope === 'ACCOUNT' && update.roleIds.length > 0;\n        });\n        if (accounts.length > 0) {\n            accounts.forEach(scopeUpdate => {\n                this.errors[scopeUpdate.scopeId] = 'Please select at least one Account role for this user.';\n            });\n            return false;\n        }\n\n        this.userService.updateUserScope(_.values(this.updatedScopes), this.user.id).then(() => {\n            this.closed.emit(true);\n        });\n\n    }\n\n    public setInitialRoleState() {\n        this.assignableRoles.forEach(assignableRole => {\n            if (!this.checked[assignableRole.scopeId]) {\n                this.checked[assignableRole.scopeId] = {};\n            }\n\n            const allAssignableRoles = _.values(assignableRole.roles);\n            const existing = _.find(this.roles, { scopeId: assignableRole.scopeId });\n            if (existing && (existing.roles[0] === null && existing.roles.length === 1)) {\n                this.checked[assignableRole.scopeId]['owner'] = true;\n                this.disabled[assignableRole.scopeId] = true;\n            }\n\n\n            allAssignableRoles.forEach(role => {\n                if (role) {\n                    const checked = existing ? !!_.find(existing.roles, { id: role.id }) : false;\n                    this.checked[assignableRole.scopeId][role.id] = checked;\n                }\n            });\n        });\n    }\n\n    private setRoleIds(scopeId) {\n        const ids = Object.keys(this.checked[scopeId]);\n        const res = ids.filter(id => {\n            return this.checked[scopeId][id];\n        });\n        return res.length ? res.map(Number) : [];\n    }\n\n    private loadUserRoles() {\n        if (this.user) {\n            return this.userService.getAllUserAccountRoles(this.user.id).then(roles => {\n                this.roles = roles[this.scopeKey];\n                return true;\n            });\n        }\n    }\n\n}\n","<ng-template [ngIf]=\"assignableRoles\">\n    <ng-template ngFor let-assignableRole [ngForOf]=\"_.orderBy(assignableRoles, ['scopeId'], ['asc'])\">\n\n        <fieldset class=\"mb-4 ml-4\">\n            <legend class=\"text-sm font-medium text-gray-800\">{{assignableRole.scopeObjectDescription}}</legend>\n\n            <ng-template [ngIf]=\"_.reject(assignableRole.roles).length\">\n                <div><i>You have reached the max number of users</i></div>\n            </ng-template>\n\n            <ng-template [ngIf]=\"!_.reject(assignableRole.roles).length\">\n                <div class=\"mt-4 flex items-center\">\n\n                    <ng-template ngFor let-roleIndex [ngForOf]=\"Object.keys(assignableRole.roles)\">\n\n                        <div class=\"flex items-start\" *ngIf=\"assignableRole.roles[roleIndex]\">\n                            <div class=\"flex items-center h-5\">\n                                <input type=\"checkbox\" *ngIf=\"assignableRole.roles[roleIndex]\"\n                                       [disabled]=\"disabled[assignableRole.scopeId]\"\n                                       [(ngModel)]=\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\"\n                                       (change)=\"updateRole($event, assignableRole.scopeId)\"\n                                       [name]=\"'name' + roleIndex\"\n                                       class=\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\">\n                            </div>\n                            <div class=\"ml-3 text-sm\">\n                                <label class=\"font-medium text-gray-700\">{{assignableRole.roles[roleIndex].name}}</label>\n                            </div>\n                        </div>\n\n                    </ng-template>\n\n                    <div class=\"flex items-start\">\n                        <div class=\"flex items-center h-5\">\n                            <input value=\"OWNER\" type=\"checkbox\" [name]=\"'owner' + assignableRole.scopeId\"\n                                   [checked]=\"checked[assignableRole.scopeId]['owner']\"\n                                   (change)=\"updateRole($event, assignableRole.scopeId)\"\n                                   class=\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\">\n                        </div>\n                        <div class=\"ml-3 text-sm\">\n                            <label class=\"font-medium text-gray-700\">Owner</label>\n                        </div>\n                    </div>\n\n                    <div class=\"text-red-500 m-2\" *ngIf=\"errors[assignableRole.scopeId]\">\n                        {{errors[assignableRole.scopeId]}}\n                    </div>\n                </div>\n            </ng-template>\n\n        </fieldset>\n\n    </ng-template>\n</ng-template>\n\n<!--<table class=\"edit-roles\" *ngIf=\"assignableRoles\" [ngStyle]=\"{marginBottom: hideApply ? '0' : '100px'}\">-->\n<!--    <tbody *ngFor=\"let assignableRole of _.orderBy(assignableRoles, ['scopeId'], ['asc'])\">-->\n<!--    <tr class=\"thead\">-->\n<!--        <th>{{assignableRole.scopeObjectDescription}}</th>-->\n<!--    </tr>-->\n<!--    <tr>-->\n<!--        <td>-->\n<!--            <div class=\"flex align-center\" *ngIf=\"!loading\">-->\n<!--                <ng-template [ngIf]=\"_.reject(assignableRole.roles).length\">-->\n<!--                    <i>You have reached the max number of users</i>-->\n<!--                </ng-template>-->\n\n<!--                <ng-template [ngIf]=\"!_.reject(assignableRole.roles).length\">-->\n<!--                    <span class=\"mr1 flex items-center align-baseline\" *ngIf=\"assignableRole.scope === 'ACCOUNT'\">-->\n<!--                        <input type=\"checkbox\" value=\"OWNER\" class=\"role-checkbox\"-->\n<!--                               [checked]=\"checked[assignableRole.scopeId]['owner']\"-->\n<!--                               (change)=\"updateRole($event, assignableRole.scopeId)\">-->\n<!--                        Owner-->\n<!--                    </span>-->\n<!--                    <ng-template ngFor let-roleIndex [ngForOf]=\"Object.keys(assignableRole.roles)\">-->\n<!--                        <span class=\"mr1 flex items-center align-baseline\" *ngIf=\"assignableRole.roles[roleIndex]\">-->\n<!--                            <input type=\"checkbox\" class=\"role-checkbox\"-->\n<!--                                   *ngIf=\"assignableRole.roles[roleIndex]\"-->\n<!--                                   [disabled]=\"disabled[assignableRole.scopeId]\"-->\n<!--                                   [(ngModel)]=\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\"-->\n<!--                                   (change)=\"updateRole($event, assignableRole.scopeId)\">-->\n<!--                            {{assignableRole.roles[roleIndex].name}}-->\n<!--                        </span>-->\n<!--                        <i *ngIf=\"!assignableRole.roles[roleIndex]\" class=\"mr2\">-->\n<!--                            Upgrade-->\n<!--                        </i>-->\n<!--                    </ng-template>-->\n<!--                </ng-template>-->\n<!--            </div>-->\n\n<!--            <p class=\"mb0 mt050 text-red\"-->\n<!--               *ngIf=\"errors[assignableRole.scopeId]\">{{errors[assignableRole.scopeId]}}</p>-->\n<!--        </td>-->\n\n<!--    </tr>-->\n<!--    </tbody>-->\n<!--</table>-->\n\n<div class=\"flex align-center items-center justify-between p1 p-4 apply-bar\" *ngIf=\"!hideApply\">\n    <div></div>\n    <button mat-flat-button color=\"primary\" class=\"but butsm\" (click)=\"updateUserScope()\">Apply Changes</button>\n</div>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { UserService } from '../../services/user.service';\nimport { ActivatedRoute } from '@angular/router';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\nimport { AuthenticationService } from '../../services/authentication.service';\nimport {RoleService} from '../../services/role.service';\n\n@Component({\n    selector: 'ka-user-roles',\n    templateUrl: './user-roles.component.html',\n    styleUrls: ['./user-roles.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UserRolesComponent implements OnInit {\n\n    public accountError: string;\n    public user: any = {};\n    public Object = Object;\n    public editDetails = false;\n    public loggedInUser: any;\n    public scopeAccesses: any[];\n    public scopeRoles: any = { ACCOUNT: {} };\n    public scopeEdit = null;\n    public _ = _;\n    public accountOwner = false;\n\n    private userId;\n\n    constructor(public userService: UserService,\n                private route: ActivatedRoute,\n                private roleService: RoleService,\n                public authService: AuthenticationService) {\n    }\n\n    ngOnInit() {\n        this.route.params.subscribe(params => {\n            this.loadUser();\n            this.userId = params.userId;\n        });\n\n        this.loadUser();\n    }\n\n    public roleUpdated(value) {\n        this.accountOwner = _.values(value)[0].roleIds[0] === null;\n    }\n\n    public saveUserDetails() {\n        const updates = [];\n        _.values(this.scopeRoles).forEach(scope => {\n            _.forEach(scope, update => {\n                updates.push(update);\n            });\n        });\n        if (updates.length) {\n            this.userService.updateUserScope(updates, this.user.id);\n        }\n    }\n\n    private loadRoles(userId) {\n        this.userService.getUser(userId).then(user => {\n            this.user = user;\n        });\n        this.roleService.getScopeAccesses().then(scopeAccesses => {\n            delete scopeAccesses.ACCOUNT;\n            this.scopeAccesses = _.values(scopeAccesses);\n            _.forEach(scopeAccesses, scopeAccess => {\n                this.scopeRoles[scopeAccess.scope] = {};\n            });\n        });\n        this.userService.getAllUserAccountRoles(userId).then(roles => {\n            const role = _.values(roles.Account).length ? _.values(roles.Account)[0] : null;\n            if (role) {\n                this.accountOwner = role.roles[0] === null;\n            }\n        });\n    }\n\n    private loadUser() {\n        this.authService.getLoggedInUser().then(user => {\n            this.loggedInUser = user;\n            this.loadRoles(this.userId);\n        });\n    }\n}\n","<div class=\"user-roles\">\n\n    <div class=\"text-base font-medium\">{{user.name}}</div>\n    <div class=\"text-sm text-gray-400 mb-4 border-b pb-4 border-gray-200\">{{user.emailAddress}}</div>\n\n    <div class=\"text-base font-medium text-gray-900 mb-4\">Permissions</div>\n\n    <div class=\"mb2\">\n        <ka-edit-roles *ngIf=\"user.id\" [scopeKey]=\"'Account'\" [scope]=\"'ACCOUNT'\" [user]=\"user\" [(updatedScopes)]=\"scopeRoles.ACCOUNT\"\n                       [hideApply]=\"true\" (updatedScopesChange)=\"roleUpdated($event)\" [userService]=\"userService\"></ka-edit-roles>\n        <p style=\"color: red\" *ngIf=\"accountError\">{{accountError}}</p>\n    </div>\n\n    <mat-tab-group animationDuration=\"0\" *ngIf=\"!accountOwner\">\n        <mat-tab *ngFor=\"let scopeAccess of scopeAccesses\" [label]=\"scopeAccess.scopeDescription\">\n            <ka-edit-roles class=\"block mt-4\" *ngIf=\"user.id\" [userService]=\"userService\"\n                [scopeKey]=\"scopeAccess.scopeDescription\" [scope]=\"scopeAccess.scope\" [user]=\"user\"\n                           [(updatedScopes)]=\"scopeRoles[scopeAccess.scope]\" [hideApply]=\"true\"></ka-edit-roles>\n        </mat-tab>\n    </mat-tab-group>\n\n    <div class=\"flex items-center justify-between\">\n        <div></div>\n        <button mat-flat-button color=\"primary\" (click)=\"saveUserDetails()\">Save Changes</button>\n    </div>\n</div>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { RoleService } from '../../services/role.service';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\nimport { AccountService } from '../../services/account.service';\nimport { Location } from '@angular/common';\nimport {UserService} from '../../services/user.service';\n\n@Component({\n    selector: 'ka-invite-user',\n    templateUrl: './invite-user.component.html',\n    styleUrls: ['./invite-user.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InviteUserComponent implements OnInit {\n\n    public scopeAccesses: any[];\n    public scopeRoles: any = { ACCOUNT: {} };\n    public emailAddress: string;\n    public accountError: string;\n    public inviteComplete = false;\n\n    constructor(private roleService: RoleService,\n                private accountService: AccountService,\n                private location: Location,\n                public userService: UserService) {\n    }\n\n    ngOnInit() {\n        this.roleService.getScopeAccesses().then(scopeAccesses => {\n            delete scopeAccesses['ACCOUNT'];\n            this.scopeAccesses = _.values(scopeAccesses);\n            _.forEach(scopeAccesses, scopeAccess => {\n                this.scopeRoles[scopeAccess.scope] = {};\n            });\n        });\n    }\n\n    public save() {\n        this.accountError = '';\n        const accounts = _.filter(this.scopeRoles['ACCOUNT'], update => {\n            return update.scope === 'ACCOUNT' && update.roleIds.length === 0;\n        });\n        if (!_.values(this.scopeRoles['ACCOUNT']).length || accounts.length > 0) {\n            this.accountError = 'Please select at least one Account role for this user.';\n            return false;\n        }\n\n        const scopeRoles = [];\n        _.forEach(this.scopeRoles, (allRoles, scope) => {\n            _.forEach(allRoles, role => {\n                scopeRoles.push(role);\n            });\n        });\n        this.accountService.inviteUserToAccount(this.emailAddress, scopeRoles).then(() => {\n            this.inviteComplete = true;\n        });\n    }\n\n    public back() {\n        this.location.back();\n    }\n\n}\n","<ng-template [ngIf]=\"inviteComplete\">\n\n    <div class=\"flex align-center justify-center p3 p-8 invite-sent\">\n\n        <h3 class=\"mb3 mb-8\"><mat-icon color=\"primary\">check</mat-icon> Invitation Sent</h3>\n\n        <p class=\"mb3 mb-8\">A confirmation email has been sent to <b>{{emailAddress}}</b>, the user will need to click on the confirmation\n            link in order to activate their account.</p>\n\n        <button mat-flat-button class=\"but\" (click)=\"back()\">Return to list</button>\n    </div>\n\n</ng-template>\n\n<ng-template [ngIf]=\"!inviteComplete\">\n\n    <div class=\"mb2 mb-8\">\n        <div class=\"text-base font-medium text-gray-900 mb-4\">User email address</div>\n        <input type=\"text\" placeholder=\"Email address\" class=\"flex1 mr050 mt0 full\"\n               [(ngModel)]=\"emailAddress\">\n    </div>\n\n    <div class=\"text-base font-medium text-gray-900 mb-4\">Permissions</div>\n\n    <div class=\"mb2 mb-4\">\n        <ka-edit-roles [scopeKey]=\"'Account'\" [scope]=\"'ACCOUNT'\" [userService]=\"userService\"\n                       [updatedScopes]=\"scopeRoles['ACCOUNT']\" [hideApply]=\"true\"></ka-edit-roles>\n        <p style=\"color: red\" *ngIf=\"accountError\">{{accountError}}</p>\n    </div>\n\n    <mat-tab-group animationDuration=\"0\">\n        <mat-tab *ngFor=\"let scopeAccess of scopeAccesses\" [label]=\"scopeAccess.scopeDescription\">\n            <ka-edit-roles class=\"block mt-4\" [scopeKey]=\"scopeAccess.scopeDescription\" [scope]=\"scopeAccess.scope\"\n                           [updatedScopes]=\"scopeRoles[scopeAccess.scope]\" [hideApply]=\"true\" [userService]=\"userService\"></ka-edit-roles>\n        </mat-tab>\n    </mat-tab-group>\n\n    <div class=\"flex align-center justify-between mt2 mt-6\">\n        <div></div>\n        <button mat-flat-button color=\"primary\" class=\"but butsm\" (click)=\"save()\" [disabled]=\"!emailAddress\">Invite User</button>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { AuthenticationService } from '../../../services/authentication.service';\nimport { BaseComponent } from '../../base-component';\n\n@Component({\n    selector: 'ka-edit-details',\n    templateUrl: './edit-details.component.html',\n    styleUrls: ['./edit-details.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditDetailsComponent extends BaseComponent implements OnInit, OnDestroy {\n\n    @Input() user: any;\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newEmailAddress = '';\n    public newName = '';\n    public currentPassword = '';\n    public saveError: string;\n    public emailAvailable = true;\n\n    private userSub: Subscription;\n\n    constructor(kcAuthService: AuthenticationService) {\n        super(kcAuthService);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        if (!this.user) {\n            return this.authService.getLoggedInUser().then(user => {\n                this.user = user;\n                this.newName = user.name;\n                this.newEmailAddress = user.emailAddress;\n            });\n        }\n        this.newName = this.user.name;\n        this.newEmailAddress = this.user.emailAddress;\n    }\n\n    ngOnDestroy(): void {\n\n    }\n\n    public checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n\n    public saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserDetails(this.newEmailAddress, this.newName, this.currentPassword, this.user.id)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                this.saveError = 'There was a problem updating your details, please check and try again.';\n            });\n    }\n\n}\n","<p class=\"mb2\">\n    Update your basic account details here. You will be required to confirm you identity by entering your password\n    prior to saving the new details.\n</p>\n\n<div class=\"mb2\">\n    <label>Change the name for this account.</label>\n    <input type=\"email\" placeholder=\"New name\" [(ngModel)]=\"newName\">\n</div>\n\n<div class=\"mb2\">\n    <label>Change email address for this account.</label>\n    <input type=\"email\" placeholder=\"New email address\" [(ngModel)]=\"newEmailAddress\"\n           (change)=\"checkEmail()\" email #email=\"ngModel\" maxlength=\"200\">\n    <span style=\"color: red\" *ngIf=\"!emailAvailable\">An account already exists with this email address</span>\n    <span style=\"color: red\" *ngIf=\"email.invalid\">Not a valid email address</span>\n</div>\n\n<div class=\"mb2\">\n    <label>Enter current password to confirm changes.</label>\n    <input type=\"password\" placeholder=\"Enter password\" [(ngModel)]=\"currentPassword\" maxlength=\"100\">\n</div>\n\n<div class=\"flex align-center justify-between\">\n    <div></div>\n    <button type=\"button\" class=\"but butsm\"\n            [disabled]=\"!emailAvailable || !newEmailAddress || !newName || !currentPassword || email.invalid\"\n            (click)=\"saveEmailAddress()\">\n        Update details\n    </button>\n</div>\n\n\n<p *ngIf=\"saveError\" class=\"mt2 flex align-center error\">\n    {{saveError}}\n</p>\n","import {Injectable} from '@angular/core';\nimport {KinibindRequestService} from 'ng-kinibind';\nimport {KiniAuthModuleConfig} from '../../ng-kiniauth.module';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationService {\n\n    public notificationCount = new BehaviorSubject<number>(0);\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig) {\n    }\n\n    public getNotification(id) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/item', {\n            params: {id}\n        }).toPromise();\n    }\n\n    public getUserNotifications(projectKey = '', limit = '10', offset = '0') {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/', {\n            params: {projectKey, limit, offset}\n        }).toPromise();\n    }\n\n    public getUnreadNotificationCount() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/unreadCount')\n            .toPromise().then(count => {\n                this.notificationCount.next(count);\n                return count;\n            });\n    }\n\n    public markNotificationsRead(notificationIds: any[]) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/notification/markRead', notificationIds)\n            .toPromise().then(() => {\n                this.getUnreadNotificationCount();\n            });\n    }\n\n    public markNotificationsUnread(notificationIds: any[]) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/notification/markUnread', notificationIds)\n            .toPromise().then(() => {\n                this.getUnreadNotificationCount();\n            });\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {NotificationService} from '../../services/notification.service';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\n\n@Component({\n    selector: 'ka-notifications',\n    templateUrl: './notifications.component.html',\n    styleUrls: ['./notifications.component.sass']\n})\nexport class NotificationsComponent implements OnInit {\n\n    public notifications: any = [];\n    public selectAll = false;\n    public someSelected = false;\n\n    constructor(private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.notificationService.getUserNotifications()\n            .then(notifications => this.notifications = notifications);\n    }\n\n    public selectAllChange(value) {\n        this.notifications.forEach(notification => {\n            notification._checked = value;\n        });\n        this.someSelected = _.some(this.notifications, '_checked');\n    }\n\n    public checkboxChange(value) {\n        this.selectAll = _.every(this.notifications, '_checked');\n        this.someSelected = _.some(this.notifications, '_checked');\n    }\n\n    public markSelectedRead() {\n        const selected = _.filter(this.notifications, '_checked');\n        this.notificationService.markNotificationsRead(_.map(selected, 'id')).then(() => {\n            _.forEach(selected, notification => {\n                notification.read = true;\n            });\n        });\n    }\n\n    public markSelectedUnread() {\n        const selected = _.filter(this.notifications, '_checked');\n        this.notificationService.markNotificationsUnread(_.map(selected, 'id')).then(() => {\n            _.forEach(selected, notification => {\n                notification.read = false;\n            });\n        });\n    }\n}\n","<div class=\"flex align-center justify-between\">\n    <div></div>\n    <button mat-flat-button [matMenuTriggerFor]=\"actionMenu\" color=\"primary\" [disabled]=\"!someSelected\">Actions</button>\n    <mat-menu #actionMenu=\"matMenu\">\n        <button mat-menu-item (click)=\"markSelectedRead()\">Mark Selected as Read</button>\n        <button mat-menu-item (click)=\"markSelectedUnread()\">Mark Selected as Unread</button>\n    </mat-menu>\n</div>\n\n<table mat-table [dataSource]=\"notifications\">\n\n    <!-- Position Column -->\n    <ng-container matColumnDef=\"check\">\n        <th mat-header-cell *matHeaderCellDef> <mat-checkbox class=\"pl-2\" [(ngModel)]=\"selectAll\" (ngModelChange)=\"selectAllChange($event)\"></mat-checkbox> </th>\n        <td mat-cell *matCellDef=\"let element\" [ngClass]=\"{'bg-blue-50 border-l-4 border-blue-200': !element.read}\">\n            <mat-checkbox class=\"pl-2\" [(ngModel)]=\"element._checked\" (ngModelChange)=\"checkboxChange($event)\"></mat-checkbox>\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"title\">\n        <th mat-header-cell *matHeaderCellDef> Title </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"truncate w-1/4 max-w-xs\"\n            [ngClass]=\"{'bg-blue-50': !element.read}\"\n            [routerLink]=\"['/notifications', element.id]\"> {{element.title}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"content\">\n        <th mat-header-cell *matHeaderCellDef> Content </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"truncate w-1/4 max-w-xs\"\n            [ngClass]=\"{'bg-blue-50': !element.read}\"\n            [routerLink]=\"['/notifications', element.id]\">\n            <span class=\"capitalize\">{{element.content}}</span>\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Date </th>\n        <td mat-cell *matCellDef=\"let element\" [ngClass]=\"{'bg-blue-50': !element.read}\"\n            [routerLink]=\"['/notifications', element.id]\">\n            {{element.formattedDate}}\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"level\">\n        <th mat-header-cell *matHeaderCellDef>  </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"text-right\" [ngClass]=\"{'bg-blue-50': !element.read}\"\n            [routerLink]=\"['/notifications', element.id]\">\n            <mat-chip-list class=\"flex justify-end\">\n                <mat-chip *ngIf=\"element.level.key === 'critical'\" color=\"warn\" class=\"capitalize\" selected>{{element.level.title}}</mat-chip>\n                <mat-chip *ngIf=\"element.level.key === 'warning'\" class=\"bg-yellow-500 capitalize\" selected>{{element.level.title}}</mat-chip>\n                <mat-chip *ngIf=\"element.level.key === 'info'\" color=\"primary\" class=\"capitalize\" selected>{{element.level.title}}</mat-chip>\n            </mat-chip-list>\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>  </th>\n        <td mat-cell *matCellDef=\"let element\" [ngClass]=\"{'bg-blue-50': !element.read}\" class=\"text-right\"\n            [routerLink]=\"['/notifications', element.id]\">\n\n        </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"['check', 'title', 'content', 'date', 'level', 'action']\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: ['check', 'title', 'content', 'date', 'level', 'action'];\"></tr>\n</table>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {NotificationService} from '../../../services/notification.service';\n\n@Component({\n    selector: 'ka-notification',\n    templateUrl: './notification.component.html',\n    styleUrls: ['./notification.component.sass']\n})\nexport class NotificationComponent implements OnInit {\n\n    public notification: any;\n\n    private notificationId;\n\n    constructor(private route: ActivatedRoute,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.notificationId = this.route.snapshot.params.id;\n        this.notificationService.getNotification(this.notificationId).then(notification => {\n            if (notification && !notification.read) {\n                notification.read = true;\n                this.notificationService.markNotificationsRead([this.notificationId]);\n            }\n            this.notification = notification;\n        });\n    }\n\n    public updateNotificationRead(event) {\n        const markFunction = event ? 'markNotificationsRead' : 'markNotificationsUnread';\n        this.notificationService[markFunction]([this.notificationId]);\n    }\n\n}\n","<!-- This example requires Tailwind CSS v2.0+ -->\n<div *ngIf=\"notification\" class=\"bg-white shadow overflow-hidden sm:rounded-lg\">\n    <div class=\"px-4 py-5 sm:px-6\">\n        <h3 class=\"text-lg leading-6 font-medium text-gray-900\">\n            {{notification.title}}\n        </h3>\n        <p class=\"mt-1 max-w-2xl text-sm text-gray-500\">\n            Notification\n        </p>\n    </div>\n    <div class=\"border-t border-gray-200\">\n        <dl>\n            <div class=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Received at\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    {{notification.formattedDate}}\n                </dd>\n            </div>\n            <div class=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Content\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    {{notification.content}}\n                </dd>\n            </div>\n            <div class=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Level\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    <mat-chip-list>\n                        <mat-chip *ngIf=\"notification.level.key === 'critical'\" color=\"warn\" class=\"capitalize\" selected>{{notification.level.title}}</mat-chip>\n                        <mat-chip *ngIf=\"notification.level.key === 'warning'\" class=\"bg-yellow-500 capitalize\" selected>{{notification.level.title}}</mat-chip>\n                        <mat-chip *ngIf=\"notification.level.key === 'info'\" color=\"primary\" class=\"capitalize\" selected>{{notification.level.title}}</mat-chip>\n                    </mat-chip-list>\n                </dd>\n            </div>\n            <div class=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Category\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    {{notification.category}}\n                </dd>\n            </div>\n            <div class=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Read\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    <mat-checkbox [(ngModel)]=\"notification.read\" (ngModelChange)=\"updateNotificationRead($event)\"></mat-checkbox>\n                </dd>\n            </div>\n        </dl>\n    </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, merge, Subject} from 'rxjs';\nimport {AccountService} from '../../services/account.service';\nimport {Router} from '@angular/router';\nimport {debounceTime, distinctUntilChanged, map, switchMap} from 'rxjs/operators';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\n\n@Component({\n    selector: 'ka-accounts',\n    templateUrl: './accounts.component.html',\n    styleUrls: ['./accounts.component.sass']\n})\nexport class AccountsComponent implements OnInit {\n\n    @Input() accountClickThrough: string;\n\n    public accounts: any[];\n    public searchText = new BehaviorSubject<string>('');\n    public limit = new BehaviorSubject<number>(100);\n    public offset = new BehaviorSubject<number>(0);\n    public pageIndex = 0;\n    public resultSize = 0;\n    public reloadAccounts = new Subject();\n    public allSelected = false;\n    public selectionMade = false;\n    public lodash = _;\n    public passwordReset = false;\n    public accountUnlocked = false;\n    public accountSuspended = false;\n    public newAccount = false;\n    public newAccountEmail = '';\n    public newAccountName = '';\n    public newAccountPassword: string = null;\n    public newAccountAdded = false;\n\n    constructor(private accountService: AccountService,\n                private router: Router) {\n    }\n\n    ngOnInit() {\n        merge(this.searchText, this.limit, this.offset, this.reloadAccounts)\n            .pipe(\n                debounceTime(300),\n                distinctUntilChanged(),\n                switchMap(() =>\n                    this.getAccounts()\n                )\n            )\n            .subscribe((accounts: any) => {\n                this.accounts = accounts;\n            });\n    }\n\n    public accountAction(account) {\n        if (this.accountClickThrough) {\n            this.router.navigate([this.accountClickThrough, account.accountId]);\n        }\n    }\n\n    public saveNewAdminUser() {\n        if (this.newAccountPassword && this.newAccountPassword.length < 8) {\n            return true;\n        }\n\n        return this.accountService.createAccount(this.newAccountName, this.newAccountEmail, this.newAccountPassword || null, null)\n            .then(res => {\n                this.newAccountName = '';\n                this.newAccountEmail = '';\n                this.newAccountPassword = null;\n                this.newAccount = false;\n                this.newAccountAdded = true;\n                this.reloadAccounts.next(Date.now());\n                setTimeout(() => {\n                    this.newAccountAdded = false;\n                }, 3000);\n            });\n    }\n\n    public viewAccount(user) {\n\n    }\n\n    public toggleSelectAllUsers() {\n        this.allSelected = !this.allSelected;\n        this.selectionMade = this.allSelected;\n        this.accounts = this.lodash.map(this.accounts, user => {\n            user.selected = this.allSelected;\n            return user;\n        });\n    }\n\n    public toggleUsersSelected(user) {\n        user.selected = !user.selected;\n        this.selectionMade = this.lodash.some(this.accounts, 'selected');\n    }\n\n    public search(searchTerm: string) {\n        this.searchText.next(searchTerm);\n    }\n\n    public updatePage(pageEvent) {\n        const limit = this.limit.getValue();\n\n        if (pageEvent.pageSize !== limit) {\n            this.offset.next(0);\n            this.limit.next(pageEvent.pageSize);\n            this.pageIndex = 0;\n        } else {\n            this.offset.next(pageEvent.pageSize * (pageEvent.pageIndex));\n            this.pageIndex = pageEvent.pageIndex;\n        }\n    }\n\n    public reactivate(account, note) {\n        this.accountService.reactivateAccount(account.accountId, note).then(() => {\n            this.accountUnlocked = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.accountUnlocked = false;\n            }, 3000);\n        });\n    }\n\n    public suspend(account, note) {\n        this.accountService.suspendAccount(account.accountId, note).then(() => {\n            this.accountSuspended = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.accountSuspended = false;\n            }, 3000);\n        });\n    }\n\n    private getAccounts() {\n        return this.accountService.searchForAccounts(\n            this.searchText.getValue(),\n            this.limit.getValue(),\n            this.offset.getValue()\n        ).pipe(map((data: any) => {\n            this.resultSize = data.length;\n            return data;\n        }));\n    }\n\n}\n","<div class=\"p-6 bg-white border-b border-gray-200\">\n    <div class=\"md:flex md:items-center md:justify-between md:space-x-5\">\n        <div class=\"flex items-start flex-1\">\n            <div class=\"pt-1.5\">\n                <h1 class=\"text-2xl font-bold text-gray-900\">Accounts</h1>\n                <p class=\"text-sm font-medium text-gray-500\">\n                    A list of all the accounts in the system.\n                </p>\n            </div>\n        </div>\n        <div class=\"mt-6 flex flex-col-reverse justify-stretch\">\n            <button type=\"button\" (click)=\"newAccount = true;\"\n                    class=\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\">\n                Create New Account\n            </button>\n        </div>\n    </div>\n</div>\n<div class=\"px-4 sm:px-6 lg:px-8 mt-0\">\n    <div class=\"flex flex-col\">\n        <div class=\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\">\n            <div class=\"inline-block min-w-full py-2 align-middle\">\n\n                <div *ngIf=\"newAccountAdded\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\"\n                         viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                    </svg>\n                    <div class=\"text-lg\">New account successfully added.</div>\n                </div>\n\n                <div *ngIf=\"newAccount\" class=\"px-6 pb-6 mt-4 flex flex-col border-b\">\n                    <p><b>Add New Account</b></p>\n                    <input type=\"text\" [(ngModel)]=\"newAccountName\" placeholder=\"Enter name for the new account\">\n\n                    <input class=\"mt-2\" type=\"email\" [(ngModel)]=\"newAccountEmail\"\n                           placeholder=\"Enter email address for account user\">\n                    <input class=\"mt-2\" type=\"password\" [(ngModel)]=\"newAccountPassword\"\n                           placeholder=\"Enter password for user\"\n                           [ngClass]=\"{'border border-red-600': newAccountPassword && newAccountPassword.length < 8}\">\n                    <div *ngIf=\"newAccountPassword && newAccountPassword.length < 8\">\n                        <small class=\"text-red-600\">Password must be at least 8 characters long.</small>\n                    </div>\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\n                        email.</small></div>\n                    <div class=\"flex items-center justify-between my-4\">\n                        <div></div>\n                        <button (click)=\"saveNewAdminUser()\"\n                                class=\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\">\n                            Save New Account\n                        </button>\n                    </div>\n                </div>\n\n                <div *ngIf=\"passwordReset\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    <div class=\"text-lg\">Password reset email sent. Please check your email for further instructions</div>\n                </div>\n\n                <div *ngIf=\"accountUnlocked\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-primary h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\" />\n                    </svg>\n                    <div class=\"text-lg\">This account has been successfully reactivated.</div>\n                </div>\n\n                <div *ngIf=\"accountSuspended\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n                    </svg>\n                    <div class=\"text-lg\">This account has been suspended.</div>\n                </div>\n\n                <div class=\"mt-3 sm:mt-0 flex-1\">\n                    <label for=\"mobile-search-candidate\" class=\"sr-only\">Search</label>\n                    <div class=\"flex\">\n                        <div class=\"relative flex-grow focus-within:z-10\">\n                            <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                                <svg class=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\"\n                                     viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                                    <path fill-rule=\"evenodd\"\n                                          d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                                          clip-rule=\"evenodd\"/>\n                                </svg>\n                            </div>\n                            <input type=\"text\" name=\"mobile-search-candidate\" id=\"mobile-search-candidate\"\n                                   class=\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\"\n                                   placeholder=\"Search users\"\n                                   (keyup)=\"searchText.next($event.target.value)\">\n                        </div>\n                    </div>\n                </div>\n                <table class=\"min-w-full border-separate bg-white\" style=\"border-spacing: 0\">\n                    <ng-template [ngIf]=\"accounts && accounts.length\">\n\n                        <thead class=\"bg-gray-100\">\n                        <tr>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Name\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Status\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\">\n                                <span class=\"sr-only\">Edit</span>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody *ngFor=\"let account of accounts; let i = index\">\n                        <tr class=\"hover:bg-gray-50 cursor-pointer\" (click)=\"accountAction(account)\">\n                            <td (click)=\"viewAccount(account)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\">\n                                {{account.name}}\n                            </td>\n                            <td (click)=\"viewAccount(account)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                <span [ngClass]=\"{'bg-success': account.status === 'ACTIVE', 'bg-primary': account.status === 'PENDING', 'bg-danger': account.status === 'SUSPENDED'}\"\n                                      class=\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\">\n                                    {{account.status.toLowerCase()}}</span>\n                            </td>\n                            <td class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                <div class=\"flex items-center justify-end\">\n                                    <button mat-button [matMenuTriggerFor]=\"menu\" color=\"primary\">\n                                        Actions\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\n                                    </button>\n                                    <mat-menu #menu=\"matMenu\">\n                                        <button mat-menu-item (click)=\"account.showNoteField = 'reactivate'\"\n                                                *ngIf=\"account.status === 'LOCKED' || account.status === 'SUSPENDED'\">\n                                            Reactivate\n                                        </button>\n                                        <button mat-menu-item (click)=\"account.showNoteField = 'suspend'\"\n                                                *ngIf=\"account.status !== 'SUSPENDED'\">\n                                            Suspend\n                                        </button>\n                                    </mat-menu>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr *ngIf=\"account.showNoteField\" class=\"hover:bg-white\">\n                            <td [colSpan]=\"3\" class=\"pl-4\">\n                                <div class=\"my-2\">\n                                    <input type=\"text\" [ngClass]=\"{'border border-red-600': !account.note}\"\n                                           class=\"w-full \" [(ngModel)]=\"account.note\"\n                                           placeholder=\"Please enter accompanying note\">\n                                </div>\n                                <div class=\"flex items-center justify-between mt-4\">\n                                    <button\n                                        class=\"py-2 px-4 border border-gray-500 text-gray-500 font-semibold rounded-md hover:bg-gray-50 focus:outline-none\"\n                                        (click)=\"account.showNoteField = ''\">\n                                        Cancel\n                                    </button>\n                                    <button [disabled]=\"!account.note\"\n                                            (click)=\"account.showNoteField === 'suspend' ? suspend(account, account.note) : reactivate(account, account.note)\"\n                                            class=\"disabled:opacity-50 py-2 px-4 bg-primary text-white font-semibold rounded-md focus:outline-none\">\n                                        Save note and {{account.showNoteField}}\n                                    </button>\n                                </div>\n                            </td>\n                        </tr>\n                        </tbody>\n                        <tbody>\n                        <tr>\n                            <td colspan=\"4\"\n                                class=\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\">\n                                <div class=\"paging-toolbar flex align-center justify-end\">\n                                    <mat-paginator class=\"user-paginator flex1 pl050 mb0\" [length]=\"resultSize\"\n                                                   [pageSize]=\"limit.getValue()\"\n                                                   [pageIndex]=\"pageIndex\"\n                                                   [pageSizeOptions]=\"[5, 10, 25, 100, 500, 1000]\"\n                                                   (page)=\"updatePage($event)\">\n                                    </mat-paginator>\n                                </div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </ng-template>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport {BaseComponent} from '../base-component';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n    selector: 'ka-invitation',\n    templateUrl: './invitation.component.html',\n    styleUrls: ['./invitation.component.sass']\n})\nexport class InvitationComponent extends BaseComponent implements OnInit {\n\n    @Input() authenticationService: any;\n\n    public invitationCode: string;\n    public details: any = {};\n    public name = '';\n    public password = '';\n    public inviteAccepted = false;\n    public invitationError = false;\n\n    constructor(kcAuthService: AuthenticationService,\n                private route: ActivatedRoute) {\n        super(kcAuthService);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        this.invitationCode = this.route.snapshot.queryParams.invitationCode;\n\n        this.authService.getInvitationDetails(this.invitationCode).then(details => {\n            this.details = details;\n        }).catch(err => {\n            this.invitationError = true;\n        });\n    }\n\n    public acceptInvitation() {\n        this.authService.acceptInvitation(this.invitationCode, this.name, this.password, this.details.emailAddress).then(() => {\n            this.inviteAccepted = true;\n        });\n    }\n\n}\n","<div class=\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\">\n\n    <div class=\"actioninfo p2w p1m\">\n        <ng-template [ngIf]=\"!inviteAccepted && !invitationError\">\n            <h4 class=\"mb1 mt0 flex align-center\">\n                <b>Invitation Details</b>\n            </h4>\n\n            <div class=\"mb1\">\n                <p class=\"mb-4\">You have been invited to join the {{details.accountName}} account using email address\n                    <b>{{details.emailAddress}}</b></p>\n\n                <ng-template [ngIf]=\"details.newUser\">\n\n                    <p class=\"mb-4\">Please enter your full name and create a new password in order to log into your account.</p>\n\n                    <p>\n                        <label>Full Name</label>\n                        <input class=\"w-full\" type=\"text\" [(ngModel)]=\"name\">\n                    </p>\n\n                    <p>\n                        <label>New Password</label>\n                        <input class=\"w-full\" type=\"password\" [(ngModel)]=\"password\">\n                    </p>\n\n                </ng-template>\n\n                <p class=\"mt-4\">To accept this invitation please click on the 'Accept Invitation' button.</p>\n            </div>\n        </ng-template>\n\n        <ng-template [ngIf]=\"inviteAccepted\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-green-500 h-24 w-24 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <div class=\"text-lg\">Invitation Accepted. You have been added to the {{details.accountName}} account.</div>\n            </div>\n        </ng-template>\n\n        <ng-template [ngIf]=\"invitationError\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-yellow-500 h-24 w-24 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n                </svg>\n                <div class=\"text-lg\">There was a problem with the invitation code supplied, please check and try again.</div>\n            </div>\n        </ng-template>\n\n    </div>\n    <div class=\"actions flex flex-col align-center justify-center p1\">\n        <button *ngIf=\"!inviteAccepted && !invitationError\" class=\"button small-button white-button disabled:opacity-50\" (click)=\"acceptInvitation()\"\n            [disabled]=\"details.newUser && (!name || !password)\">\n            Accept Invitation\n        </button>\n    </div>\n\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport {ActivatedRoute} from '@angular/router';\nimport {BaseComponent} from '../base-component';\n\n@Component({\n    selector: 'ka-password-reset',\n    templateUrl: './password-reset.component.html',\n    styleUrls: ['./password-reset.component.sass']\n})\nexport class PasswordResetComponent extends BaseComponent implements OnInit {\n\n    @Input() authenticationService: any;\n    @Input() loginRoute = '/login';\n    @Input() recaptchaKey: string;\n\n    public resetCode: string;\n    public codeError = false;\n    public resetError = false;\n    public resetComplete = false;\n    public resetEmail: string;\n    public password: string;\n    public confirmPassword: string;\n    public recaptchaResponse: string;\n\n    constructor(kcAuthService: AuthenticationService,\n                private route: ActivatedRoute) {\n        super(kcAuthService);\n    }\n\n    async ngOnInit() {\n        super.ngOnInit();\n\n        this.resetCode = this.route.snapshot.queryParams.code;\n\n        this.authService.getEmailForPasswordReset(this.resetCode).then(resetEmail => {\n            this.resetEmail = resetEmail;\n        }).catch(err => {\n            this.codeError = true;\n        });\n    }\n\n    public recaptchaResolved(response) {\n        this.recaptchaResponse = response;\n    }\n\n    public saveNewPassword() {\n        this.authService.resetPassword(this.resetEmail, this.confirmPassword, this.resetCode, this.recaptchaResponse)\n            .then(() => {\n                this.resetComplete = true;\n                setTimeout(() => {\n                    window.location.href = this.loginRoute;\n                }, 5000);\n            })\n            .catch(err => {\n                this.resetError = true;\n            });\n    }\n\n}\n","<div class=\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\">\n\n    <div class=\"actioninfo p2w p1m\">\n        <ng-template [ngIf]=\"resetEmail && !resetComplete && !resetError && !codeError\">\n            <h4 class=\"mb1 mt0 flex align-center\">\n                <b>Enter New Password</b>\n            </h4>\n\n            <div class=\"mb-4\">\n\n                <div class=\"mb-4\">\n                    <label>Current Email Address</label>\n                    <input class=\"w-full\" type=\"text\" [value]=\"resetEmail\" disabled>\n                </div>\n\n                <div class=\"mb-4\">\n                    <label>New Password</label>\n                    <input class=\"w-full\" type=\"password\" [(ngModel)]=\"password\">\n                </div>\n\n                <div class=\"mb-4\">\n                    <label>Confirm New Password</label>\n                    <input class=\"w-full\" type=\"password\" [(ngModel)]=\"confirmPassword\">\n                </div>\n\n                <div *ngIf=\"confirmPassword && password !== confirmPassword\"\n                     class=\"text-red-600 text-sm\">\n                    Passwords do not match\n                </div>\n\n            </div>\n\n            <re-captcha class=\"mt-4\" (resolved)=\"recaptchaResolved($event)\"\n                        [siteKey]=\"recaptchaKey\"></re-captcha>\n        </ng-template>\n\n        <ng-template [ngIf]=\"resetComplete\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-secondary h-24 w-24 mr-2\" fill=\"none\"\n                     viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                          d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                </svg>\n                <div class=\"text-lg\">Your password has been successfully reset.</div>\n            </div>\n\n            <a class=\"justify-center text-primary mt-8 cursor-pointer hover:underline flex items-center\"\n               [routerLink]=\"[loginRoute]\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"\n                     stroke=\"currentColor\" stroke-width=\"2\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11 17l-5-5m0 0l5-5m-5 5h12\"/>\n                </svg>\n                Go to login\n            </a>\n        </ng-template>\n\n        <ng-template [ngIf]=\"codeError\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-24 w-24 mr-2\" fill=\"none\"\n                     viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                          d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n                </svg>\n                <div class=\"text-lg\">There was a problem with the reset code supplied, please check and try again.</div>\n            </div>\n        </ng-template>\n\n        <ng-template [ngIf]=\"resetError\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-24 w-24 mr-2\" fill=\"none\"\n                     viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                          d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n                </svg>\n                <div class=\"text-lg\">There was a problem resetting your password at this time, please check and try again.</div>\n            </div>\n        </ng-template>\n\n    </div>\n    <div class=\"actions flex flex-col align-center justify-center p1\">\n        <button class=\"button small-button white-button disabled:opacity-50\"\n                *ngIf=\"resetEmail && !resetComplete && !resetError && !codeError\"\n                [disabled]=\"!confirmPassword || confirmPassword !== password\"\n                (click)=\"saveNewPassword()\">\n            Save New Password\n        </button>\n    </div>\n\n</div>\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NgKinibindModule } from 'ng-kinibind';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { AccountSummaryComponent } from './lib/views/account-summary/account-summary.component';\nimport { EditEmailComponent } from './lib/views/account-summary/edit-email/edit-email.component';\nimport { TwoFactorComponent } from './lib/views/account-summary/two-factor/two-factor.component';\nimport { LoginComponent } from './lib/views/auth/login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { InlineModalComponent } from './lib/views/inline-modal/inline-modal.component';\nimport { BaseComponent } from './lib/views/base-component';\nimport { EditBackupEmailComponent } from './lib/views/account-summary/edit-backup-email/edit-backup-email.component';\nimport { EditMobileComponent } from './lib/views/account-summary/edit-mobile/edit-mobile.component';\nimport { AddressBookComponent } from './lib/views/address-book/address-book.component';\nimport { ContactDetailsComponent } from './lib/views/contact-details/contact-details.component';\nimport { CountryCodesDirective } from './lib/directives/country-codes/country-codes.directive';\nimport { PostcodeLookupDirective } from './lib/directives/postcode-lookup/postcode-lookup.directive';\nimport { AccountUsersComponent } from './lib/views/account-users/account-users.component';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { UserRolesComponent } from './lib/views/user-roles/user-roles.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { EditRolesComponent } from './lib/views/user-roles/edit-roles/edit-roles.component';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { InviteUserComponent } from './lib/views/invite-user/invite-user.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { EditDetailsComponent } from './lib/views/account-summary/edit-details/edit-details.component';\nimport { EditNameComponent } from './lib/views/account-summary/edit-name/edit-name.component';\nimport { EditAccountNameComponent } from './lib/views/account-summary/edit-account-name/edit-account-name.component';\nimport { RecaptchaModule } from 'ng-recaptcha';\nimport { NotificationsComponent } from './lib/views/notifications/notifications.component';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatChipsModule} from '@angular/material/chips';\nimport { NotificationComponent } from './lib/views/notifications/notification/notification.component';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { AccountsComponent } from './lib/views/accounts/accounts.component';\nimport { InvitationComponent } from './lib/views/invitation/invitation.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport { PasswordResetComponent } from './lib/views/password-reset/password-reset.component';\nimport { ChangePasswordComponent } from './lib/views/account-summary/change-password/change-password.component';\n\n@NgModule({\n    declarations: [\n        AccountSummaryComponent,\n        EditNameComponent,\n        EditEmailComponent,\n        TwoFactorComponent,\n        LoginComponent,\n        InlineModalComponent,\n        BaseComponent,\n        EditBackupEmailComponent,\n        EditMobileComponent,\n        AddressBookComponent,\n        ContactDetailsComponent,\n        CountryCodesDirective,\n        PostcodeLookupDirective,\n        AccountUsersComponent,\n        UserRolesComponent,\n        EditRolesComponent,\n        InviteUserComponent,\n        EditDetailsComponent,\n        EditAccountNameComponent,\n        NotificationsComponent,\n        NotificationComponent,\n        AccountsComponent,\n        InvitationComponent,\n        PasswordResetComponent,\n        ChangePasswordComponent\n    ],\n    imports: [\n        NgKinibindModule,\n        RouterModule,\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        MatPaginatorModule,\n        MatIconModule,\n        MatButtonModule,\n        MatMenuModule,\n        MatTabsModule,\n        RecaptchaModule,\n        MatTableModule,\n        MatChipsModule,\n        MatCheckboxModule\n    ],\n    exports: [\n        AccountSummaryComponent,\n        EditEmailComponent,\n        TwoFactorComponent,\n        LoginComponent,\n        AddressBookComponent,\n        ContactDetailsComponent,\n        AccountUsersComponent,\n        UserRolesComponent,\n        EditRolesComponent,\n        InviteUserComponent,\n        EditAccountNameComponent,\n        NotificationsComponent,\n        NotificationComponent,\n        AccountsComponent,\n        InvitationComponent,\n        PasswordResetComponent\n    ]\n})\nexport class NgKiniAuthModule {\n    static forRoot(conf?: KiniAuthModuleConfig): ModuleWithProviders<NgKiniAuthModule> {\n        return {\n            ngModule: NgKiniAuthModule,\n            providers: [\n                { provide: KiniAuthModuleConfig, useValue: conf || {} }\n            ]\n        };\n    }\n}\nexport class KiniAuthModuleConfig {\n    guestHttpURL: string;\n    accessHttpURL: string;\n}\n","import {Injectable} from '@angular/core';\nimport {KiniAuthModuleConfig} from '../../ng-kiniauth.module';\nimport {KinibindRequestService} from 'ng-kinibind';\nimport {BehaviorSubject} from 'rxjs/internal/BehaviorSubject';\nimport * as lodash from 'lodash';\n\nconst _ = lodash.default;\nimport * as sha512 from 'js-sha512' ;\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {map} from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthenticationService {\n\n    public authUser: BehaviorSubject<any> = new BehaviorSubject(null);\n    public sessionData: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n    public loadingRequests: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig,\n                private http: HttpClient) {\n\n        const user = sessionStorage.getItem('loggedInUser');\n        this.authUser.next(JSON.parse(user));\n\n        const sessionData = sessionStorage.getItem('sessionData');\n        if (sessionData && _.filter(JSON.parse(sessionData)).length) {\n            this.sessionData.next(JSON.parse(sessionData));\n        }\n    }\n\n    public async getLoggedInUser(reloadSession?): Promise<any> {\n        if (reloadSession || !this.sessionData.getValue()) {\n            await this.getSessionData();\n        }\n\n        const res = await this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user')\n            .toPromise();\n\n        if (res) {\n            await this.setSessionUser(res);\n            const sessionData = sessionStorage.getItem('sessionData');\n            if (sessionData && _.filter(JSON.parse(sessionData)).length) {\n                this.sessionData.next(JSON.parse(sessionData));\n            } else {\n                await this.getSessionData();\n            }\n            return res;\n        }\n        return null;\n    }\n\n    public login(username: string, password: string, clientTwoFactorData?, recaptcha?) {\n        const request = this.config.guestHttpURL + `/auth/login`;\n\n        const headers = new HttpHeaders({'X-CAPTCHA-TOKEN': recaptcha || ''});\n        const options: any = {headers};\n\n        return this.kbRequest.makePostRequest(request, {\n            emailAddress: username,\n            password: this.getHashedPassword(password, username),\n            clientTwoFactorData: clientTwoFactorData || null\n        }, options).toPromise().then((user: any) => {\n            if (user === 'REQUIRES_2FA') {\n                return user;\n            } else {\n                return this.getSessionData().then(() => {\n                    return this.setSessionUser(user);\n                });\n            }\n        });\n    }\n\n    public sendPasswordReset(emailAddress, recaptcha?) {\n        const headers = new HttpHeaders({'X-CAPTCHA-TOKEN': recaptcha || ''});\n\n        return this.http.get(this.config.guestHttpURL + '/auth/passwordReset', {\n            params: {emailAddress},\n            headers\n        }).toPromise();\n    }\n\n    public getEmailForPasswordReset(resetCode) {\n        return this.http.get(this.config.guestHttpURL + '/auth/passwordReset/' + resetCode)\n            .toPromise();\n    }\n\n    public resetPassword(emailAddress, newPassword, resetCode, recaptcha) {\n        const headers = new HttpHeaders({'X-CAPTCHA-TOKEN': recaptcha || ''});\n        const options: any = {headers};\n\n        return this.http.post(this.config.guestHttpURL + '/auth/passwordReset', {\n            newPassword: this.getHashedPassword(newPassword, emailAddress, true),\n            resetCode\n        }, options).toPromise();\n    }\n\n    public changeUserPassword(newPassword, existingPassword, email) {\n        return this.http.post(this.config.accessHttpURL + '/user/changeUserPassword', {\n            newPassword: this.getHashedPassword(newPassword, email, true),\n            password: this.getHashedPassword(existingPassword, email)\n        }).toPromise();\n    }\n\n    public updateApplicationSettings(settings) {\n        return this.http.put(this.config.accessHttpURL + '/user/applicationSettings', settings\n        ).toPromise();\n    }\n\n    public isAdminNow() {\n        const session = this.sessionData.getValue();\n        if (session && session.privileges) {\n            const accountId = session.account ? session.account.accountId : null;\n            const privileges = session.privileges.ACCOUNT;\n\n            if (privileges['*']) {\n                return true;\n            }\n\n            return privileges[accountId] ? privileges[accountId].indexOf('*') > -1 : false;\n        }\n        return false;\n    }\n\n    public isAdmin() {\n        return this.sessionData.pipe(map(session => {\n            if (session && session.privileges) {\n                const accountId = session.account ? session.account.accountId : null;\n                const privileges = session.privileges.ACCOUNT;\n\n                if (privileges['*']) {\n                    return true;\n                }\n\n                return privileges[accountId] ? privileges[accountId].indexOf('*') > -1 : false;\n            }\n            return false;\n        }));\n    }\n\n    public closeActiveSession() {\n        return this.kbRequest.makeGetRequest('/guest/auth/closeActiveSessions').toPromise()\n            .then(res => {\n                return this.getSessionData().then(() => {\n                    return res;\n                });\n            });\n    }\n\n    public generateTwoFactorSettings() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/twoFactorSettings')\n            .toPromise();\n    }\n\n    public authenticateNewTwoFactor(code, secret) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/newTwoFactor',\n            {\n                params: {code, secret}\n            }\n        ).toPromise().then(user => {\n            if (user) {\n                this.setSessionUser(user);\n            }\n            return user;\n        });\n    }\n\n    public async authenticateTwoFactor(code) {\n        const url = this.config.guestHttpURL + `/auth/twoFactor?code=${code}`;\n        const result = await this.kbRequest.makeGetRequest(url).toPromise();\n        if (result) {\n            sessionStorage.removeItem('pendingLoginSession');\n            await this.getLoggedInUser(true);\n            return result;\n        } else {\n            throw(result);\n        }\n    }\n\n    public disableTwoFactor() {\n        const url = this.config.accessHttpURL + '/user/disableTwoFA';\n        return this.kbRequest.makeGetRequest(url).toPromise().then(user => {\n            this.setSessionUser(user);\n        });\n    }\n\n    public doesUserExist(username: string) {\n        return Promise.resolve(true);\n    }\n\n    public emailAvailable(emailAddress) {\n        return this.kbRequest.makeGetRequest(\n            this.config.accessHttpURL + `/auth/emailExists?emailAddress=${emailAddress}`\n        ).toPromise().then(res => {\n            return !res;\n        });\n    }\n\n    public getInvitationDetails(invitationCode) {\n        return this.kbRequest.makeGetRequest(\n            this.config.guestHttpURL + `/registration/invitation/${invitationCode}`\n        ).toPromise();\n    }\n\n    public acceptInvitation(invitationCode, name = '', password = '', email = '') {\n        return this.kbRequest.makePostRequest(\n            this.config.guestHttpURL + `/registration/invitation/${invitationCode}`,\n            {name, password: this.getHashedPassword(password, email, true)}\n        ).toPromise();\n    }\n\n    public validateUserPassword(emailAddress, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/auth/validatePassword', {\n            emailAddress,\n            password: this.getHashedPassword(password)\n        }).toPromise();\n    }\n\n    public changeUserDetails(newEmailAddress, newName, password, userId?) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeDetails', {\n            newEmailAddress,\n            newName,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public changeUserName(newName, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeName', {\n            newName,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public changeUserEmailAddress(newEmailAddress, password) {\n        const sessionData = this.sessionData.getValue();\n        const params: any = {newEmailAddress, password};\n        if (sessionData.sessionSalt) {\n            params.password = this.getHashedPassword(password);\n            params.hashedPassword = sha512.sha512(password + newEmailAddress);\n        }\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeEmail', params).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public changeUserBackEmailAddress(newEmailAddress, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeBackupEmail', {\n            newEmailAddress,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public changeUserMobile(newMobile, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeMobile', {\n            newMobile,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public getGoogleAuthSettings() {\n        return Promise.resolve(123);\n    }\n\n    public logout() {\n        this.authUser.next(null);\n        this.sessionData.next(null);\n        sessionStorage.clear();\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + '/auth/logout')\n            .toPromise();\n    }\n\n    public setSessionUser(user) {\n        sessionStorage.setItem('loggedInUser', JSON.stringify(user));\n        this.authUser.next(user);\n        return Promise.resolve(user);\n    }\n\n    public setLoadingRequest(value) {\n        this.loadingRequests.next(value);\n    }\n\n    public sessionTransfer(token) {\n        return this.http.post(this.config.guestHttpURL + '/auth/sessionTransfer', token).toPromise();\n    }\n\n    public getSessionData() {\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + '/session')\n            .toPromise()\n            .then(sessionData => {\n                if (sessionData) {\n                    sessionStorage.setItem('sessionData', JSON.stringify(sessionData));\n                    this.sessionData.next(sessionData);\n                    return sessionData;\n                } else {\n                    sessionStorage.removeItem('sessionData');\n                    this.sessionData.next(null);\n                    return null;\n                }\n            });\n    }\n\n    public getHashedPassword(password, emailAddress?, newPassword = false) {\n        let hashedPassword;\n        const sessionData = this.sessionData.getValue();\n        const loggedInUser = this.authUser.getValue();\n\n        const email = emailAddress ? emailAddress : (loggedInUser ? loggedInUser.emailAddress : '');\n\n        const hash = sha512.sha512(password + email);\n        if (newPassword) {\n            return hash;\n        }\n\n        if (email && sessionData && sessionData.sessionSalt) {\n            hashedPassword = sha512.sha512(hash + sessionData.sessionSalt);\n        }\n        return hashedPassword || password;\n    }\n}\n","/*\n * Public API Surface of ng-kiniauth\n */\n\n\n// Services\nexport * from './lib/services/authentication.service';\nexport * from './lib/services/user.service';\nexport * from './lib/services/notification.service';\nexport * from './lib/services/account.service';\n\n// Components\nexport * from './lib/views/account-summary/account-summary.component';\nexport * from './lib/views/account-summary/edit-email/edit-email.component';\nexport * from './lib/views/account-summary/two-factor/two-factor.component';\nexport * from './lib/views/auth/login/login.component';\nexport * from './lib/views/address-book/address-book.component';\nexport * from './lib/views/contact-details/contact-details.component';\nexport * from './lib/views/account-users/account-users.component';\nexport * from './lib/views/user-roles/user-roles.component';\nexport * from './lib/views/user-roles/edit-roles/edit-roles.component';\nexport * from './lib/views/invite-user/invite-user.component';\nexport * from './lib/views/account-summary/edit-account-name/edit-account-name.component';\nexport * from './lib/views/notifications/notifications.component';\nexport * from './lib/views/notifications/notification/notification.component';\nexport * from './lib/views/accounts/accounts.component';\nexport * from './lib/views/invitation/invitation.component';\nexport * from './lib/views/password-reset/password-reset.component';\n\nexport * from './ng-kiniauth.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.AuthenticationService","_","i2.KiniAuthModuleConfig","i3.AuthenticationService","i1","i2.AccountService","i4.EditNameComponent","i5.EditEmailComponent","i6.TwoFactorComponent","i7.InlineModalComponent","i8.EditBackupEmailComponent","i9.EditMobileComponent","i10.EditAccountNameComponent","i11.ChangePasswordComponent","i2.AuthenticationService","i4","i1.ContactService","i2","i3","i4.ContactService","i5","Subject","i1.UserService","i7","i8","i3.RoleService","i4.AuthenticationService","i6","i8.EditRolesComponent","i1.RoleService","i4.UserService","i9.EditRolesComponent","i1.NotificationService","i9","i2.NotificationService","i1.AccountService","BehaviorSubject"],"mappings":"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"}},"fesm2015":{"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Component, Input, Injectable, EventEmitter, ViewEncapsulation, Output, Directive, NgModule } from '@angular/core';\nimport { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/internal/BehaviorSubject';\nimport * as lodash from 'lodash';\nimport * as sha512 from 'js-sha512';\nimport * as i3$1 from '@angular/common/http';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { debounceTime, distinctUntilChanged, switchMap, map } from 'rxjs/operators';\nimport * as i1 from 'ng-kinibind';\nimport { KinibindModel, NgKinibindModule } from 'ng-kinibind';\nimport * as i2$1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs/internal/Subject';\nimport * as i2 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i5 from 'ng-recaptcha';\nimport { RecaptchaModule } from 'ng-recaptcha';\nimport { BehaviorSubject, Subject as Subject$1, merge } from 'rxjs';\nimport * as i6 from '@angular/material/paginator';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport * as i6$1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i9 from '@angular/material/menu';\nimport { MatMenuModule } from '@angular/material/menu';\nimport * as i7$1 from '@angular/material/tabs';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport * as i7$2 from '@angular/material/table';\nimport { MatTableModule } from '@angular/material/table';\nimport * as i8 from '@angular/material/chips';\nimport { MatChipsModule } from '@angular/material/chips';\nimport * as i9$1 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nclass BaseComponent {\n    constructor(kcAuthService) {\n        this.kcAuthService = kcAuthService;\n    }\n    ngOnInit() {\n        this.authService = this.authenticationService ? this.authenticationService : this.kcAuthService;\n    }\n}\nBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: BaseComponent, deps: [{ token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: BaseComponent, selector: \"ka-base-component\", inputs: { authenticationService: \"authenticationService\" }, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: BaseComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ka-base-component',\n                    template: ''\n                }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }]; }, propDecorators: { authenticationService: [{\n                type: Input\n            }] } });\n\nconst _$9 = lodash.default;\nclass AccountService {\n    constructor(kbRequest, config, authService) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n        this.authService = authService;\n    }\n    getAccount(accountId) {\n        const accountString = accountId ? `/${accountId}` : '';\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account' + accountString).toPromise()\n            .catch(err => {\n            return null;\n        });\n    }\n    searchForAccounts(searchString, limit, offset) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account', {\n            params: _$9.pickBy({ searchString, limit, offset }, _$9.identity)\n        });\n    }\n    createAccount(accountName, emailAddress = null, rawPassword = null, name = null) {\n        let password = rawPassword;\n        if (rawPassword) {\n            password = this.authService.getHashedPassword(rawPassword, emailAddress, true);\n        }\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account', _$9.omitBy({ accountName, emailAddress, password, name }, _$9.isNil)).toPromise();\n    }\n    suspendAccount(accountId, note) {\n        return this.kbRequest.makeRequest('PUT', this.config.accessHttpURL + '/account/' + accountId + '/suspend', {\n            params: { note }\n        })\n            .toPromise();\n    }\n    updateAccountName(accountId, newAccountName) {\n        return this.kbRequest.makeRequest('PUT', this.config.accessHttpURL + '/account/' + accountId + '/name', {\n            params: { newAccountName }\n        })\n            .toPromise();\n    }\n    reactivateAccount(accountId, note) {\n        return this.kbRequest.makeRequest('PUT', this.config.accessHttpURL + '/account/' + accountId + '/reactivate', {\n            params: { note }\n        })\n            .toPromise();\n    }\n    changeAccountName(newName, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account/changeName', {\n            newName,\n            password: this.authService.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return true;\n            }\n        });\n    }\n    inviteUserToAccount(emailAddress, assignedRoles) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account/invite?emailAddress=' + emailAddress, assignedRoles).toPromise();\n    }\n}\nAccountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Injectable });\nAccountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }, { type: AuthenticationService }]; } });\n\nclass EditNameComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newName = '';\n        this.currentPassword = '';\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    ngOnDestroy() {\n    }\n    saveNewName() {\n        this.saveError = '';\n        this.authService.changeUserName(this.newName, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            this.saveError = 'There was a problem updating your details, please check and try again.';\n        });\n    }\n}\nEditNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditNameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditNameComponent, selector: \"ka-edit-name\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your user name. You will be required to confirm you identity by entering your password\\n                prior to saving the new name.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new name you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newName\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newName || !currentPassword\\\" (click)=\\\"saveNewName()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Save Changes</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditNameComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-name', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your user name. You will be required to confirm you identity by entering your password\\n                prior to saving the new name.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new name you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newName\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newName || !currentPassword\\\" (click)=\\\"saveNewName()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Save Changes</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass EditEmailComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newEmailAddress = '';\n        this.currentPassword = '';\n        this.emailAvailable = true;\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    ngOnDestroy() {\n    }\n    checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n    saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserEmailAddress(this.newEmailAddress, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            if (err.error.validationErrors.emailAddress.email.errorMessage) {\n                this.saveError = 'Email error: ' + err.error.validationErrors.emailAddress.email.errorMessage;\n            }\n            else {\n                this.saveError = 'There was a problem changing the email address, please check and try again.';\n            }\n        });\n    }\n}\nEditEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditEmailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditEmailComponent, selector: \"ka-edit-email\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your email address. You will be required to confirm you identity by entering your password\\n                prior to saving the new email address.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new email address you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"email\\\" #email=\\\"ngModel\\\" name=\\\"email\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n                               (change)=\\\"checkEmail()\\\" placeholder=\\\"New email address\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\\\"\\n                    (click)=\\\"saveEmailAddress()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update email address</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditEmailComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-email', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your email address. You will be required to confirm you identity by entering your password\\n                prior to saving the new email address.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new email address you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"email\\\" #email=\\\"ngModel\\\" name=\\\"email\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n                               (change)=\\\"checkEmail()\\\" placeholder=\\\"New email address\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\\\"\\n                    (click)=\\\"saveEmailAddress()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update email address</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass TwoFactorComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n            return user;\n        }).then(() => {\n            this.authService.generateTwoFactorSettings().then(settings => {\n                this.settings = settings;\n            });\n        });\n    }\n    verifyCode() {\n        this.authService.authenticateNewTwoFactor(this.twoFACode, this.settings.secret)\n            .then(res => {\n            this.saved.emit(res);\n        });\n    }\n}\nTwoFactorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: TwoFactorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTwoFactorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: TwoFactorComponent, selector: \"ka-two-factor\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<ng-template [ngIf]=\\\"settings\\\">\\n    <div class=\\\"font-medium text-lg ml-6 mt-4\\\">Google Authenticator</div>\\n\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            After downloading and installing the Google Authenticator app, scan the QR code below\\n                            to link your account.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <img [src]=\\\"settings.qrCode\\\" alt=\\\"\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            If you are unable to scan the QR code below, please enter the following code...</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"text\\\" name=\\\"name\\\" [value]=\\\"settings.secret\\\" disabled\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md cursor-text\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Once linked, please enter the verification code you see in the Google Authenticator app\\n                            below.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"twoFACode\\\" maxlength=\\\"10\\\"\\n                                   placeholder=\\\"Enter verification code\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n\\n                            <button type=\\\"button\\\" [disabled]=\\\"!twoFACode\\\" (click)=\\\"verifyCode()\\\"\\n                                    class=\\\"mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                                Verify Code\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"font-medium ml-6 text-lg\\\">Backup Codes</div>\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            The following one-time codes can be used if you need to gain access to your account in an\\n                            emergency.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <div *ngFor=\\\"let code of settings.backupCodes\\\">{{code}}</div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: TwoFactorComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-two-factor', encapsulation: ViewEncapsulation.None, template: \"<ng-template [ngIf]=\\\"settings\\\">\\n    <div class=\\\"font-medium text-lg ml-6 mt-4\\\">Google Authenticator</div>\\n\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            After downloading and installing the Google Authenticator app, scan the QR code below\\n                            to link your account.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <img [src]=\\\"settings.qrCode\\\" alt=\\\"\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            If you are unable to scan the QR code below, please enter the following code...</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"text\\\" name=\\\"name\\\" [value]=\\\"settings.secret\\\" disabled\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md cursor-text\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Once linked, please enter the verification code you see in the Google Authenticator app\\n                            below.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"twoFACode\\\" maxlength=\\\"10\\\"\\n                                   placeholder=\\\"Enter verification code\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n\\n                            <button type=\\\"button\\\" [disabled]=\\\"!twoFACode\\\" (click)=\\\"verifyCode()\\\"\\n                                    class=\\\"mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                                Verify Code\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"font-medium ml-6 text-lg\\\">Backup Codes</div>\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n            <div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            The following one-time codes can be used if you need to gain access to your account in an\\n                            emergency.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <div *ngFor=\\\"let code of settings.backupCodes\\\">{{code}}</div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass InlineModalComponent {\n    constructor() {\n        this.closed = new EventEmitter();\n    }\n    ngOnInit() {\n    }\n    back() {\n        this.closed.emit(true);\n    }\n}\nInlineModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InlineModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nInlineModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: InlineModalComponent, selector: \"ka-inline-modal\", outputs: { closed: \"closed\" }, ngImport: i0, template: \"<div class=\\\"inline-modal\\\">\\n\\n    <div class=\\\"flex pt2 px2 justify-end\\\">\\n        <a class=\\\"close-link\\\" (click)=\\\"back()\\\">\\n            &#10005;\\n        </a>\\n    </div>\\n\\n    <div class=\\\"grid grid-desktop my2 px1\\\">\\n\\n        <ng-content></ng-content>\\n\\n    </div>\\n\\n\\n</div>\\n\", styles: [\".inline-modal{background-color:#f5f5f5;position:absolute;inset:0;z-index:99;height:calc(100vh - 110px)}.inline-modal .close-link{font-size:1.4rem;text-decoration:none}\\n\"], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InlineModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-inline-modal', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"inline-modal\\\">\\n\\n    <div class=\\\"flex pt2 px2 justify-end\\\">\\n        <a class=\\\"close-link\\\" (click)=\\\"back()\\\">\\n            &#10005;\\n        </a>\\n    </div>\\n\\n    <div class=\\\"grid grid-desktop my2 px1\\\">\\n\\n        <ng-content></ng-content>\\n\\n    </div>\\n\\n\\n</div>\\n\", styles: [\".inline-modal{background-color:#f5f5f5;position:absolute;inset:0;z-index:99;height:calc(100vh - 110px)}.inline-modal .close-link{font-size:1.4rem;text-decoration:none}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { closed: [{\n                type: Output,\n                args: ['closed']\n            }] } });\n\nclass EditBackupEmailComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newEmailAddress = '';\n        this.currentPassword = '';\n        this.emailAvailable = true;\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n    saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserBackEmailAddress(this.newEmailAddress, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            this.saveError = 'There was a problem changing the email address, please check and try again.';\n        });\n    }\n}\nEditBackupEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditBackupEmailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditBackupEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditBackupEmailComponent, selector: \"ka-edit-backup-email\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your backup email address. You will be required to confirm you identity by entering your password\\n                prior to saving the new email address.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new email address you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"email\\\" placeholder=\\\"New email address\\\" name=\\\"email\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n                               (change)=\\\"checkEmail()\\\" email #email=\\\"ngModel\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\\\"\\n                    (click)=\\\"saveEmailAddress()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update email address</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.EmailValidator, selector: \"[email][formControlName],[email][formControl],[email][ngModel]\", inputs: [\"email\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditBackupEmailComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-backup-email', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your backup email address. You will be required to confirm you identity by entering your password\\n                prior to saving the new email address.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new email address you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"email\\\" placeholder=\\\"New email address\\\" name=\\\"email\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n                               (change)=\\\"checkEmail()\\\" email #email=\\\"ngModel\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n                        <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\\\"\\n                    (click)=\\\"saveEmailAddress()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update email address</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass EditMobileComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newMobile = '';\n        this.currentPassword = '';\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    saveMobileNumber() {\n        this.saveError = '';\n        this.authService.changeUserMobile(this.newMobile, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            if (err.error.validationErrors.mobileNumber.regexp.errorMessage) {\n                this.saveError = 'Number error: ' + err.error.validationErrors.mobileNumber.regexp.errorMessage;\n            }\n            else {\n                this.saveError = 'There was a problem changing the mobile number, please check and try again.';\n            }\n        });\n    }\n}\nEditMobileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditMobileComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditMobileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditMobileComponent, selector: \"ka-edit-mobile\", inputs: { authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your mobile number. You will be required to confirm you identity by entering your password\\n                prior to saving the new number.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new mobile number you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newMobile\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newMobile || !currentPassword\\\" (click)=\\\"saveMobileNumber()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update mobile number</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditMobileComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-mobile', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your mobile number. You will be required to confirm you identity by entering your password\\n                prior to saving the new number.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new mobile number you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newMobile\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newMobile || !currentPassword\\\" (click)=\\\"saveMobileNumber()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Update mobile number</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass EditAccountNameComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.newName = '';\n        this.currentPassword = '';\n    }\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n    ngOnDestroy() {\n    }\n    saveNewName() {\n        this.saveError = '';\n        this.accountService.changeAccountName(this.newName, this.currentPassword)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            this.saveError = 'There was a problem changing the account name, please check and try again.';\n        });\n    }\n}\nEditAccountNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditAccountNameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditAccountNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditAccountNameComponent, selector: \"ka-edit-account-name\", inputs: { authService: \"authService\", accountService: \"accountService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your account name. You will be required to confirm you identity by entering your password\\n                prior to saving the new name.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new name you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newName\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newName || !currentPassword\\\" (click)=\\\"saveNewName()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Save Changes</button>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditAccountNameComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-account-name', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n        <div>\\n            <div class=\\\"mb-8\\\">\\n                Change your account name. You will be required to confirm you identity by entering your password\\n                prior to saving the new name.\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter the new name you want to use.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"newName\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                    <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                        Enter current password to confirm name change.</label>\\n                    <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                        <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"currentPassword\\\"\\n                               class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"pt-5\\\">\\n        <div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex align-center error text-red-600\\\">\\n            {{saveError}}\\n        </div>\\n\\n        <div class=\\\"flex justify-end\\\">\\n            <button type=\\\"button\\\" [disabled]=\\\"!newName || !currentPassword\\\" (click)=\\\"saveNewName()\\\"\\n                    class=\\\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                Save Changes</button>\\n        </div>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { authService: [{\n                type: Input\n            }], accountService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nconst _$8 = lodash.default;\nclass ChangePasswordComponent {\n    constructor() {\n        this.saved = new EventEmitter();\n        this.saveError = false;\n        this.changeComplete = false;\n        this.isLengthOk = false;\n        this.isLowerCaseOk = false;\n        this.isUpperCaseOk = false;\n        this.isDigitOk = false;\n        this.isSpecialOk = false;\n        this.isPasswordOk = false;\n    }\n    ngOnInit() {\n    }\n    passwordChange() {\n        const strongPassword = new RegExp('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})');\n        this.isPasswordOk = strongPassword.test(this.password);\n        const lower = new RegExp('(?=.*[a-z])');\n        const upper = new RegExp('(?=.*[A-Z])');\n        const digit = new RegExp('(?=.*[0-9])');\n        const special = new RegExp('(?=.*[^A-Za-z0-9])');\n        const length = new RegExp('(?=.{8,})');\n        this.isLengthOk = length.test(this.password);\n        this.isLowerCaseOk = lower.test(this.password);\n        this.isUpperCaseOk = upper.test(this.password);\n        this.isDigitOk = digit.test(this.password);\n        this.isSpecialOk = special.test(this.password);\n    }\n    saveNewPassword() {\n        this.saveError = false;\n        this.authService.changeUserPassword(this.confirmPassword, this.existingPassword, this.email)\n            .then(() => {\n            this.changeComplete = true;\n            setTimeout(() => {\n                this.saved.emit(Date.now());\n            }, 3000);\n        })\n            .catch(err => {\n            this.saveError = true;\n            setTimeout(() => {\n                this.saved.emit(Date.now());\n            }, 3000);\n        });\n    }\n}\nChangePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ChangePasswordComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChangePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: ChangePasswordComponent, selector: \"ka-change-password\", inputs: { email: \"email\", authService: \"authService\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n              d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n    </svg>\\n    <div class=\\\"text-lg\\\">There was a problem changing your password at this time, please check your details and\\n        try again.\\n    </div>\\n</div>\\n\\n<div *ngIf=\\\"changeComplete\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n    </svg>\\n    <div class=\\\"text-lg\\\">Your password has been successfully changed.</div>\\n</div>\\n<ng-template [ngIf]=\\\"!saveError && !changeComplete\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n\\n            <div>\\n                <div class=\\\"mb-8\\\">\\n                    Change your existing password. You will need to enter your current password to confirm the changes.\\n                </div>\\n                <div class=\\\"font-medium text-base mb-4\\\">New Password</div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Enter the new password to use.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2 \\\">\\n                            <input type=\\\"password\\\" name=\\\"name\\\" [(ngModel)]=\\\"password\\\" (ngModelChange)=\\\"passwordChange()\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n\\n                            <div class=\\\"mt-2 text-gray-500\\\">\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isLengthOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isLengthOk, invisible: !isLengthOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                          class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>8 characters</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isLowerCaseOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isLowerCaseOk, invisible: !isLowerCaseOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one lower case</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isUpperCaseOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isUpperCaseOk, invisible: !isUpperCaseOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one upper case</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isDigitOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isDigitOk, invisible: !isDigitOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one number</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isSpecialOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isSpecialOk, invisible: !isSpecialOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one special character</b>\\n                                </div>\\n                            </div>\\n\\n\\n                        </div>\\n\\n                    </div>\\n                </div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Confirm new password.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                            <span class=\\\"text-sm text-red-600\\\"\\n                                  [ngClass]=\\\"{visible: confirmPassword && password !== confirmPassword, invisible: !confirmPassword || password === confirmPassword}\\\">Passwords do not match</span>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"font-medium text-base my-4\\\">Existing Password</div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Enter your existing password.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"password\\\" name=\\\"name\\\" [(ngModel)]=\\\"existingPassword\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"pt-5\\\">\\n            <div class=\\\"flex justify-end\\\">\\n                <button type=\\\"button\\\" (click)=\\\"saveNewPassword()\\\"\\n                        [disabled]=\\\"!isPasswordOk || !existingPassword || (!confirmPassword || confirmPassword !== password)\\\"\\n                        class=\\\"disabled:opacity-50 ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                    Save New Password\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ChangePasswordComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-change-password', template: \"<div *ngIf=\\\"saveError\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n              d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n    </svg>\\n    <div class=\\\"text-lg\\\">There was a problem changing your password at this time, please check your details and\\n        try again.\\n    </div>\\n</div>\\n\\n<div *ngIf=\\\"changeComplete\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n    </svg>\\n    <div class=\\\"text-lg\\\">Your password has been successfully changed.</div>\\n</div>\\n<ng-template [ngIf]=\\\"!saveError && !changeComplete\\\">\\n    <div class=\\\"space-y-8 divide-y divide-gray-200 p-6\\\">\\n        <div class=\\\"space-y-8 divide-y divide-gray-200 sm:space-y-5\\\">\\n\\n            <div>\\n                <div class=\\\"mb-8\\\">\\n                    Change your existing password. You will need to enter your current password to confirm the changes.\\n                </div>\\n                <div class=\\\"font-medium text-base mb-4\\\">New Password</div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Enter the new password to use.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2 \\\">\\n                            <input type=\\\"password\\\" name=\\\"name\\\" [(ngModel)]=\\\"password\\\" (ngModelChange)=\\\"passwordChange()\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n\\n                            <div class=\\\"mt-2 text-gray-500\\\">\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isLengthOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isLengthOk, invisible: !isLengthOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                          class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>8 characters</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isLowerCaseOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isLowerCaseOk, invisible: !isLowerCaseOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one lower case</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isUpperCaseOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isUpperCaseOk, invisible: !isUpperCaseOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one upper case</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isDigitOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isDigitOk, invisible: !isDigitOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one number</b>\\n                                </div>\\n                                <div class=\\\"flex items-center\\\" [ngClass]=\\\"{'text-green-500': isSpecialOk}\\\">\\n                                    <svg [ngClass]=\\\"{visible: isSpecialOk, invisible: !isSpecialOk}\\\"\\n                                         xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"\\n                                         class=\\\"w-5 h-5 mr-2\\\">\\n                                        <path fill-rule=\\\"evenodd\\\" d=\\\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\\\" clip-rule=\\\"evenodd\\\" />\\n                                    </svg>\\n                                    At least&nbsp;<b>one special character</b>\\n                                </div>\\n                            </div>\\n\\n\\n                        </div>\\n\\n                    </div>\\n                </div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Confirm new password.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                            <span class=\\\"text-sm text-red-600\\\"\\n                                  [ngClass]=\\\"{visible: confirmPassword && password !== confirmPassword, invisible: !confirmPassword || password === confirmPassword}\\\">Passwords do not match</span>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div>\\n                <div class=\\\"font-medium text-base my-4\\\">Existing Password</div>\\n                <div class=\\\"space-y-6 sm:space-y-5\\\">\\n                    <div class=\\\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\\\">\\n                        <label class=\\\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\\\">\\n                            Enter your existing password.</label>\\n                        <div class=\\\"mt-1 sm:mt-0 sm:col-span-2\\\">\\n                            <input type=\\\"password\\\" name=\\\"name\\\" [(ngModel)]=\\\"existingPassword\\\"\\n                                   class=\\\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"pt-5\\\">\\n            <div class=\\\"flex justify-end\\\">\\n                <button type=\\\"button\\\" (click)=\\\"saveNewPassword()\\\"\\n                        [disabled]=\\\"!isPasswordOk || !existingPassword || (!confirmPassword || confirmPassword !== password)\\\"\\n                        class=\\\"disabled:opacity-50 ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\\\">\\n                    Save New Password\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n</ng-template>\\n\" }]\n        }], ctorParameters: function () { return []; }, propDecorators: { email: [{\n                type: Input\n            }], authService: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass AccountSummaryComponent extends BaseComponent {\n    constructor(kcAuthService, accountService) {\n        super(kcAuthService);\n        this.accountService = accountService;\n        this.showPasswordReset = true;\n        this.showAccountDetails = true;\n        this.reloadTwoFactor = new Subject();\n        this.isLoading = true;\n        this.editName = false;\n        this.editAccountName = false;\n        this.editEmail = false;\n        this.editMobile = false;\n        this.editBackup = false;\n        this.enableTwoFa = false;\n        this.changePassword = false;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.loadAccount();\n        this.userSub = this.authService.authUser.subscribe(user => this.security = user);\n        return this.authService.getLoggedInUser();\n    }\n    ngOnDestroy() {\n        this.userSub.unsubscribe();\n    }\n    loadAccount() {\n        this.editAccountName = false;\n        this.accountService.getAccount().then(account => {\n            this.account = account;\n        });\n    }\n    resetAccountPassword() {\n        const message = 'We are going to reset the account password to a temporary one and email the registered ' +\n            'email address. Are you sure you wish to proceed?';\n        if (window.confirm(message)) {\n            this.authService.resetAccountPassword();\n        }\n    }\n    disable2FA() {\n        const message = 'Are you sure you would like to turn off Two Factor Authentication?';\n        if (window.confirm(message)) {\n            this.authService.disableTwoFactor().then(() => {\n                this.reloadTwoFactor.next(true);\n            });\n        }\n    }\n}\nAccountSummaryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountSummaryComponent, deps: [{ token: AuthenticationService }, { token: AccountService }], target: i0.ɵɵFactoryTarget.Component });\nAccountSummaryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: AccountSummaryComponent, selector: \"ka-account-summary\", inputs: { authenticationService: \"authenticationService\", showPasswordReset: \"showPasswordReset\", showAccountDetails: \"showAccountDetails\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template [ngIf]=\\\"!editName && !editEmail && !editBackup && !editMobile && !enableTwoFa && !changePassword\\\">\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\" *ngIf=\\\"account && showAccountDetails\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Account Details</h4>\\n\\n            <p class=\\\"mb0\\\" *ngIf=\\\"security\\\">Your account name is currently set to\\n                <strong>{{account.name}}</strong></p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editAccountName = true;\\\">Edit Account Name\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <img src=\\\"https://www.gravatar.com/avatar/{{security.hashedEmail}}?d=mp\\\" height=\\\"40\\\" alt=\\\"user-gravatar\\\"\\n                     class=\\\"mr1 mr-4\\\">\\n                {{security.name}}\\n            </h4>\\n\\n            <div class=\\\"mb1\\\">\\n                <p *ngIf=\\\"security\\\">If you need to update your name, you can do so here.</p>\\n            </div>\\n\\n            <div *ngIf=\\\"security\\\">\\n                <p class=\\\"mb0\\\">Your user icon is based on your Gravatar image. You can easily create/edit your image by visiting the <a href=\\\"https://gravatar.com\\\" target=\\\"_blank\\\">Gravatar website.</a></p>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editName = true;\\\">Edit Name\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Email Address</h4>\\n\\n            <p class=\\\"mb0\\\" *ngIf=\\\"security\\\">Your account email address is currently set to\\n                <strong>{{security.emailAddress}}</strong></p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editEmail = true;\\\">Edit Email\\n                Address\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\" *ngIf=\\\"showPasswordReset\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Password</h4>\\n\\n            <p class=\\\"mb0\\\">Change your existing password.</p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"changePassword = true\\\">Change Password</button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Mobile Phone Number</h4>\\n\\n            <p *ngIf=\\\"security && security.mobileNumber\\\">Your mobile number is currently set to\\n                <strong>{{security.mobileNumber}}</strong></p>\\n\\n            <p *ngIf=\\\"security && !security.mobileNumber\\\"><strong>\\n                No mobile number has been set.\\n            </strong></p>\\n\\n            <p class=\\\"mb0\\\">\\n                We use your mobile phone number as an extra layer of security. It can also be used to help restore\\n                access to your account.\\n            </p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editMobile = true;\\\">Edit Mobile Number</button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Backup Email Address</h4>\\n\\n            <p *ngIf=\\\"security && security.backupEmailAddress\\\">Your account backup email address is currently set to\\n                <strong>{{security.backupEmailAddress}}</strong></p>\\n\\n            <p *ngIf=\\\"security && !security.backupEmailAddress\\\"><strong>\\n                No backup email address has been set.\\n            </strong></p>\\n\\n            <p class=\\\"mb0\\\">\\n                In the event you need to restore access to your account we can use this secondary email address\\n                to help you gain access.\\n            </p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editBackup = true;\\\">Edit Email Address</button>\\n        </div>\\n\\n    </div>\\n\\n<!--    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">-->\\n\\n<!--        <div class=\\\"actioninfo p2w p1m\\\">-->\\n<!--            <h4 class=\\\"mb1 mt0\\\">Two Factor Authentication</h4>-->\\n\\n<!--            <p class=\\\"mb0\\\">-->\\n<!--                To increase security on your account you can enable two factor authentication. Currently this uses the-->\\n<!--                Google Authenticator app downloadable for your mobile device.-->\\n<!--            </p>-->\\n\\n<!--        </div>-->\\n<!--        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">-->\\n\\n<!--            <span *ngIf=\\\"!security\\\">Loading...</span>-->\\n\\n<!--            <button class=\\\"button small-button white-button\\\" (click)=\\\"enableTwoFa = true\\\"-->\\n<!--                    *ngIf=\\\"security && !security.twoFactorData\\\">-->\\n<!--                Enable 2FA-->\\n<!--            </button>-->\\n<!--            <button class=\\\"button small-button alert-button\\\" *ngIf=\\\"security && security.twoFactorData\\\"-->\\n<!--                    (click)=\\\"disable2FA()\\\">-->\\n<!--                Disable 2FA-->\\n<!--            </button>-->\\n<!--        </div>-->\\n\\n<!--    </div>-->\\n\\n</ng-template>\\n<ka-inline-modal *ngIf=\\\"editName\\\" (closed)=\\\"editName = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit User Name</div>\\n    <ka-edit-name [authService]=\\\"authService\\\" (saved)=\\\"editName = false;\\\"></ka-edit-name>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editAccountName\\\" (closed)=\\\"editAccountName = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Account Name</div>\\n    <ka-edit-account-name [accountService]=\\\"accountService\\\" [authService]=\\\"authService\\\" (saved)=\\\"loadAccount()\\\"></ka-edit-account-name>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editEmail\\\" (closed)=\\\"editEmail = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Email Address</div>\\n    <ka-edit-email [authService]=\\\"authService\\\" (saved)=\\\"editEmail = false;\\\"></ka-edit-email>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editMobile\\\" (closed)=\\\"editMobile = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Mobile Phone Number</div>\\n    <ka-edit-mobile [authService]=\\\"authService\\\" (saved)=\\\"editMobile = false;\\\"></ka-edit-mobile>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editBackup\\\" (closed)=\\\"editBackup = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Backup Email Address</div>\\n    <ka-edit-backup-email [authService]=\\\"authService\\\" (saved)=\\\"editBackup = false;\\\"></ka-edit-backup-email>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"enableTwoFa\\\" (closed)=\\\"enableTwoFa = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Enable Two Factor Authentication</div>\\n    <ka-two-factor [authService]=\\\"authService\\\" (saved)=\\\"enableTwoFa = false;\\\"></ka-two-factor>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"changePassword\\\" (closed)=\\\"changePassword = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Change Password</div>\\n    <ka-change-password [authService]=\\\"authService\\\" (saved)=\\\"changePassword = false;\\\" [email]=\\\"security.emailAddress\\\"></ka-change-password>\\n</ka-inline-modal>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: EditNameComponent, selector: \"ka-edit-name\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: EditEmailComponent, selector: \"ka-edit-email\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: TwoFactorComponent, selector: \"ka-two-factor\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: InlineModalComponent, selector: \"ka-inline-modal\", outputs: [\"closed\"] }, { kind: \"component\", type: EditBackupEmailComponent, selector: \"ka-edit-backup-email\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: EditMobileComponent, selector: \"ka-edit-mobile\", inputs: [\"authService\"], outputs: [\"saved\"] }, { kind: \"component\", type: EditAccountNameComponent, selector: \"ka-edit-account-name\", inputs: [\"authService\", \"accountService\"], outputs: [\"saved\"] }, { kind: \"component\", type: ChangePasswordComponent, selector: \"ka-change-password\", inputs: [\"email\", \"authService\"], outputs: [\"saved\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountSummaryComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-account-summary', encapsulation: ViewEncapsulation.None, template: \"<ng-template [ngIf]=\\\"!editName && !editEmail && !editBackup && !editMobile && !enableTwoFa && !changePassword\\\">\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\" *ngIf=\\\"account && showAccountDetails\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Account Details</h4>\\n\\n            <p class=\\\"mb0\\\" *ngIf=\\\"security\\\">Your account name is currently set to\\n                <strong>{{account.name}}</strong></p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editAccountName = true;\\\">Edit Account Name\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <img src=\\\"https://www.gravatar.com/avatar/{{security.hashedEmail}}?d=mp\\\" height=\\\"40\\\" alt=\\\"user-gravatar\\\"\\n                     class=\\\"mr1 mr-4\\\">\\n                {{security.name}}\\n            </h4>\\n\\n            <div class=\\\"mb1\\\">\\n                <p *ngIf=\\\"security\\\">If you need to update your name, you can do so here.</p>\\n            </div>\\n\\n            <div *ngIf=\\\"security\\\">\\n                <p class=\\\"mb0\\\">Your user icon is based on your Gravatar image. You can easily create/edit your image by visiting the <a href=\\\"https://gravatar.com\\\" target=\\\"_blank\\\">Gravatar website.</a></p>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editName = true;\\\">Edit Name\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Email Address</h4>\\n\\n            <p class=\\\"mb0\\\" *ngIf=\\\"security\\\">Your account email address is currently set to\\n                <strong>{{security.emailAddress}}</strong></p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editEmail = true;\\\">Edit Email\\n                Address\\n            </button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\" *ngIf=\\\"showPasswordReset\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Password</h4>\\n\\n            <p class=\\\"mb0\\\">Change your existing password.</p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"changePassword = true\\\">Change Password</button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Mobile Phone Number</h4>\\n\\n            <p *ngIf=\\\"security && security.mobileNumber\\\">Your mobile number is currently set to\\n                <strong>{{security.mobileNumber}}</strong></p>\\n\\n            <p *ngIf=\\\"security && !security.mobileNumber\\\"><strong>\\n                No mobile number has been set.\\n            </strong></p>\\n\\n            <p class=\\\"mb0\\\">\\n                We use your mobile phone number as an extra layer of security. It can also be used to help restore\\n                access to your account.\\n            </p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editMobile = true;\\\">Edit Mobile Number</button>\\n        </div>\\n\\n    </div>\\n\\n    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">\\n\\n        <div class=\\\"actioninfo p2w p1m\\\">\\n            <h4 class=\\\"mb1 mt0\\\">Backup Email Address</h4>\\n\\n            <p *ngIf=\\\"security && security.backupEmailAddress\\\">Your account backup email address is currently set to\\n                <strong>{{security.backupEmailAddress}}</strong></p>\\n\\n            <p *ngIf=\\\"security && !security.backupEmailAddress\\\"><strong>\\n                No backup email address has been set.\\n            </strong></p>\\n\\n            <p class=\\\"mb0\\\">\\n                In the event you need to restore access to your account we can use this secondary email address\\n                to help you gain access.\\n            </p>\\n\\n        </div>\\n        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n            <button class=\\\"button small-button white-button\\\" (click)=\\\"editBackup = true;\\\">Edit Email Address</button>\\n        </div>\\n\\n    </div>\\n\\n<!--    <div class=\\\"actionpanel sixtyforty mx1 mb2\\\">-->\\n\\n<!--        <div class=\\\"actioninfo p2w p1m\\\">-->\\n<!--            <h4 class=\\\"mb1 mt0\\\">Two Factor Authentication</h4>-->\\n\\n<!--            <p class=\\\"mb0\\\">-->\\n<!--                To increase security on your account you can enable two factor authentication. Currently this uses the-->\\n<!--                Google Authenticator app downloadable for your mobile device.-->\\n<!--            </p>-->\\n\\n<!--        </div>-->\\n<!--        <div class=\\\"actions flex flex-col align-center justify-center p1\\\">-->\\n\\n<!--            <span *ngIf=\\\"!security\\\">Loading...</span>-->\\n\\n<!--            <button class=\\\"button small-button white-button\\\" (click)=\\\"enableTwoFa = true\\\"-->\\n<!--                    *ngIf=\\\"security && !security.twoFactorData\\\">-->\\n<!--                Enable 2FA-->\\n<!--            </button>-->\\n<!--            <button class=\\\"button small-button alert-button\\\" *ngIf=\\\"security && security.twoFactorData\\\"-->\\n<!--                    (click)=\\\"disable2FA()\\\">-->\\n<!--                Disable 2FA-->\\n<!--            </button>-->\\n<!--        </div>-->\\n\\n<!--    </div>-->\\n\\n</ng-template>\\n<ka-inline-modal *ngIf=\\\"editName\\\" (closed)=\\\"editName = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit User Name</div>\\n    <ka-edit-name [authService]=\\\"authService\\\" (saved)=\\\"editName = false;\\\"></ka-edit-name>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editAccountName\\\" (closed)=\\\"editAccountName = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Account Name</div>\\n    <ka-edit-account-name [accountService]=\\\"accountService\\\" [authService]=\\\"authService\\\" (saved)=\\\"loadAccount()\\\"></ka-edit-account-name>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editEmail\\\" (closed)=\\\"editEmail = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Email Address</div>\\n    <ka-edit-email [authService]=\\\"authService\\\" (saved)=\\\"editEmail = false;\\\"></ka-edit-email>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editMobile\\\" (closed)=\\\"editMobile = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Mobile Phone Number</div>\\n    <ka-edit-mobile [authService]=\\\"authService\\\" (saved)=\\\"editMobile = false;\\\"></ka-edit-mobile>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"editBackup\\\" (closed)=\\\"editBackup = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Edit Backup Email Address</div>\\n    <ka-edit-backup-email [authService]=\\\"authService\\\" (saved)=\\\"editBackup = false;\\\"></ka-edit-backup-email>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"enableTwoFa\\\" (closed)=\\\"enableTwoFa = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Enable Two Factor Authentication</div>\\n    <ka-two-factor [authService]=\\\"authService\\\" (saved)=\\\"enableTwoFa = false;\\\"></ka-two-factor>\\n</ka-inline-modal>\\n\\n<ka-inline-modal *ngIf=\\\"changePassword\\\" (closed)=\\\"changePassword = false\\\">\\n    <div class=\\\"text-base font-medium text-gray-900 ml-6\\\">Change Password</div>\\n    <ka-change-password [authService]=\\\"authService\\\" (saved)=\\\"changePassword = false;\\\" [email]=\\\"security.emailAddress\\\"></ka-change-password>\\n</ka-inline-modal>\\n\" }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }, { type: AccountService }]; }, propDecorators: { authenticationService: [{\n                type: Input\n            }], showPasswordReset: [{\n                type: Input\n            }], showAccountDetails: [{\n                type: Input\n            }] } });\n\nclass LoginComponent extends BaseComponent {\n    constructor(router, kcAuthService) {\n        super(kcAuthService);\n        this.router = router;\n        this.preventRedirect = false;\n        this.loggedIn = new EventEmitter();\n        this.loading = false;\n        this.loginError = false;\n        this.twoFA = false;\n        this.twoFAError = false;\n        this.showRecaptcha = false;\n        this.activeSession = false;\n        this.forgottenPassword = false;\n        this.passwordResetSent = false;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.authService.sessionData.subscribe(session => {\n            if (session && session.delayedCaptchas && session.delayedCaptchas['guest/auth/login']) {\n                this.showRecaptcha = true;\n            }\n        });\n        return Promise.resolve(true);\n    }\n    recaptchaResolved(response) {\n        this.recaptchaResponse = response;\n    }\n    login() {\n        this.loginError = false;\n        if (this.email && this.password) {\n            this.loading = true;\n            const clientTwoFactorData = localStorage.getItem('clientTwoFactorData');\n            return this.authService.login(this.email, this.password, clientTwoFactorData || null, (this.showRecaptcha ? this.recaptchaResponse : null))\n                .then((res) => {\n                this.loading = false;\n                if (res === 'REQUIRES_2FA') {\n                    this.twoFA = true;\n                    return true;\n                }\n                else if (res === 'ACTIVE_SESSION') {\n                    this.activeSession = true;\n                }\n                else {\n                    this.loggedIn.emit(res);\n                    if (!this.preventRedirect) {\n                        return this.router.navigate([this.loginRoute || '/']);\n                    }\n                }\n            })\n                .catch(err => {\n                this.authService.getSessionData();\n                this.loginError = true;\n                this.loading = false;\n            });\n        }\n    }\n    sendForgottenPassword() {\n        this.authService.sendPasswordReset(this.forgottenEmail, this.recaptchaResponse).then(() => {\n            this.passwordResetSent = true;\n            setTimeout(() => {\n                window.location.reload();\n            }, 5000);\n        });\n    }\n    closeActiveSession() {\n        this.authService.closeActiveSession().then(res => {\n            if (res === 'REQUIRES_2FA') {\n                this.activeSession = false;\n                this.twoFA = true;\n                return true;\n            }\n            else if (res === 'ACTIVE_SESSION') {\n                this.activeSession = true;\n            }\n            else {\n                this.activeSession = false;\n                if (!this.preventRedirect) {\n                    return this.router.navigate([this.loginRoute || '/']);\n                }\n            }\n        });\n    }\n    checkUsername() {\n        this.authService.doesUserExist(this.email).then(res => {\n        });\n    }\n    authenticate() {\n        this.loading = true;\n        if (this.twoFACode) {\n            return this.authService.authenticateTwoFactor(this.twoFACode)\n                .then(clientTwoFactorData => {\n                this.loading = false;\n                if (clientTwoFactorData) {\n                    localStorage.setItem('clientTwoFactorData', String(clientTwoFactorData));\n                }\n                this.loggedIn.emit(clientTwoFactorData);\n                if (!this.preventRedirect) {\n                    return this.router.navigate([this.loginRoute || '/']);\n                }\n            })\n                .catch(error => {\n                this.authService.getSessionData();\n                this.twoFAError = true;\n                this.loading = false;\n                return error;\n            });\n        }\n    }\n}\nLoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: LoginComponent, deps: [{ token: i2$1.Router }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nLoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: LoginComponent, selector: \"ka-login\", inputs: { loginRoute: \"loginRoute\", recaptchaKey: \"recaptchaKey\", preventRedirect: \"preventRedirect\" }, outputs: { loggedIn: \"loggedIn\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"login\\\">\\n\\n    <div class=\\\"login-container\\\" *ngIf=\\\"!twoFA && !activeSession && !forgottenPassword\\\">\\n\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">Sign in to your account</h2>\\n\\n        <label>Enter your username or email address</label>\\n        <input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" required\\n               (change)=\\\"checkUsername()\\\">\\n\\n        <label>Enter your password</label>\\n        <input type=\\\"password\\\" placeholder=\\\"Password\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\"\\n               (keyup.enter)=\\\"login()\\\" required>\\n\\n        <p class=\\\"error\\\" *ngIf=\\\"loginError\\\">Email or password incorrect, please check and try again.</p>\\n\\n        <re-captcha class=\\\"mt-8\\\" *ngIf=\\\"showRecaptcha\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                    [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\\\"\\n            *ngIf=\\\"!loading\\\" (click)=\\\"login()\\\"\\n            [disabled]=\\\"!email || !password\\\">Sign in\\n        </button>\\n\\n        <a class=\\\"text-center text-secondary mt-4 cursor-pointer hover:underline\\\"\\n           (click)=\\\"forgottenPassword = true\\\">I've forgotten my password</a>\\n    </div>\\n\\n    <div class=\\\"login-container\\\" *ngIf=\\\"forgottenPassword\\\">\\n\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">\\n            Forgotten Password\\n        </h2>\\n\\n        <ng-template [ngIf]=\\\"!passwordResetSent\\\">\\n            <label>Enter your username or email address</label>\\n            <input type=\\\"text\\\" placeholder=\\\"Email address\\\" name=\\\"forgottenEmail\\\" [(ngModel)]=\\\"forgottenEmail\\\" required>\\n\\n            <re-captcha class=\\\"mt-8\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                        [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n\\n            <button\\n                class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-secondary focus:outline-none\\\"\\n                (click)=\\\"sendForgottenPassword()\\\" [disabled]=\\\"!forgottenEmail\\\">\\n                Request Password Reset\\n            </button>\\n        </ng-template>\\n\\n        <div *ngIf=\\\"passwordResetSent\\\" class=\\\"py-8 flex items-center justify-center\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-12 w-12 text-secondary mr-4\\\" fill=\\\"none\\\"\\n                 viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n            </svg>\\n            <div class=\\\"font-medium text-lg\\\">Password reset has been requested.</div>\\n        </div>\\n\\n        <a class=\\\"justify-center text-primary mt-4 cursor-pointer hover:underline flex items-center\\\"\\n           (click)=\\\"forgottenPassword = false; passwordResetSent = false\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-6 w-6\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\"\\n                 stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M11 17l-5-5m0 0l5-5m-5 5h12\\\"/>\\n            </svg>\\n            Back to login</a>\\n    </div>\\n\\n    <div class=\\\"two-fa-container\\\" *ngIf=\\\"activeSession\\\">\\n        <p class=\\\"text-center\\\">We have detected other active logged in sessions for your user account. To continue with\\n            this login and terminate any other active sessions please click the button below.</p>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-danger focus:outline-none\\\"\\n            (click)=\\\"closeActiveSession()\\\">Close my other sessions and\\n            continue\\n        </button>\\n    </div>\\n\\n    <div class=\\\"two-fa-container\\\" *ngIf=\\\"twoFA\\\">\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">Two Factor Authentication</h2>\\n\\n        <p>Enter your second factor authentication code.</p>\\n\\n        <input placeholder=\\\"Verification code\\\" [(ngModel)]=\\\"twoFACode\\\"\\n               (keyup.enter)=\\\"authenticate()\\\">\\n\\n        <p class=\\\"error py-4\\\" *ngIf=\\\"twoFAError\\\">Invalid code, please try again.</p>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\\\"\\n            *ngIf=\\\"!loading\\\" (click)=\\\"authenticate()\\\"\\n            [disabled]=\\\"!twoFACode\\\">Login\\n        </button>\\n\\n    </div>\\n\\n</div>\\n\", styles: [\".login{padding:0 2rem 2rem;display:flex;align-items:center;flex-direction:column}.login h1{font-weight:200}.login .login-container,.login .two-fa-container{display:flex;flex-direction:column;justify-content:center;max-width:450px;width:100%}.login .login-container label,.login .two-fa-container label{display:block;font-size:.9rem;font-weight:600;padding:1rem 0 .25rem;max-width:100%}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i5.RecaptchaComponent, selector: \"re-captcha\", inputs: [\"id\", \"siteKey\", \"theme\", \"type\", \"size\", \"badge\", \"tabIndex\"], outputs: [\"resolved\"], exportAs: [\"reCaptcha\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: LoginComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-login', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"login\\\">\\n\\n    <div class=\\\"login-container\\\" *ngIf=\\\"!twoFA && !activeSession && !forgottenPassword\\\">\\n\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">Sign in to your account</h2>\\n\\n        <label>Enter your username or email address</label>\\n        <input type=\\\"text\\\" placeholder=\\\"Username\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" required\\n               (change)=\\\"checkUsername()\\\">\\n\\n        <label>Enter your password</label>\\n        <input type=\\\"password\\\" placeholder=\\\"Password\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\"\\n               (keyup.enter)=\\\"login()\\\" required>\\n\\n        <p class=\\\"error\\\" *ngIf=\\\"loginError\\\">Email or password incorrect, please check and try again.</p>\\n\\n        <re-captcha class=\\\"mt-8\\\" *ngIf=\\\"showRecaptcha\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                    [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\\\"\\n            *ngIf=\\\"!loading\\\" (click)=\\\"login()\\\"\\n            [disabled]=\\\"!email || !password\\\">Sign in\\n        </button>\\n\\n        <a class=\\\"text-center text-secondary mt-4 cursor-pointer hover:underline\\\"\\n           (click)=\\\"forgottenPassword = true\\\">I've forgotten my password</a>\\n    </div>\\n\\n    <div class=\\\"login-container\\\" *ngIf=\\\"forgottenPassword\\\">\\n\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">\\n            Forgotten Password\\n        </h2>\\n\\n        <ng-template [ngIf]=\\\"!passwordResetSent\\\">\\n            <label>Enter your username or email address</label>\\n            <input type=\\\"text\\\" placeholder=\\\"Email address\\\" name=\\\"forgottenEmail\\\" [(ngModel)]=\\\"forgottenEmail\\\" required>\\n\\n            <re-captcha class=\\\"mt-8\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                        [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n\\n            <button\\n                class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-secondary focus:outline-none\\\"\\n                (click)=\\\"sendForgottenPassword()\\\" [disabled]=\\\"!forgottenEmail\\\">\\n                Request Password Reset\\n            </button>\\n        </ng-template>\\n\\n        <div *ngIf=\\\"passwordResetSent\\\" class=\\\"py-8 flex items-center justify-center\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-12 w-12 text-secondary mr-4\\\" fill=\\\"none\\\"\\n                 viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n            </svg>\\n            <div class=\\\"font-medium text-lg\\\">Password reset has been requested.</div>\\n        </div>\\n\\n        <a class=\\\"justify-center text-primary mt-4 cursor-pointer hover:underline flex items-center\\\"\\n           (click)=\\\"forgottenPassword = false; passwordResetSent = false\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-6 w-6\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\"\\n                 stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M11 17l-5-5m0 0l5-5m-5 5h12\\\"/>\\n            </svg>\\n            Back to login</a>\\n    </div>\\n\\n    <div class=\\\"two-fa-container\\\" *ngIf=\\\"activeSession\\\">\\n        <p class=\\\"text-center\\\">We have detected other active logged in sessions for your user account. To continue with\\n            this login and terminate any other active sessions please click the button below.</p>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-danger focus:outline-none\\\"\\n            (click)=\\\"closeActiveSession()\\\">Close my other sessions and\\n            continue\\n        </button>\\n    </div>\\n\\n    <div class=\\\"two-fa-container\\\" *ngIf=\\\"twoFA\\\">\\n        <h2 class=\\\"mt-6 text-center text-3xl font-extrabold text-gray-900\\\">Two Factor Authentication</h2>\\n\\n        <p>Enter your second factor authentication code.</p>\\n\\n        <input placeholder=\\\"Verification code\\\" [(ngModel)]=\\\"twoFACode\\\"\\n               (keyup.enter)=\\\"authenticate()\\\">\\n\\n        <p class=\\\"error py-4\\\" *ngIf=\\\"twoFAError\\\">Invalid code, please try again.</p>\\n\\n        <button\\n            class=\\\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\\\"\\n            *ngIf=\\\"!loading\\\" (click)=\\\"authenticate()\\\"\\n            [disabled]=\\\"!twoFACode\\\">Login\\n        </button>\\n\\n    </div>\\n\\n</div>\\n\", styles: [\".login{padding:0 2rem 2rem;display:flex;align-items:center;flex-direction:column}.login h1{font-weight:200}.login .login-container,.login .two-fa-container{display:flex;flex-direction:column;justify-content:center;max-width:450px;width:100%}.login .login-container label,.login .two-fa-container label{display:block;font-size:.9rem;font-weight:600;padding:1rem 0 .25rem;max-width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i2$1.Router }, { type: AuthenticationService }]; }, propDecorators: { loginRoute: [{\n                type: Input\n            }], recaptchaKey: [{\n                type: Input\n            }], preventRedirect: [{\n                type: Input\n            }], loggedIn: [{\n                type: Output\n            }] } });\n\nclass ContactService {\n    constructor(kbRequest, config) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n    }\n    getContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact', {\n            params: {\n                contactId\n            }\n        }).toPromise();\n    }\n    getContacts() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/contacts').toPromise();\n    }\n    setDefaultContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/default', {\n            params: {\n                contactId: contactId\n            }\n        }).toPromise();\n    }\n    deleteContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/delete', {\n            params: {\n                contactId: contactId\n            }\n        }).toPromise();\n    }\n}\nContactService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }], target: i0.ɵɵFactoryTarget.Injectable });\nContactService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }]; } });\n\nclass AddressBookComponent {\n    constructor(contactService, kbRequest) {\n        this.contactService = contactService;\n        this.kbRequest = kbRequest;\n        this.contacts = new KinibindModel();\n        this.reload = new EventEmitter();\n    }\n    ngOnInit() {\n        this.contactService.getContacts().then(contacts => {\n            this.contacts.data = contacts;\n        });\n    }\n    deleteContact(contactId) {\n        const message = 'Are you sure you would like to delete this contact?';\n        if (window.confirm(message)) {\n            return this.contactService.deleteContact(contactId).then(() => {\n                this.reload.next(true);\n            });\n        }\n    }\n    makeDefault(contactId) {\n        return this.contactService.setDefaultContact(contactId).then(() => {\n            this.reload.next(true);\n        });\n    }\n}\nAddressBookComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AddressBookComponent, deps: [{ token: ContactService }, { token: i1.KinibindRequestService }], target: i0.ɵɵFactoryTarget.Component });\nAddressBookComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: AddressBookComponent, selector: \"ka-address-book\", inputs: { editContactURL: \"editContactURL\", deleteContactURL: \"deleteContactURL\", defaultContactURL: \"defaultContactURL\", source: \"source\" }, ngImport: i0, template: \"<div class=\\\"contacts-wrapper\\\">\\n\\n    <div class=\\\"contact-block new\\\" [routerLink]=\\\"[editContactURL]\\\">\\n        <span style=\\\"font-size: 2rem\\\"><b>+</b></span>\\n        <span>New Contact</span>\\n    </div>\\n\\n    <div class=\\\"contact-block existing\\\" *ngFor=\\\"let contact of contacts.data; let i = index\\\">\\n        <div class=\\\"contact-loading\\\" *ngIf=\\\"contactLoading === i\\\">\\n            <span style=\\\"color: white\\\">loading...</span>\\n        </div>\\n\\n        <div class=\\\"flex align-center justify-between\\\" style=\\\"width: 100%\\\">\\n            <p class=\\\"m0\\\"><strong>{{contact.name}}</strong></p>\\n            <a class=\\\"delete-method\\\" (click)=\\\"deleteContact(contact.id)\\\" style=\\\"text-decoration: none\\\">\\n                &#10005;\\n            </a>\\n        </div>\\n\\n        <p [innerHTML]=\\\"contact.htmlAddressLinesString\\\"></p>\\n        <p style=\\\"margin-bottom: 0\\\"><strong>Telephone: </strong>{{contact.telephoneNumber}}</p>\\n        <p><strong>Email: </strong>{{contact.emailAddress}}</p>\\n\\n        <div style=\\\"width: 100%\\\" class=\\\"flex align-center justify-between\\\">\\n            <p class=\\\"flex align-center confirm1 m0\\\" *ngIf=\\\"contact.defaultContact\\\">\\n                <span>&#10004;</span>&nbsp;&nbsp;Default contact\\n            </p>\\n            <button class=\\\"but butsm\\\" *ngIf=\\\"!contact.defaultContact\\\"\\n                    (click)=\\\"makeDefault(contact.id)\\\">\\n                Make Default\\n            </button>\\n            <a class=\\\"edit\\\" [routerLink]=\\\"[editContactURL + '/' + contact.id]\\\">\\n                Edit\\n            </a>\\n        </div>\\n\\n    </div>\\n\\n</div>\\n\", styles: [\".contacts-wrapper{display:flex;flex-wrap:wrap;padding:1rem}.contacts-wrapper .contact-block{position:relative;width:100%;padding:1rem;max-width:40%;min-width:290px;background-color:#fff;height:300px;border:1px solid #eee;margin:1%;display:flex;flex-direction:column;align-items:center}.contacts-wrapper .contact-block .delete-method{font-size:1.4rem;text-decoration:none;color:#8b0000}.contacts-wrapper .contact-block.new{justify-content:center}.contacts-wrapper .contact-block.new:hover{cursor:pointer;background-color:#f5f5f5}.contacts-wrapper .contact-block.add button{position:absolute;top:0;right:0}.contacts-wrapper .contact-block.existing{flex-direction:column;justify-content:space-between;align-items:flex-start}.contacts-wrapper .contact-block.existing .default{color:#3a3ec4;padding:5px 10px}.contacts-wrapper .contact-block.existing .edit,.contacts-wrapper .contact-block.existing .verified{align-self:flex-end}.contacts-wrapper .contact-block .contact-loading{position:absolute;inset:0;display:flex;justify-content:center;align-items:center;background-color:#0003;z-index:9}\\n\"], dependencies: [{ kind: \"directive\", type: i2$1.RouterLink, selector: \":not(a):not(area)[routerLink]\", inputs: [\"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i2$1.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AddressBookComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-address-book', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"contacts-wrapper\\\">\\n\\n    <div class=\\\"contact-block new\\\" [routerLink]=\\\"[editContactURL]\\\">\\n        <span style=\\\"font-size: 2rem\\\"><b>+</b></span>\\n        <span>New Contact</span>\\n    </div>\\n\\n    <div class=\\\"contact-block existing\\\" *ngFor=\\\"let contact of contacts.data; let i = index\\\">\\n        <div class=\\\"contact-loading\\\" *ngIf=\\\"contactLoading === i\\\">\\n            <span style=\\\"color: white\\\">loading...</span>\\n        </div>\\n\\n        <div class=\\\"flex align-center justify-between\\\" style=\\\"width: 100%\\\">\\n            <p class=\\\"m0\\\"><strong>{{contact.name}}</strong></p>\\n            <a class=\\\"delete-method\\\" (click)=\\\"deleteContact(contact.id)\\\" style=\\\"text-decoration: none\\\">\\n                &#10005;\\n            </a>\\n        </div>\\n\\n        <p [innerHTML]=\\\"contact.htmlAddressLinesString\\\"></p>\\n        <p style=\\\"margin-bottom: 0\\\"><strong>Telephone: </strong>{{contact.telephoneNumber}}</p>\\n        <p><strong>Email: </strong>{{contact.emailAddress}}</p>\\n\\n        <div style=\\\"width: 100%\\\" class=\\\"flex align-center justify-between\\\">\\n            <p class=\\\"flex align-center confirm1 m0\\\" *ngIf=\\\"contact.defaultContact\\\">\\n                <span>&#10004;</span>&nbsp;&nbsp;Default contact\\n            </p>\\n            <button class=\\\"but butsm\\\" *ngIf=\\\"!contact.defaultContact\\\"\\n                    (click)=\\\"makeDefault(contact.id)\\\">\\n                Make Default\\n            </button>\\n            <a class=\\\"edit\\\" [routerLink]=\\\"[editContactURL + '/' + contact.id]\\\">\\n                Edit\\n            </a>\\n        </div>\\n\\n    </div>\\n\\n</div>\\n\", styles: [\".contacts-wrapper{display:flex;flex-wrap:wrap;padding:1rem}.contacts-wrapper .contact-block{position:relative;width:100%;padding:1rem;max-width:40%;min-width:290px;background-color:#fff;height:300px;border:1px solid #eee;margin:1%;display:flex;flex-direction:column;align-items:center}.contacts-wrapper .contact-block .delete-method{font-size:1.4rem;text-decoration:none;color:#8b0000}.contacts-wrapper .contact-block.new{justify-content:center}.contacts-wrapper .contact-block.new:hover{cursor:pointer;background-color:#f5f5f5}.contacts-wrapper .contact-block.add button{position:absolute;top:0;right:0}.contacts-wrapper .contact-block.existing{flex-direction:column;justify-content:space-between;align-items:flex-start}.contacts-wrapper .contact-block.existing .default{color:#3a3ec4;padding:5px 10px}.contacts-wrapper .contact-block.existing .edit,.contacts-wrapper .contact-block.existing .verified{align-self:flex-end}.contacts-wrapper .contact-block .contact-loading{position:absolute;inset:0;display:flex;justify-content:center;align-items:center;background-color:#0003;z-index:9}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: ContactService }, { type: i1.KinibindRequestService }]; }, propDecorators: { editContactURL: [{\n                type: Input\n            }], deleteContactURL: [{\n                type: Input\n            }], defaultContactURL: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }] } });\n\nclass ContactDetailsComponent {\n    constructor(kbRequest, location, router, contactService) {\n        this.kbRequest = kbRequest;\n        this.location = location;\n        this.router = router;\n        this.contactService = contactService;\n        this.readOnlyAddress = true;\n        this.hiddenFields = [];\n        // @ViewChild('contactForm') public contactForm: NgForm;\n        this.loaded = new EventEmitter();\n        this.contactSaved = new EventEmitter();\n        this.contact = new KinibindModel();\n        this.countries = [];\n    }\n    ngOnInit() {\n        this.contactService.getContact(this.contactId).then(contact => {\n            this.contact.data = contact;\n        });\n        this.setCountries();\n    }\n    saved() {\n        if (this.savedRoute) {\n            if (this.savedRoute === 'BACK') {\n                this.location.back();\n            }\n            else {\n                this.router.navigate([this.savedRoute]);\n            }\n        }\n        else {\n            this.contactSaved.emit(this.contact.data);\n        }\n    }\n    setCountries() {\n        this.countries = [\n            { \"name\": \"United Kingdom\", \"code\": \"GB\" },\n            { \"name\": \"United States\", \"code\": \"US\" },\n            { \"name\": \"Afghanistan\", \"code\": \"AF\" },\n            { \"name\": \"Åland Islands\", \"code\": \"AX\" },\n            { \"name\": \"Albania\", \"code\": \"AL\" },\n            { \"name\": \"Algeria\", \"code\": \"DZ\" },\n            { \"name\": \"American Samoa\", \"code\": \"AS\" },\n            { \"name\": \"AndorrA\", \"code\": \"AD\" },\n            { \"name\": \"Angola\", \"code\": \"AO\" },\n            { \"name\": \"Anguilla\", \"code\": \"AI\" },\n            { \"name\": \"Antarctica\", \"code\": \"AQ\" },\n            { \"name\": \"Antigua and Barbuda\", \"code\": \"AG\" },\n            { \"name\": \"Argentina\", \"code\": \"AR\" },\n            { \"name\": \"Armenia\", \"code\": \"AM\" },\n            { \"name\": \"Aruba\", \"code\": \"AW\" },\n            { \"name\": \"Australia\", \"code\": \"AU\" },\n            { \"name\": \"Austria\", \"code\": \"AT\" },\n            { \"name\": \"Azerbaijan\", \"code\": \"AZ\" },\n            { \"name\": \"Bahamas\", \"code\": \"BS\" },\n            { \"name\": \"Bahrain\", \"code\": \"BH\" },\n            { \"name\": \"Bangladesh\", \"code\": \"BD\" },\n            { \"name\": \"Barbados\", \"code\": \"BB\" },\n            { \"name\": \"Belarus\", \"code\": \"BY\" },\n            { \"name\": \"Belgium\", \"code\": \"BE\" },\n            { \"name\": \"Belize\", \"code\": \"BZ\" },\n            { \"name\": \"Benin\", \"code\": \"BJ\" },\n            { \"name\": \"Bermuda\", \"code\": \"BM\" },\n            { \"name\": \"Bhutan\", \"code\": \"BT\" },\n            { \"name\": \"Bolivia\", \"code\": \"BO\" },\n            { \"name\": \"Bosnia and Herzegovina\", \"code\": \"BA\" },\n            { \"name\": \"Botswana\", \"code\": \"BW\" },\n            { \"name\": \"Bouvet Island\", \"code\": \"BV\" },\n            { \"name\": \"Brazil\", \"code\": \"BR\" },\n            { \"name\": \"British Indian Ocean Territory\", \"code\": \"IO\" },\n            { \"name\": \"Brunei Darussalam\", \"code\": \"BN\" },\n            { \"name\": \"Bulgaria\", \"code\": \"BG\" },\n            { \"name\": \"Burkina Faso\", \"code\": \"BF\" },\n            { \"name\": \"Burundi\", \"code\": \"BI\" },\n            { \"name\": \"Cambodia\", \"code\": \"KH\" },\n            { \"name\": \"Cameroon\", \"code\": \"CM\" },\n            { \"name\": \"Canada\", \"code\": \"CA\" },\n            { \"name\": \"Cape Verde\", \"code\": \"CV\" },\n            { \"name\": \"Cayman Islands\", \"code\": \"KY\" },\n            { \"name\": \"Central African Republic\", \"code\": \"CF\" },\n            { \"name\": \"Chad\", \"code\": \"TD\" },\n            { \"name\": \"Chile\", \"code\": \"CL\" },\n            { \"name\": \"China\", \"code\": \"CN\" },\n            { \"name\": \"Christmas Island\", \"code\": \"CX\" },\n            { \"name\": \"Cocos (Keeling) Islands\", \"code\": \"CC\" },\n            { \"name\": \"Colombia\", \"code\": \"CO\" },\n            { \"name\": \"Comoros\", \"code\": \"KM\" },\n            { \"name\": \"Congo\", \"code\": \"CG\" },\n            { \"name\": \"Congo, The Democratic Republic of the\", \"code\": \"CD\" },\n            { \"name\": \"Cook Islands\", \"code\": \"CK\" },\n            { \"name\": \"Costa Rica\", \"code\": \"CR\" },\n            { \"name\": \"Cote D'Ivoire\", \"code\": \"CI\" },\n            { \"name\": \"Croatia\", \"code\": \"HR\" },\n            { \"name\": \"Cuba\", \"code\": \"CU\" },\n            { \"name\": \"Cyprus\", \"code\": \"CY\" },\n            { \"name\": \"Czech Republic\", \"code\": \"CZ\" },\n            { \"name\": \"Denmark\", \"code\": \"DK\" },\n            { \"name\": \"Djibouti\", \"code\": \"DJ\" },\n            { \"name\": \"Dominica\", \"code\": \"DM\" },\n            { \"name\": \"Dominican Republic\", \"code\": \"DO\" },\n            { \"name\": \"Ecuador\", \"code\": \"EC\" },\n            { \"name\": \"Egypt\", \"code\": \"EG\" },\n            { \"name\": \"El Salvador\", \"code\": \"SV\" },\n            { \"name\": \"Equatorial Guinea\", \"code\": \"GQ\" },\n            { \"name\": \"Eritrea\", \"code\": \"ER\" },\n            { \"name\": \"Estonia\", \"code\": \"EE\" },\n            { \"name\": \"Ethiopia\", \"code\": \"ET\" },\n            { \"name\": \"Falkland Islands (Malvinas)\", \"code\": \"FK\" },\n            { \"name\": \"Faroe Islands\", \"code\": \"FO\" },\n            { \"name\": \"Fiji\", \"code\": \"FJ\" },\n            { \"name\": \"Finland\", \"code\": \"FI\" },\n            { \"name\": \"France\", \"code\": \"FR\" },\n            { \"name\": \"French Guiana\", \"code\": \"GF\" },\n            { \"name\": \"French Polynesia\", \"code\": \"PF\" },\n            { \"name\": \"French Southern Territories\", \"code\": \"TF\" },\n            { \"name\": \"Gabon\", \"code\": \"GA\" },\n            { \"name\": \"Gambia\", \"code\": \"GM\" },\n            { \"name\": \"Georgia\", \"code\": \"GE\" },\n            { \"name\": \"Germany\", \"code\": \"DE\" },\n            { \"name\": \"Ghana\", \"code\": \"GH\" },\n            { \"name\": \"Gibraltar\", \"code\": \"GI\" },\n            { \"name\": \"Greece\", \"code\": \"GR\" },\n            { \"name\": \"Greenland\", \"code\": \"GL\" },\n            { \"name\": \"Grenada\", \"code\": \"GD\" },\n            { \"name\": \"Guadeloupe\", \"code\": \"GP\" },\n            { \"name\": \"Guam\", \"code\": \"GU\" },\n            { \"name\": \"Guatemala\", \"code\": \"GT\" },\n            { \"name\": \"Guernsey\", \"code\": \"GG\" },\n            { \"name\": \"Guinea\", \"code\": \"GN\" },\n            { \"name\": \"Guinea-Bissau\", \"code\": \"GW\" },\n            { \"name\": \"Guyana\", \"code\": \"GY\" },\n            { \"name\": \"Haiti\", \"code\": \"HT\" },\n            { \"name\": \"Heard Island and Mcdonald Islands\", \"code\": \"HM\" },\n            { \"name\": \"Holy See (Vatican City State)\", \"code\": \"VA\" },\n            { \"name\": \"Honduras\", \"code\": \"HN\" },\n            { \"name\": \"Hong Kong\", \"code\": \"HK\" },\n            { \"name\": \"Hungary\", \"code\": \"HU\" },\n            { \"name\": \"Iceland\", \"code\": \"IS\" },\n            { \"name\": \"India\", \"code\": \"IN\" },\n            { \"name\": \"Indonesia\", \"code\": \"ID\" },\n            { \"name\": \"Iran, Islamic Republic Of\", \"code\": \"IR\" },\n            { \"name\": \"Iraq\", \"code\": \"IQ\" },\n            { \"name\": \"Ireland\", \"code\": \"IE\" },\n            { \"name\": \"Isle of Man\", \"code\": \"IM\" },\n            { \"name\": \"Israel\", \"code\": \"IL\" },\n            { \"name\": \"Italy\", \"code\": \"IT\" },\n            { \"name\": \"Jamaica\", \"code\": \"JM\" },\n            { \"name\": \"Japan\", \"code\": \"JP\" },\n            { \"name\": \"Jersey\", \"code\": \"JE\" },\n            { \"name\": \"Jordan\", \"code\": \"JO\" },\n            { \"name\": \"Kazakhstan\", \"code\": \"KZ\" },\n            { \"name\": \"Kenya\", \"code\": \"KE\" },\n            { \"name\": \"Kiribati\", \"code\": \"KI\" },\n            { \"name\": \"Korea, Democratic People's Republic of\", \"code\": \"KP\" },\n            { \"name\": \"Korea, Republic of\", \"code\": \"KR\" },\n            { \"name\": \"Kuwait\", \"code\": \"KW\" },\n            { \"name\": \"Kyrgyzstan\", \"code\": \"KG\" },\n            { \"name\": \"Lao People's Democratic Republic\", \"code\": \"LA\" },\n            { \"name\": \"Latvia\", \"code\": \"LV\" },\n            { \"name\": \"Lebanon\", \"code\": \"LB\" },\n            { \"name\": \"Lesotho\", \"code\": \"LS\" },\n            { \"name\": \"Liberia\", \"code\": \"LR\" },\n            { \"name\": \"Libyan Arab Jamahiriya\", \"code\": \"LY\" },\n            { \"name\": \"Liechtenstein\", \"code\": \"LI\" },\n            { \"name\": \"Lithuania\", \"code\": \"LT\" },\n            { \"name\": \"Luxembourg\", \"code\": \"LU\" },\n            { \"name\": \"Macao\", \"code\": \"MO\" },\n            { \"name\": \"Macedonia, The Former Yugoslav Republic of\", \"code\": \"MK\" },\n            { \"name\": \"Madagascar\", \"code\": \"MG\" },\n            { \"name\": \"Malawi\", \"code\": \"MW\" },\n            { \"name\": \"Malaysia\", \"code\": \"MY\" },\n            { \"name\": \"Maldives\", \"code\": \"MV\" },\n            { \"name\": \"Mali\", \"code\": \"ML\" },\n            { \"name\": \"Malta\", \"code\": \"MT\" },\n            { \"name\": \"Marshall Islands\", \"code\": \"MH\" },\n            { \"name\": \"Martinique\", \"code\": \"MQ\" },\n            { \"name\": \"Mauritania\", \"code\": \"MR\" },\n            { \"name\": \"Mauritius\", \"code\": \"MU\" },\n            { \"name\": \"Mayotte\", \"code\": \"YT\" },\n            { \"name\": \"Mexico\", \"code\": \"MX\" },\n            { \"name\": \"Micronesia, Federated States of\", \"code\": \"FM\" },\n            { \"name\": \"Moldova, Republic of\", \"code\": \"MD\" },\n            { \"name\": \"Monaco\", \"code\": \"MC\" },\n            { \"name\": \"Mongolia\", \"code\": \"MN\" },\n            { \"name\": \"Montserrat\", \"code\": \"MS\" },\n            { \"name\": \"Morocco\", \"code\": \"MA\" },\n            { \"name\": \"Mozambique\", \"code\": \"MZ\" },\n            { \"name\": \"Myanmar\", \"code\": \"MM\" },\n            { \"name\": \"Namibia\", \"code\": \"NA\" },\n            { \"name\": \"Nauru\", \"code\": \"NR\" },\n            { \"name\": \"Nepal\", \"code\": \"NP\" },\n            { \"name\": \"Netherlands\", \"code\": \"NL\" },\n            { \"name\": \"Netherlands Antilles\", \"code\": \"AN\" },\n            { \"name\": \"New Caledonia\", \"code\": \"NC\" },\n            { \"name\": \"New Zealand\", \"code\": \"NZ\" },\n            { \"name\": \"Nicaragua\", \"code\": \"NI\" },\n            { \"name\": \"Niger\", \"code\": \"NE\" },\n            { \"name\": \"Nigeria\", \"code\": \"NG\" },\n            { \"name\": \"Niue\", \"code\": \"NU\" },\n            { \"name\": \"Norfolk Island\", \"code\": \"NF\" },\n            { \"name\": \"Northern Mariana Islands\", \"code\": \"MP\" },\n            { \"name\": \"Norway\", \"code\": \"NO\" },\n            { \"name\": \"Oman\", \"code\": \"OM\" },\n            { \"name\": \"Pakistan\", \"code\": \"PK\" },\n            { \"name\": \"Palau\", \"code\": \"PW\" },\n            { \"name\": \"Palestinian Territory, Occupied\", \"code\": \"PS\" },\n            { \"name\": \"Panama\", \"code\": \"PA\" },\n            { \"name\": \"Papua New Guinea\", \"code\": \"PG\" },\n            { \"name\": \"Paraguay\", \"code\": \"PY\" },\n            { \"name\": \"Peru\", \"code\": \"PE\" },\n            { \"name\": \"Philippines\", \"code\": \"PH\" },\n            { \"name\": \"Pitcairn\", \"code\": \"PN\" },\n            { \"name\": \"Poland\", \"code\": \"PL\" },\n            { \"name\": \"Portugal\", \"code\": \"PT\" },\n            { \"name\": \"Puerto Rico\", \"code\": \"PR\" },\n            { \"name\": \"Qatar\", \"code\": \"QA\" },\n            { \"name\": \"Reunion\", \"code\": \"RE\" },\n            { \"name\": \"Romania\", \"code\": \"RO\" },\n            { \"name\": \"Russian Federation\", \"code\": \"RU\" },\n            { \"name\": \"RWANDA\", \"code\": \"RW\" },\n            { \"name\": \"Saint Helena\", \"code\": \"SH\" },\n            { \"name\": \"Saint Kitts and Nevis\", \"code\": \"KN\" },\n            { \"name\": \"Saint Lucia\", \"code\": \"LC\" },\n            { \"name\": \"Saint Pierre and Miquelon\", \"code\": \"PM\" },\n            { \"name\": \"Saint Vincent and the Grenadines\", \"code\": \"VC\" },\n            { \"name\": \"Samoa\", \"code\": \"WS\" },\n            { \"name\": \"San Marino\", \"code\": \"SM\" },\n            { \"name\": \"Sao Tome and Principe\", \"code\": \"ST\" },\n            { \"name\": \"Saudi Arabia\", \"code\": \"SA\" },\n            { \"name\": \"Senegal\", \"code\": \"SN\" },\n            { \"name\": \"Serbia and Montenegro\", \"code\": \"CS\" },\n            { \"name\": \"Seychelles\", \"code\": \"SC\" },\n            { \"name\": \"Sierra Leone\", \"code\": \"SL\" },\n            { \"name\": \"Singapore\", \"code\": \"SG\" },\n            { \"name\": \"Slovakia\", \"code\": \"SK\" },\n            { \"name\": \"Slovenia\", \"code\": \"SI\" },\n            { \"name\": \"Solomon Islands\", \"code\": \"SB\" },\n            { \"name\": \"Somalia\", \"code\": \"SO\" },\n            { \"name\": \"South Africa\", \"code\": \"ZA\" },\n            { \"name\": \"South Georgia and the South Sandwich Islands\", \"code\": \"GS\" },\n            { \"name\": \"Spain\", \"code\": \"ES\" },\n            { \"name\": \"Sri Lanka\", \"code\": \"LK\" },\n            { \"name\": \"Sudan\", \"code\": \"SD\" },\n            { \"name\": \"Suriname\", \"code\": \"SR\" },\n            { \"name\": \"Svalbard and Jan Mayen\", \"code\": \"SJ\" },\n            { \"name\": \"Swaziland\", \"code\": \"SZ\" },\n            { \"name\": \"Sweden\", \"code\": \"SE\" },\n            { \"name\": \"Switzerland\", \"code\": \"CH\" },\n            { \"name\": \"Syrian Arab Republic\", \"code\": \"SY\" },\n            { \"name\": \"Taiwan, Province of China\", \"code\": \"TW\" },\n            { \"name\": \"Tajikistan\", \"code\": \"TJ\" },\n            { \"name\": \"Tanzania, United Republic of\", \"code\": \"TZ\" },\n            { \"name\": \"Thailand\", \"code\": \"TH\" },\n            { \"name\": \"Timor-Leste\", \"code\": \"TL\" },\n            { \"name\": \"Togo\", \"code\": \"TG\" },\n            { \"name\": \"Tokelau\", \"code\": \"TK\" },\n            { \"name\": \"Tonga\", \"code\": \"TO\" },\n            { \"name\": \"Trinidad and Tobago\", \"code\": \"TT\" },\n            { \"name\": \"Tunisia\", \"code\": \"TN\" },\n            { \"name\": \"Turkey\", \"code\": \"TR\" },\n            { \"name\": \"Turkmenistan\", \"code\": \"TM\" },\n            { \"name\": \"Turks and Caicos Islands\", \"code\": \"TC\" },\n            { \"name\": \"Tuvalu\", \"code\": \"TV\" },\n            { \"name\": \"Uganda\", \"code\": \"UG\" },\n            { \"name\": \"Ukraine\", \"code\": \"UA\" },\n            { \"name\": \"United Arab Emirates\", \"code\": \"AE\" },\n            { \"name\": \"United States Minor Outlying Islands\", \"code\": \"UM\" },\n            { \"name\": \"Uruguay\", \"code\": \"UY\" },\n            { \"name\": \"Uzbekistan\", \"code\": \"UZ\" },\n            { \"name\": \"Vanuatu\", \"code\": \"VU\" },\n            { \"name\": \"Venezuela\", \"code\": \"VE\" },\n            { \"name\": \"Viet Nam\", \"code\": \"VN\" },\n            { \"name\": \"Virgin Islands, British\", \"code\": \"VG\" },\n            { \"name\": \"Virgin Islands, U.S.\", \"code\": \"VI\" },\n            { \"name\": \"Wallis and Futuna\", \"code\": \"WF\" },\n            { \"name\": \"Western Sahara\", \"code\": \"EH\" },\n            { \"name\": \"Yemen\", \"code\": \"YE\" },\n            { \"name\": \"Zambia\", \"code\": \"ZM\" },\n            { \"name\": \"Zimbabwe\", \"code\": \"ZW\" }\n        ];\n    }\n}\nContactDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactDetailsComponent, deps: [{ token: i1.KinibindRequestService }, { token: i3.Location }, { token: i2$1.Router }, { token: ContactService }], target: i0.ɵɵFactoryTarget.Component });\nContactDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: ContactDetailsComponent, selector: \"ka-contact-details\", inputs: { contactId: \"contactId\", savedRoute: \"savedRoute\", readOnlyAddress: \"readOnlyAddress\", hiddenFields: \"hiddenFields\" }, outputs: { loaded: \"loaded\", contactSaved: \"contactSaved\" }, ngImport: i0, template: \"<!--<form class=\\\"px2 py2 whitebk mb1\\\" #contactForm=\\\"ngForm\\\" (ngSubmit)=\\\"saveContact()\\\">-->\\n\\n    <div *ngIf=\\\"contact.data\\\">\\n\\n        <label>\\n            <input class=\\\"full\\\" type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"contact.data.name\\\" required>\\n            <span>Full Name <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input class=\\\"full\\\" type=\\\"text\\\" name=\\\"organisation\\\" [(ngModel)]=\\\"contact.data.organisation\\\">\\n            Name of Business / Organisation\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressStreet1\\\"\\n                   [(ngModel)]=\\\"contact.data.street1\\\" required>\\n            <span>Address 1 <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressStreet2\\\"\\n                   [(ngModel)]=\\\"contact.data.street2\\\">\\n            Address 2\\n        </label>\\n\\n        <div class=\\\"flex align-center flex-wrap\\\">\\n            <label>\\n                <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressCity\\\"\\n                       [(ngModel)]=\\\"contact.data.city\\\" required>\\n                <span>Town / City <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n            </label>\\n\\n            <label>\\n                <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressCounty\\\"\\n                       [(ngModel)]=\\\"contact.data.county\\\" required>\\n                <span>State / County / Region <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n            </label>\\n        </div>\\n\\n        <label>\\n            <select name=\\\"country\\\" required [(ngModel)]=\\\"contact.data.countryCode\\\">\\n                <option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.code\\\">\\n                    {{country.name}}\\n                </option>\\n            </select>\\n            <span>Country <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" name=\\\"postcode\\\"\\n                   [(ngModel)]=\\\"contact.data.postcode\\\" required>\\n            <span>Postcode <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"number\\\" name=\\\"telephoneNumber\\\" [(ngModel)]=\\\"contact.data.telephoneNumber\\\">\\n            Telephone Number\\n        </label>\\n\\n    </div>\\n\\n    <div class=\\\"flex justify-end mt2\\\">\\n<!--        <button type=\\\"submit\\\" class=\\\"mt2 but butsm\\\" [disabled]=\\\"contactForm.invalid\\\">-->\\n<!--            SAVE CHANGES-->\\n<!--        </button>-->\\n    </div>\\n\\n<!--</form>-->\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i2.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\" }, { kind: \"directive\", type: i2.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: ContactDetailsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-contact-details', template: \"<!--<form class=\\\"px2 py2 whitebk mb1\\\" #contactForm=\\\"ngForm\\\" (ngSubmit)=\\\"saveContact()\\\">-->\\n\\n    <div *ngIf=\\\"contact.data\\\">\\n\\n        <label>\\n            <input class=\\\"full\\\" type=\\\"text\\\" name=\\\"name\\\" [(ngModel)]=\\\"contact.data.name\\\" required>\\n            <span>Full Name <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input class=\\\"full\\\" type=\\\"text\\\" name=\\\"organisation\\\" [(ngModel)]=\\\"contact.data.organisation\\\">\\n            Name of Business / Organisation\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressStreet1\\\"\\n                   [(ngModel)]=\\\"contact.data.street1\\\" required>\\n            <span>Address 1 <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressStreet2\\\"\\n                   [(ngModel)]=\\\"contact.data.street2\\\">\\n            Address 2\\n        </label>\\n\\n        <div class=\\\"flex align-center flex-wrap\\\">\\n            <label>\\n                <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressCity\\\"\\n                       [(ngModel)]=\\\"contact.data.city\\\" required>\\n                <span>Town / City <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n            </label>\\n\\n            <label>\\n                <input type=\\\"text\\\" class=\\\"full\\\" name=\\\"addressCounty\\\"\\n                       [(ngModel)]=\\\"contact.data.county\\\" required>\\n                <span>State / County / Region <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n            </label>\\n        </div>\\n\\n        <label>\\n            <select name=\\\"country\\\" required [(ngModel)]=\\\"contact.data.countryCode\\\">\\n                <option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.code\\\">\\n                    {{country.name}}\\n                </option>\\n            </select>\\n            <span>Country <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"text\\\" name=\\\"postcode\\\"\\n                   [(ngModel)]=\\\"contact.data.postcode\\\" required>\\n            <span>Postcode <span style=\\\"color: rgba(139,0,0,.5)\\\">*</span></span>\\n        </label>\\n\\n        <label>\\n            <input type=\\\"number\\\" name=\\\"telephoneNumber\\\" [(ngModel)]=\\\"contact.data.telephoneNumber\\\">\\n            Telephone Number\\n        </label>\\n\\n    </div>\\n\\n    <div class=\\\"flex justify-end mt2\\\">\\n<!--        <button type=\\\"submit\\\" class=\\\"mt2 but butsm\\\" [disabled]=\\\"contactForm.invalid\\\">-->\\n<!--            SAVE CHANGES-->\\n<!--        </button>-->\\n    </div>\\n\\n<!--</form>-->\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: i3.Location }, { type: i2$1.Router }, { type: ContactService }]; }, propDecorators: { contactId: [{\n                type: Input\n            }], savedRoute: [{\n                type: Input\n            }], readOnlyAddress: [{\n                type: Input\n            }], hiddenFields: [{\n                type: Input\n            }], loaded: [{\n                type: Output\n            }], contactSaved: [{\n                type: Output\n            }] } });\n\nclass CountryCodesDirective {\n    constructor(kbRequest) {\n        this.kbRequest = kbRequest;\n        this.searchURL = '/internal/application/countryCodes';\n        this.results = [];\n    }\n    search() {\n        const params = {};\n        if (this.promotedCountries) {\n            params.promotedCountries = this.promotedCountries;\n        }\n        if (this.valueFormat) {\n            params.valueFormat = this.valueFormat;\n        }\n        return this.kbRequest.makePostRequest(this.searchURL, params).toPromise()\n            .then((results) => this.results = results);\n    }\n    ngOnInit() {\n        if (this.onInit) {\n            this.search();\n        }\n    }\n}\nCountryCodesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: CountryCodesDirective, deps: [{ token: i1.KinibindRequestService }], target: i0.ɵɵFactoryTarget.Directive });\nCountryCodesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.6\", type: CountryCodesDirective, selector: \"[netCountryCodes]\", inputs: { promotedCountries: \"promotedCountries\", valueFormat: \"valueFormat\", onInit: \"onInit\" }, exportAs: [\"countryCodes\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: CountryCodesDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[netCountryCodes]',\n                    exportAs: 'countryCodes'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }]; }, propDecorators: { promotedCountries: [{\n                type: Input\n            }], valueFormat: [{\n                type: Input\n            }], onInit: [{\n                type: Input\n            }] } });\n\nclass PostcodeLookupDirective {\n    constructor(kbRequest) {\n        this.kbRequest = kbRequest;\n        this.searchURL = '/internal/application/searchAddress';\n        this.results = [];\n        this.match = false;\n        this.complete = false;\n    }\n    search(postcode, country) {\n        this.results = [];\n        this.complete = false;\n        return this.kbRequest.makePostRequest(this.searchURL, { term: postcode, countryCode: country }).toPromise()\n            .then((results) => {\n            this.results = results;\n            this.complete = true;\n        });\n    }\n}\nPostcodeLookupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: PostcodeLookupDirective, deps: [{ token: i1.KinibindRequestService }], target: i0.ɵɵFactoryTarget.Directive });\nPostcodeLookupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.6\", type: PostcodeLookupDirective, selector: \"[netPostcodeLookup]\", inputs: { postcode: \"postcode\", country: \"country\" }, exportAs: [\"postcodeLookup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: PostcodeLookupDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[netPostcodeLookup]',\n                    exportAs: 'postcodeLookup'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }]; }, propDecorators: { postcode: [{\n                type: Input\n            }], country: [{\n                type: Input\n            }] } });\n\nconst _$7 = lodash.default;\nclass UserService {\n    constructor(kbRequest, config, authService) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n        this.authService = authService;\n    }\n    getUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/summary', {\n            params: { userId }\n        }).toPromise();\n    }\n    createAdminUser(emailAddress, rawPassword, name) {\n        let password = rawPassword;\n        if (rawPassword) {\n            password = this.authService.getHashedPassword(rawPassword, emailAddress, true);\n        }\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/admin', _$7.omitBy({ emailAddress, password, name }, _$7.isNil)).toPromise();\n    }\n    getUserExtended(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user', {\n            params: { userId }\n        }).toPromise();\n    }\n    getAccountUsers(searchString, limit, offset) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/search', {\n            params: _$7.pickBy({ searchString, limit, offset }, _$7.identity)\n        });\n    }\n    getAllUserAccountRoles(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/roles', {\n            params: { userId }\n        }).toPromise();\n    }\n    getAssignableRoles(userId, scope, filterString = '', offset = 0, limit = 10) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/assignableRoles', {\n            params: { userId, scope, filterString, offset, limit }\n        }).toPromise();\n    }\n    updateUserScope(scopeObjects, userId) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + `/user/updateUserScope?userId=${userId}`, scopeObjects).toPromise();\n    }\n    removeUserFromAccount(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account/removeUser', {\n            params: { userId }\n        }).toPromise();\n    }\n    requestPasswordReset(emailAddress) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/passwordReset', {\n            params: { emailAddress }\n        }).toPromise();\n    }\n    unlockUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/unlock', {\n            params: { userId }\n        }).toPromise();\n    }\n    suspendUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/suspend', {\n            params: { userId }\n        }).toPromise();\n    }\n    getAccounts(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/accounts', {\n            params: { userId }\n        }).toPromise();\n    }\n    switchAccount(accountId, userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/switchAccount', {\n            params: { accountId, userId }\n        }).toPromise();\n    }\n}\nUserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }, { type: AuthenticationService }]; } });\n\nconst _$6 = lodash.default;\nclass AccountUsersComponent {\n    constructor(userService, router, authService) {\n        this.userService = userService;\n        this.router = router;\n        this.authService = authService;\n        this.searchText = new BehaviorSubject('');\n        this.limit = new BehaviorSubject(10);\n        this.offset = new BehaviorSubject(0);\n        this.pageIndex = 0;\n        this.resultSize = 0;\n        this.reloadUsers = new Subject$1();\n        this.allSelected = false;\n        this.selectionMade = false;\n        this.lodash = _$6;\n        this.passwordReset = false;\n        this.userUnlocked = false;\n        this.userSuspended = false;\n        this.newAdminUser = false;\n        this.newAdminEmail = '';\n        this.newAdminPassword = null;\n        this.newAdminAdded = false;\n    }\n    ngOnInit() {\n        merge(this.searchText, this.limit, this.offset, this.reloadUsers)\n            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(() => this.getUsers()))\n            .subscribe((users) => {\n            this.users = users;\n        });\n    }\n    saveNewAdminUser() {\n        if (this.newAdminPassword && this.newAdminPassword.length < 8) {\n            return true;\n        }\n        return this.userService.createAdminUser(this.newAdminEmail, this.newAdminPassword || null, null)\n            .then(res => {\n            this.newAdminEmail = '';\n            this.newAdminPassword = null;\n            this.newAdminUser = false;\n            this.newAdminAdded = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.newAdminAdded = false;\n            }, 3000);\n        });\n    }\n    viewUser(user) {\n        if (user.status !== 'PENDING') {\n            const route = this.userRoleRoute ? this.userRoleRoute + '/' + user.id : user.id;\n            this.router.navigate([route]);\n        }\n    }\n    toggleSelectAllUsers() {\n        this.allSelected = !this.allSelected;\n        this.selectionMade = this.allSelected;\n        this.users = this.lodash.map(this.users, user => {\n            user.selected = this.allSelected;\n            return user;\n        });\n    }\n    toggleUsersSelected(user) {\n        user.selected = !user.selected;\n        this.selectionMade = this.lodash.some(this.users, 'selected');\n    }\n    search(searchTerm) {\n        this.searchText.next(searchTerm);\n    }\n    updatePage(pageEvent) {\n        const limit = this.limit.getValue();\n        if (pageEvent.pageSize !== limit) {\n            this.offset.next(0);\n            this.limit.next(pageEvent.pageSize);\n            this.pageIndex = 0;\n        }\n        else {\n            this.offset.next(pageEvent.pageSize * (pageEvent.pageIndex));\n            this.pageIndex = pageEvent.pageIndex;\n        }\n    }\n    removeUser(user) {\n        const message = 'Are you sure you would like to remove this user?';\n        if (window.confirm(message)) {\n            this.userService.removeUserFromAccount(user.id).then(() => {\n                this.reloadUsers.next(Date.now());\n            });\n        }\n    }\n    resetPassword(user) {\n        this.authService.sendPasswordReset(user.emailAddress, null).then(() => {\n            this.passwordReset = true;\n            setTimeout(() => {\n                this.passwordReset = false;\n            }, 3000);\n        });\n    }\n    unlockUser(userId) {\n        this.userService.unlockUser(userId).then(() => {\n            this.userUnlocked = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.userUnlocked = false;\n            }, 3000);\n        });\n    }\n    suspendUser(userId) {\n        this.userService.suspendUser(userId).then(() => {\n            this.userSuspended = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.userSuspended = false;\n            }, 3000);\n        });\n    }\n    getUsers() {\n        return this.userService.getAccountUsers(this.searchText.getValue(), this.limit.getValue(), this.offset.getValue()).pipe(map((data) => {\n            this.resultSize = data.totalRecords;\n            return data.results;\n        }));\n    }\n}\nAccountUsersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountUsersComponent, deps: [{ token: UserService }, { token: i2$1.Router }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nAccountUsersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: AccountUsersComponent, selector: \"ka-account-users\", inputs: { userRoleRoute: \"userRoleRoute\", disableInvite: \"disableInvite\", createAdminUser: \"createAdminUser\" }, ngImport: i0, template: \"<div class=\\\"p-6 bg-white border-b border-gray-200\\\">\\n    <div class=\\\"md:flex md:items-center md:justify-between md:space-x-5\\\">\\n        <div class=\\\"flex items-start flex-1\\\">\\n            <div class=\\\"pt-1.5\\\">\\n                <h1 class=\\\"text-2xl font-bold text-gray-900\\\">Account Users</h1>\\n                <p class=\\\"text-sm font-medium text-gray-500\\\">\\n                    A list of all the users currently assigned to your account.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"mt-6 flex flex-col-reverse justify-stretch\\\">\\n            <button type=\\\"button\\\" [routerLink]=\\\"['/invite-user']\\\" *ngIf=\\\"!disableInvite\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Invite User\\n            </button>\\n\\n            <button type=\\\"button\\\" *ngIf=\\\"createAdminUser\\\" (click)=\\\"newAdminUser = true;\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Create Admin User\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"px-4 sm:px-6 lg:px-8 mt-0\\\">\\n    <div class=\\\"flex flex-col\\\">\\n        <div class=\\\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\\\">\\n            <div class=\\\"inline-block min-w-full py-2 align-middle\\\">\\n\\n                <div *ngIf=\\\"newAdminAdded\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n                         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Admin user successfully added.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"newAdminUser\\\" class=\\\"px-6 pb-6 mt-4 flex flex-col border-b\\\">\\n                    <p><b>Add New Admin User</b></p>\\n                    <input type=\\\"email\\\" [(ngModel)]=\\\"newAdminEmail\\\" placeholder=\\\"Enter email address for user\\\">\\n                    <input class=\\\"mt-2\\\" type=\\\"password\\\" [(ngModel)]=\\\"newAdminPassword\\\"\\n                           placeholder=\\\"Enter password for user\\\"\\n                           [ngClass]=\\\"{'border border-red-600': newAdminPassword && newAdminPassword.length < 8}\\\">\\n                    <div *ngIf=\\\"newAdminPassword && newAdminPassword.length < 8\\\">\\n                        <small class=\\\"text-red-600\\\">Password must be at least 8 characters long.</small>\\n                    </div>\\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\\n                        email.</small></div>\\n                    <div class=\\\"flex items-center justify-between my-4\\\">\\n                        <div></div>\\n                        <button (click)=\\\"saveNewAdminUser()\\\"\\n                                class=\\\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\\\">\\n                            Save New User\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"passwordReset\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Password reset email sent. Please check your email for further instructions</div>\\n                </div>\\n\\n                <div *ngIf=\\\"userUnlocked\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-primary h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This user has been successfully unlocked.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"userSuspended\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This user has been suspended.</div>\\n                </div>\\n\\n                <div class=\\\"mt-3 sm:mt-0 flex-1\\\">\\n                    <label for=\\\"mobile-search-candidate\\\" class=\\\"sr-only\\\">Search</label>\\n                    <div class=\\\"flex\\\">\\n                        <div class=\\\"relative flex-grow focus-within:z-10\\\">\\n                            <div class=\\\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\\\">\\n                                <svg class=\\\"h-5 w-5 text-gray-400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                     viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                    <path fill-rule=\\\"evenodd\\\"\\n                                          d=\\\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\\\"\\n                                          clip-rule=\\\"evenodd\\\"/>\\n                                </svg>\\n                            </div>\\n                            <input type=\\\"text\\\" name=\\\"mobile-search-candidate\\\" id=\\\"mobile-search-candidate\\\"\\n                                   class=\\\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\\\"\\n                                   placeholder=\\\"Search users\\\"\\n                                   (keyup)=\\\"searchText.next($event.target.value)\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <table class=\\\"min-w-full border-separate bg-white\\\" style=\\\"border-spacing: 0\\\">\\n                    <ng-template [ngIf]=\\\"users && users.length\\\">\\n\\n                        <thead class=\\\"bg-gray-100\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Name\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Email\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Status\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\\\">\\n                                <span class=\\\"sr-only\\\">Edit</span>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor=\\\"let user of users; let i = index\\\" class=\\\"hover:bg-gray-50 cursor-pointer\\\">\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\\\">\\n                                {{user.name}}\\n                            </td>\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                {{user.emailAddress}}\\n                            </td>\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <span [ngClass]=\\\"{'bg-success': user.status === 'ACTIVE', 'bg-primary': user.status === 'PENDING', 'bg-danger': user.status === 'SUSPENDED'}\\\"\\n                                    class=\\\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\\\">\\n                                    {{user.status.toLowerCase()}}</span>\\n                            </td>\\n                            <td class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <div class=\\\"flex items-center justify-end\\\">\\n                                    <button mat-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">\\n                                        Actions\\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\\n                                    </button>\\n                                    <mat-menu #menu=\\\"matMenu\\\">\\n                                        <button mat-menu-item (click)=\\\"removeUser(user)\\\">Remove</button>\\n                                        <button mat-menu-item (click)=\\\"resetPassword(user)\\\">Reset Password</button>\\n                                        <button mat-menu-item (click)=\\\"unlockUser(user.id)\\\"\\n                                                *ngIf=\\\"user.status === 'LOCKED' || user.status === 'SUSPENDED'\\\">Unlock\\n                                        </button>\\n                                        <button mat-menu-item (click)=\\\"suspendUser(user.id)\\\"\\n                                                *ngIf=\\\"user.status !== 'SUSPENDED'\\\">\\n                                            Suspend\\n                                        </button>\\n                                    </mat-menu>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td colspan=\\\"4\\\"\\n                                class=\\\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\\\">\\n                                <div class=\\\"paging-toolbar flex align-center justify-end\\\">\\n                                    <mat-paginator class=\\\"user-paginator flex1 pl050 mb0\\\" [length]=\\\"resultSize\\\"\\n                                                   [pageSize]=\\\"limit.getValue()\\\"\\n                                                   [pageIndex]=\\\"pageIndex\\\"\\n                                                   [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"\\n                                                   (page)=\\\"updatePage($event)\\\">\\n                                    </mat-paginator>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </ng-template>\\n                </table>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.list-items{background-color:#fff}.list-items .item-list{position:relative;border-bottom:1px solid #ddd;padding-left:1rem}.list-items .item-list:after{content:\\\"\\\\232a\\\";position:absolute;font-size:1.8rem;color:#ccc;right:0;top:25%}.list-items .item-list h3{margin:.3rem 0}.list-items .item-list p{margin:.3rem 0;color:#838383;font-size:.9rem}.list-items .item-list p:first-of-type{margin-bottom:0}.list-items .item-list p:last-of-type{margin-top:0}@media only screen and (max-width: 320px){.list-items .item-list h3{font-size:1.2rem}.list-items .item-list p{font-size:.85rem}}@media only screen and (max-width: 768px){.account-users .desktop-table-view{display:none}.account-users .mobile-list-view{display:block}}@media only screen and (min-width: 768px){.account-users .desktop-table-view{display:block;padding:1rem}.account-users .mobile-list-view{display:none}}.account-users .desktop-table-view,.account-users .mobile-list-view,.account-users table{background-color:#fff}.account-users tbody tr.PENDING td:not(.actions){opacity:.6}.account-users tbody tr:not(.PENDING):hover{background-color:#f5f5f5;cursor:pointer}.account-users tbody tr td.status span{padding:.25rem .4rem;text-transform:lowercase;font-size:.9rem;border-radius:2px}.account-users tbody tr td.status span.PENDING{background-color:gray;color:#fff}.account-users tbody tr td.status span.ACTIVE{background-color:#12a6d3;color:#fff}.account-users .invite-user{margin-bottom:0}.account-users .user-paginator{background:transparent}\\n\"], dependencies: [{ kind: \"directive\", type: i2$1.RouterLink, selector: \":not(a):not(area)[routerLink]\", inputs: [\"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i6.MatPaginator, selector: \"mat-paginator\", inputs: [\"disabled\"], exportAs: [\"matPaginator\"] }, { kind: \"component\", type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i9.MatMenu, selector: \"mat-menu\", exportAs: [\"matMenu\"] }, { kind: \"component\", type: i9.MatMenuItem, selector: \"[mat-menu-item]\", inputs: [\"disabled\", \"disableRipple\", \"role\"], exportAs: [\"matMenuItem\"] }, { kind: \"directive\", type: i9.MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", exportAs: [\"matMenuTrigger\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountUsersComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-account-users', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"p-6 bg-white border-b border-gray-200\\\">\\n    <div class=\\\"md:flex md:items-center md:justify-between md:space-x-5\\\">\\n        <div class=\\\"flex items-start flex-1\\\">\\n            <div class=\\\"pt-1.5\\\">\\n                <h1 class=\\\"text-2xl font-bold text-gray-900\\\">Account Users</h1>\\n                <p class=\\\"text-sm font-medium text-gray-500\\\">\\n                    A list of all the users currently assigned to your account.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"mt-6 flex flex-col-reverse justify-stretch\\\">\\n            <button type=\\\"button\\\" [routerLink]=\\\"['/invite-user']\\\" *ngIf=\\\"!disableInvite\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Invite User\\n            </button>\\n\\n            <button type=\\\"button\\\" *ngIf=\\\"createAdminUser\\\" (click)=\\\"newAdminUser = true;\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Create Admin User\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"px-4 sm:px-6 lg:px-8 mt-0\\\">\\n    <div class=\\\"flex flex-col\\\">\\n        <div class=\\\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\\\">\\n            <div class=\\\"inline-block min-w-full py-2 align-middle\\\">\\n\\n                <div *ngIf=\\\"newAdminAdded\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n                         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Admin user successfully added.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"newAdminUser\\\" class=\\\"px-6 pb-6 mt-4 flex flex-col border-b\\\">\\n                    <p><b>Add New Admin User</b></p>\\n                    <input type=\\\"email\\\" [(ngModel)]=\\\"newAdminEmail\\\" placeholder=\\\"Enter email address for user\\\">\\n                    <input class=\\\"mt-2\\\" type=\\\"password\\\" [(ngModel)]=\\\"newAdminPassword\\\"\\n                           placeholder=\\\"Enter password for user\\\"\\n                           [ngClass]=\\\"{'border border-red-600': newAdminPassword && newAdminPassword.length < 8}\\\">\\n                    <div *ngIf=\\\"newAdminPassword && newAdminPassword.length < 8\\\">\\n                        <small class=\\\"text-red-600\\\">Password must be at least 8 characters long.</small>\\n                    </div>\\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\\n                        email.</small></div>\\n                    <div class=\\\"flex items-center justify-between my-4\\\">\\n                        <div></div>\\n                        <button (click)=\\\"saveNewAdminUser()\\\"\\n                                class=\\\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\\\">\\n                            Save New User\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"passwordReset\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Password reset email sent. Please check your email for further instructions</div>\\n                </div>\\n\\n                <div *ngIf=\\\"userUnlocked\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-primary h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This user has been successfully unlocked.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"userSuspended\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This user has been suspended.</div>\\n                </div>\\n\\n                <div class=\\\"mt-3 sm:mt-0 flex-1\\\">\\n                    <label for=\\\"mobile-search-candidate\\\" class=\\\"sr-only\\\">Search</label>\\n                    <div class=\\\"flex\\\">\\n                        <div class=\\\"relative flex-grow focus-within:z-10\\\">\\n                            <div class=\\\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\\\">\\n                                <svg class=\\\"h-5 w-5 text-gray-400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                     viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                    <path fill-rule=\\\"evenodd\\\"\\n                                          d=\\\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\\\"\\n                                          clip-rule=\\\"evenodd\\\"/>\\n                                </svg>\\n                            </div>\\n                            <input type=\\\"text\\\" name=\\\"mobile-search-candidate\\\" id=\\\"mobile-search-candidate\\\"\\n                                   class=\\\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\\\"\\n                                   placeholder=\\\"Search users\\\"\\n                                   (keyup)=\\\"searchText.next($event.target.value)\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <table class=\\\"min-w-full border-separate bg-white\\\" style=\\\"border-spacing: 0\\\">\\n                    <ng-template [ngIf]=\\\"users && users.length\\\">\\n\\n                        <thead class=\\\"bg-gray-100\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Name\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Email\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Status\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\\\">\\n                                <span class=\\\"sr-only\\\">Edit</span>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor=\\\"let user of users; let i = index\\\" class=\\\"hover:bg-gray-50 cursor-pointer\\\">\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\\\">\\n                                {{user.name}}\\n                            </td>\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                {{user.emailAddress}}\\n                            </td>\\n                            <td (click)=\\\"viewUser(user)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <span [ngClass]=\\\"{'bg-success': user.status === 'ACTIVE', 'bg-primary': user.status === 'PENDING', 'bg-danger': user.status === 'SUSPENDED'}\\\"\\n                                    class=\\\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\\\">\\n                                    {{user.status.toLowerCase()}}</span>\\n                            </td>\\n                            <td class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <div class=\\\"flex items-center justify-end\\\">\\n                                    <button mat-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">\\n                                        Actions\\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\\n                                    </button>\\n                                    <mat-menu #menu=\\\"matMenu\\\">\\n                                        <button mat-menu-item (click)=\\\"removeUser(user)\\\">Remove</button>\\n                                        <button mat-menu-item (click)=\\\"resetPassword(user)\\\">Reset Password</button>\\n                                        <button mat-menu-item (click)=\\\"unlockUser(user.id)\\\"\\n                                                *ngIf=\\\"user.status === 'LOCKED' || user.status === 'SUSPENDED'\\\">Unlock\\n                                        </button>\\n                                        <button mat-menu-item (click)=\\\"suspendUser(user.id)\\\"\\n                                                *ngIf=\\\"user.status !== 'SUSPENDED'\\\">\\n                                            Suspend\\n                                        </button>\\n                                    </mat-menu>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td colspan=\\\"4\\\"\\n                                class=\\\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\\\">\\n                                <div class=\\\"paging-toolbar flex align-center justify-end\\\">\\n                                    <mat-paginator class=\\\"user-paginator flex1 pl050 mb0\\\" [length]=\\\"resultSize\\\"\\n                                                   [pageSize]=\\\"limit.getValue()\\\"\\n                                                   [pageIndex]=\\\"pageIndex\\\"\\n                                                   [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"\\n                                                   (page)=\\\"updatePage($event)\\\">\\n                                    </mat-paginator>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </ng-template>\\n                </table>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.list-items{background-color:#fff}.list-items .item-list{position:relative;border-bottom:1px solid #ddd;padding-left:1rem}.list-items .item-list:after{content:\\\"\\\\232a\\\";position:absolute;font-size:1.8rem;color:#ccc;right:0;top:25%}.list-items .item-list h3{margin:.3rem 0}.list-items .item-list p{margin:.3rem 0;color:#838383;font-size:.9rem}.list-items .item-list p:first-of-type{margin-bottom:0}.list-items .item-list p:last-of-type{margin-top:0}@media only screen and (max-width: 320px){.list-items .item-list h3{font-size:1.2rem}.list-items .item-list p{font-size:.85rem}}@media only screen and (max-width: 768px){.account-users .desktop-table-view{display:none}.account-users .mobile-list-view{display:block}}@media only screen and (min-width: 768px){.account-users .desktop-table-view{display:block;padding:1rem}.account-users .mobile-list-view{display:none}}.account-users .desktop-table-view,.account-users .mobile-list-view,.account-users table{background-color:#fff}.account-users tbody tr.PENDING td:not(.actions){opacity:.6}.account-users tbody tr:not(.PENDING):hover{background-color:#f5f5f5;cursor:pointer}.account-users tbody tr td.status span{padding:.25rem .4rem;text-transform:lowercase;font-size:.9rem;border-radius:2px}.account-users tbody tr td.status span.PENDING{background-color:gray;color:#fff}.account-users tbody tr td.status span.ACTIVE{background-color:#12a6d3;color:#fff}.account-users .invite-user{margin-bottom:0}.account-users .user-paginator{background:transparent}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: UserService }, { type: i2$1.Router }, { type: AuthenticationService }]; }, propDecorators: { userRoleRoute: [{\n                type: Input\n            }], disableInvite: [{\n                type: Input\n            }], createAdminUser: [{\n                type: Input\n            }] } });\n\nclass RoleService {\n    constructor(kbRequest, config) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n    }\n    getScopeAccesses() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/role/scopeAccesses')\n            .toPromise();\n    }\n}\nRoleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: RoleService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }], target: i0.ɵɵFactoryTarget.Injectable });\nRoleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: RoleService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: RoleService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }]; } });\n\nconst _$5 = lodash.default;\nclass EditRolesComponent {\n    constructor() {\n        this.closed = new EventEmitter();\n        this.saved = new EventEmitter();\n        this.updatedScopesChange = new EventEmitter();\n        this._ = _$5;\n        this.Object = Object;\n        this.disabled = {};\n        this.checked = {};\n        this.loading = true;\n        this.roles = [];\n        this.errors = {};\n    }\n    ngOnInit() {\n        if (!this.updatedScopes) {\n            this.updatedScopes = {};\n        }\n        if (this.scope) {\n            const userId = this.user ? this.user.id : null;\n            const promises = [\n                this.userService.getAssignableRoles(userId, this.scope),\n                this.loadUserRoles()\n            ];\n            Promise.all(promises).then(res => {\n                this.assignableRoles = res[0];\n                this.setInitialRoleState();\n                this.loading = false;\n            });\n        }\n    }\n    updateRole(event, scopeId) {\n        // Reset the displayed errors at this point;\n        this.errors = {};\n        const checked = event.target.checked;\n        const owner = event.target.value === 'OWNER';\n        let roleIds = [];\n        if (owner) {\n            if (checked) {\n                roleIds = [null];\n            }\n            else {\n                delete this.checked[scopeId].owner;\n                roleIds = this.setRoleIds(scopeId);\n            }\n            this.disabled[scopeId] = checked;\n        }\n        else {\n            roleIds = this.setRoleIds(scopeId);\n        }\n        this.updatedScopes[scopeId] = {\n            scope: this.scope,\n            scopeId,\n            roleIds: _$5.uniq(roleIds)\n        };\n        this.updatedScopesChange.next(this.updatedScopes);\n    }\n    updateUserScope() {\n        this.errors = {};\n        // Check if we are saving any ACCOUNT scopes. If we are, check there are some roles attached.\n        const accounts = _$5.filter(this.updatedScopes, update => {\n            return update.scope === 'ACCOUNT' && update.roleIds.length > 0;\n        });\n        if (accounts.length > 0) {\n            accounts.forEach(scopeUpdate => {\n                this.errors[scopeUpdate.scopeId] = 'Please select at least one Account role for this user.';\n            });\n            return false;\n        }\n        this.userService.updateUserScope(_$5.values(this.updatedScopes), this.user.id).then(() => {\n            this.closed.emit(true);\n        });\n    }\n    setInitialRoleState() {\n        this.assignableRoles.forEach(assignableRole => {\n            if (!this.checked[assignableRole.scopeId]) {\n                this.checked[assignableRole.scopeId] = {};\n            }\n            const allAssignableRoles = _$5.values(assignableRole.roles);\n            const existing = _$5.find(this.roles, { scopeId: assignableRole.scopeId });\n            if (existing && (existing.roles[0] === null && existing.roles.length === 1)) {\n                this.checked[assignableRole.scopeId]['owner'] = true;\n                this.disabled[assignableRole.scopeId] = true;\n            }\n            allAssignableRoles.forEach(role => {\n                if (role) {\n                    const checked = existing ? !!_$5.find(existing.roles, { id: role.id }) : false;\n                    this.checked[assignableRole.scopeId][role.id] = checked;\n                }\n            });\n        });\n    }\n    setRoleIds(scopeId) {\n        const ids = Object.keys(this.checked[scopeId]);\n        const res = ids.filter(id => {\n            return this.checked[scopeId][id];\n        });\n        return res.length ? res.map(Number) : [];\n    }\n    loadUserRoles() {\n        if (this.user) {\n            return this.userService.getAllUserAccountRoles(this.user.id).then(roles => {\n                this.roles = roles[this.scopeKey];\n                return true;\n            });\n        }\n    }\n}\nEditRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditRolesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nEditRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditRolesComponent, selector: \"ka-edit-roles\", inputs: { scope: \"scope\", scopeKey: \"scopeKey\", user: \"user\", updatedScopes: \"updatedScopes\", hideApply: \"hideApply\", userService: \"userService\" }, outputs: { closed: \"closed\", saved: \"saved\", updatedScopesChange: \"updatedScopesChange\" }, ngImport: i0, template: \"<ng-template [ngIf]=\\\"assignableRoles\\\">\\n    <ng-template ngFor let-assignableRole [ngForOf]=\\\"_.orderBy(assignableRoles, ['scopeId'], ['asc'])\\\">\\n\\n        <fieldset class=\\\"mb-4 ml-4\\\">\\n            <legend class=\\\"text-sm font-medium text-gray-800\\\">{{assignableRole.scopeObjectDescription}}</legend>\\n\\n            <ng-template [ngIf]=\\\"_.reject(assignableRole.roles).length\\\">\\n                <div><i>You have reached the max number of users</i></div>\\n            </ng-template>\\n\\n            <ng-template [ngIf]=\\\"!_.reject(assignableRole.roles).length\\\">\\n                <div class=\\\"mt-4 flex items-center\\\">\\n\\n                    <ng-template ngFor let-roleIndex [ngForOf]=\\\"Object.keys(assignableRole.roles)\\\">\\n\\n                        <div class=\\\"flex items-start\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\">\\n                            <div class=\\\"flex items-center h-5\\\">\\n                                <input type=\\\"checkbox\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\"\\n                                       [disabled]=\\\"disabled[assignableRole.scopeId]\\\"\\n                                       [(ngModel)]=\\\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\\\"\\n                                       (change)=\\\"updateRole($event, assignableRole.scopeId)\\\"\\n                                       [name]=\\\"'name' + roleIndex\\\"\\n                                       class=\\\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\\\">\\n                            </div>\\n                            <div class=\\\"ml-3 text-sm\\\">\\n                                <label class=\\\"font-medium text-gray-700\\\">{{assignableRole.roles[roleIndex].name}}</label>\\n                            </div>\\n                        </div>\\n\\n                    </ng-template>\\n\\n                    <div class=\\\"flex items-start\\\">\\n                        <div class=\\\"flex items-center h-5\\\">\\n                            <input value=\\\"OWNER\\\" type=\\\"checkbox\\\" [name]=\\\"'owner' + assignableRole.scopeId\\\"\\n                                   [checked]=\\\"checked[assignableRole.scopeId]['owner']\\\"\\n                                   (change)=\\\"updateRole($event, assignableRole.scopeId)\\\"\\n                                   class=\\\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\\\">\\n                        </div>\\n                        <div class=\\\"ml-3 text-sm\\\">\\n                            <label class=\\\"font-medium text-gray-700\\\">Owner</label>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"text-red-500 m-2\\\" *ngIf=\\\"errors[assignableRole.scopeId]\\\">\\n                        {{errors[assignableRole.scopeId]}}\\n                    </div>\\n                </div>\\n            </ng-template>\\n\\n        </fieldset>\\n\\n    </ng-template>\\n</ng-template>\\n\\n<!--<table class=\\\"edit-roles\\\" *ngIf=\\\"assignableRoles\\\" [ngStyle]=\\\"{marginBottom: hideApply ? '0' : '100px'}\\\">-->\\n<!--    <tbody *ngFor=\\\"let assignableRole of _.orderBy(assignableRoles, ['scopeId'], ['asc'])\\\">-->\\n<!--    <tr class=\\\"thead\\\">-->\\n<!--        <th>{{assignableRole.scopeObjectDescription}}</th>-->\\n<!--    </tr>-->\\n<!--    <tr>-->\\n<!--        <td>-->\\n<!--            <div class=\\\"flex align-center\\\" *ngIf=\\\"!loading\\\">-->\\n<!--                <ng-template [ngIf]=\\\"_.reject(assignableRole.roles).length\\\">-->\\n<!--                    <i>You have reached the max number of users</i>-->\\n<!--                </ng-template>-->\\n\\n<!--                <ng-template [ngIf]=\\\"!_.reject(assignableRole.roles).length\\\">-->\\n<!--                    <span class=\\\"mr1 flex items-center align-baseline\\\" *ngIf=\\\"assignableRole.scope === 'ACCOUNT'\\\">-->\\n<!--                        <input type=\\\"checkbox\\\" value=\\\"OWNER\\\" class=\\\"role-checkbox\\\"-->\\n<!--                               [checked]=\\\"checked[assignableRole.scopeId]['owner']\\\"-->\\n<!--                               (change)=\\\"updateRole($event, assignableRole.scopeId)\\\">-->\\n<!--                        Owner-->\\n<!--                    </span>-->\\n<!--                    <ng-template ngFor let-roleIndex [ngForOf]=\\\"Object.keys(assignableRole.roles)\\\">-->\\n<!--                        <span class=\\\"mr1 flex items-center align-baseline\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\">-->\\n<!--                            <input type=\\\"checkbox\\\" class=\\\"role-checkbox\\\"-->\\n<!--                                   *ngIf=\\\"assignableRole.roles[roleIndex]\\\"-->\\n<!--                                   [disabled]=\\\"disabled[assignableRole.scopeId]\\\"-->\\n<!--                                   [(ngModel)]=\\\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\\\"-->\\n<!--                                   (change)=\\\"updateRole($event, assignableRole.scopeId)\\\">-->\\n<!--                            {{assignableRole.roles[roleIndex].name}}-->\\n<!--                        </span>-->\\n<!--                        <i *ngIf=\\\"!assignableRole.roles[roleIndex]\\\" class=\\\"mr2\\\">-->\\n<!--                            Upgrade-->\\n<!--                        </i>-->\\n<!--                    </ng-template>-->\\n<!--                </ng-template>-->\\n<!--            </div>-->\\n\\n<!--            <p class=\\\"mb0 mt050 text-red\\\"-->\\n<!--               *ngIf=\\\"errors[assignableRole.scopeId]\\\">{{errors[assignableRole.scopeId]}}</p>-->\\n<!--        </td>-->\\n\\n<!--    </tr>-->\\n<!--    </tbody>-->\\n<!--</table>-->\\n\\n<div class=\\\"flex align-center items-center justify-between p1 p-4 apply-bar\\\" *ngIf=\\\"!hideApply\\\">\\n    <div></div>\\n    <button mat-flat-button color=\\\"primary\\\" class=\\\"but butsm\\\" (click)=\\\"updateUserScope()\\\">Apply Changes</button>\\n</div>\\n\", styles: [\"table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}table.edit-roles{background-color:#fff}table.edit-roles tbody tr td{padding-left:1rem}table.edit-roles tbody tr.thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd;font-weight:600}table.edit-roles tbody tr:not(.thead):hover{background-color:#f5f5f5;cursor:pointer}table.edit-roles tbody .role-checkbox{height:auto;margin:0 .25rem 0 0}.apply-bar{position:fixed;bottom:0;right:0;left:0;background-color:#fff;border-top:2px solid #dddddd}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditRolesComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-roles', encapsulation: ViewEncapsulation.None, template: \"<ng-template [ngIf]=\\\"assignableRoles\\\">\\n    <ng-template ngFor let-assignableRole [ngForOf]=\\\"_.orderBy(assignableRoles, ['scopeId'], ['asc'])\\\">\\n\\n        <fieldset class=\\\"mb-4 ml-4\\\">\\n            <legend class=\\\"text-sm font-medium text-gray-800\\\">{{assignableRole.scopeObjectDescription}}</legend>\\n\\n            <ng-template [ngIf]=\\\"_.reject(assignableRole.roles).length\\\">\\n                <div><i>You have reached the max number of users</i></div>\\n            </ng-template>\\n\\n            <ng-template [ngIf]=\\\"!_.reject(assignableRole.roles).length\\\">\\n                <div class=\\\"mt-4 flex items-center\\\">\\n\\n                    <ng-template ngFor let-roleIndex [ngForOf]=\\\"Object.keys(assignableRole.roles)\\\">\\n\\n                        <div class=\\\"flex items-start\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\">\\n                            <div class=\\\"flex items-center h-5\\\">\\n                                <input type=\\\"checkbox\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\"\\n                                       [disabled]=\\\"disabled[assignableRole.scopeId]\\\"\\n                                       [(ngModel)]=\\\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\\\"\\n                                       (change)=\\\"updateRole($event, assignableRole.scopeId)\\\"\\n                                       [name]=\\\"'name' + roleIndex\\\"\\n                                       class=\\\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\\\">\\n                            </div>\\n                            <div class=\\\"ml-3 text-sm\\\">\\n                                <label class=\\\"font-medium text-gray-700\\\">{{assignableRole.roles[roleIndex].name}}</label>\\n                            </div>\\n                        </div>\\n\\n                    </ng-template>\\n\\n                    <div class=\\\"flex items-start\\\">\\n                        <div class=\\\"flex items-center h-5\\\">\\n                            <input value=\\\"OWNER\\\" type=\\\"checkbox\\\" [name]=\\\"'owner' + assignableRole.scopeId\\\"\\n                                   [checked]=\\\"checked[assignableRole.scopeId]['owner']\\\"\\n                                   (change)=\\\"updateRole($event, assignableRole.scopeId)\\\"\\n                                   class=\\\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\\\">\\n                        </div>\\n                        <div class=\\\"ml-3 text-sm\\\">\\n                            <label class=\\\"font-medium text-gray-700\\\">Owner</label>\\n                        </div>\\n                    </div>\\n\\n                    <div class=\\\"text-red-500 m-2\\\" *ngIf=\\\"errors[assignableRole.scopeId]\\\">\\n                        {{errors[assignableRole.scopeId]}}\\n                    </div>\\n                </div>\\n            </ng-template>\\n\\n        </fieldset>\\n\\n    </ng-template>\\n</ng-template>\\n\\n<!--<table class=\\\"edit-roles\\\" *ngIf=\\\"assignableRoles\\\" [ngStyle]=\\\"{marginBottom: hideApply ? '0' : '100px'}\\\">-->\\n<!--    <tbody *ngFor=\\\"let assignableRole of _.orderBy(assignableRoles, ['scopeId'], ['asc'])\\\">-->\\n<!--    <tr class=\\\"thead\\\">-->\\n<!--        <th>{{assignableRole.scopeObjectDescription}}</th>-->\\n<!--    </tr>-->\\n<!--    <tr>-->\\n<!--        <td>-->\\n<!--            <div class=\\\"flex align-center\\\" *ngIf=\\\"!loading\\\">-->\\n<!--                <ng-template [ngIf]=\\\"_.reject(assignableRole.roles).length\\\">-->\\n<!--                    <i>You have reached the max number of users</i>-->\\n<!--                </ng-template>-->\\n\\n<!--                <ng-template [ngIf]=\\\"!_.reject(assignableRole.roles).length\\\">-->\\n<!--                    <span class=\\\"mr1 flex items-center align-baseline\\\" *ngIf=\\\"assignableRole.scope === 'ACCOUNT'\\\">-->\\n<!--                        <input type=\\\"checkbox\\\" value=\\\"OWNER\\\" class=\\\"role-checkbox\\\"-->\\n<!--                               [checked]=\\\"checked[assignableRole.scopeId]['owner']\\\"-->\\n<!--                               (change)=\\\"updateRole($event, assignableRole.scopeId)\\\">-->\\n<!--                        Owner-->\\n<!--                    </span>-->\\n<!--                    <ng-template ngFor let-roleIndex [ngForOf]=\\\"Object.keys(assignableRole.roles)\\\">-->\\n<!--                        <span class=\\\"mr1 flex items-center align-baseline\\\" *ngIf=\\\"assignableRole.roles[roleIndex]\\\">-->\\n<!--                            <input type=\\\"checkbox\\\" class=\\\"role-checkbox\\\"-->\\n<!--                                   *ngIf=\\\"assignableRole.roles[roleIndex]\\\"-->\\n<!--                                   [disabled]=\\\"disabled[assignableRole.scopeId]\\\"-->\\n<!--                                   [(ngModel)]=\\\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\\\"-->\\n<!--                                   (change)=\\\"updateRole($event, assignableRole.scopeId)\\\">-->\\n<!--                            {{assignableRole.roles[roleIndex].name}}-->\\n<!--                        </span>-->\\n<!--                        <i *ngIf=\\\"!assignableRole.roles[roleIndex]\\\" class=\\\"mr2\\\">-->\\n<!--                            Upgrade-->\\n<!--                        </i>-->\\n<!--                    </ng-template>-->\\n<!--                </ng-template>-->\\n<!--            </div>-->\\n\\n<!--            <p class=\\\"mb0 mt050 text-red\\\"-->\\n<!--               *ngIf=\\\"errors[assignableRole.scopeId]\\\">{{errors[assignableRole.scopeId]}}</p>-->\\n<!--        </td>-->\\n\\n<!--    </tr>-->\\n<!--    </tbody>-->\\n<!--</table>-->\\n\\n<div class=\\\"flex align-center items-center justify-between p1 p-4 apply-bar\\\" *ngIf=\\\"!hideApply\\\">\\n    <div></div>\\n    <button mat-flat-button color=\\\"primary\\\" class=\\\"but butsm\\\" (click)=\\\"updateUserScope()\\\">Apply Changes</button>\\n</div>\\n\", styles: [\"table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}table.edit-roles{background-color:#fff}table.edit-roles tbody tr td{padding-left:1rem}table.edit-roles tbody tr.thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd;font-weight:600}table.edit-roles tbody tr:not(.thead):hover{background-color:#f5f5f5;cursor:pointer}table.edit-roles tbody .role-checkbox{height:auto;margin:0 .25rem 0 0}.apply-bar{position:fixed;bottom:0;right:0;left:0;background-color:#fff;border-top:2px solid #dddddd}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { scope: [{\n                type: Input\n            }], scopeKey: [{\n                type: Input\n            }], user: [{\n                type: Input\n            }], updatedScopes: [{\n                type: Input\n            }], hideApply: [{\n                type: Input\n            }], userService: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], saved: [{\n                type: Output\n            }], updatedScopesChange: [{\n                type: Output\n            }] } });\n\nconst _$4 = lodash.default;\nclass UserRolesComponent {\n    constructor(userService, route, roleService, authService) {\n        this.userService = userService;\n        this.route = route;\n        this.roleService = roleService;\n        this.authService = authService;\n        this.user = {};\n        this.Object = Object;\n        this.editDetails = false;\n        this.scopeRoles = { ACCOUNT: {} };\n        this.scopeEdit = null;\n        this._ = _$4;\n        this.accountOwner = false;\n    }\n    ngOnInit() {\n        this.route.params.subscribe(params => {\n            this.loadUser();\n            this.userId = params.userId;\n        });\n        this.loadUser();\n    }\n    roleUpdated(value) {\n        this.accountOwner = _$4.values(value)[0].roleIds[0] === null;\n    }\n    saveUserDetails() {\n        const updates = [];\n        _$4.values(this.scopeRoles).forEach(scope => {\n            _$4.forEach(scope, update => {\n                updates.push(update);\n            });\n        });\n        if (updates.length) {\n            this.userService.updateUserScope(updates, this.user.id);\n        }\n    }\n    loadRoles(userId) {\n        this.userService.getUser(userId).then(user => {\n            this.user = user;\n        });\n        this.roleService.getScopeAccesses().then(scopeAccesses => {\n            delete scopeAccesses.ACCOUNT;\n            this.scopeAccesses = _$4.values(scopeAccesses);\n            _$4.forEach(scopeAccesses, scopeAccess => {\n                this.scopeRoles[scopeAccess.scope] = {};\n            });\n        });\n        this.userService.getAllUserAccountRoles(userId).then(roles => {\n            const role = _$4.values(roles.Account).length ? _$4.values(roles.Account)[0] : null;\n            if (role) {\n                this.accountOwner = role.roles[0] === null;\n            }\n        });\n    }\n    loadUser() {\n        this.authService.getLoggedInUser().then(user => {\n            this.loggedInUser = user;\n            this.loadRoles(this.userId);\n        });\n    }\n}\nUserRolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserRolesComponent, deps: [{ token: UserService }, { token: i2$1.ActivatedRoute }, { token: RoleService }, { token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nUserRolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: UserRolesComponent, selector: \"ka-user-roles\", ngImport: i0, template: \"<div class=\\\"user-roles\\\">\\n\\n    <div class=\\\"text-base font-medium\\\">{{user.name}}</div>\\n    <div class=\\\"text-sm text-gray-400 mb-4 border-b pb-4 border-gray-200\\\">{{user.emailAddress}}</div>\\n\\n    <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">Permissions</div>\\n\\n    <div class=\\\"mb2\\\">\\n        <ka-edit-roles *ngIf=\\\"user.id\\\" [scopeKey]=\\\"'Account'\\\" [scope]=\\\"'ACCOUNT'\\\" [user]=\\\"user\\\" [(updatedScopes)]=\\\"scopeRoles.ACCOUNT\\\"\\n                       [hideApply]=\\\"true\\\" (updatedScopesChange)=\\\"roleUpdated($event)\\\" [userService]=\\\"userService\\\"></ka-edit-roles>\\n        <p style=\\\"color: red\\\" *ngIf=\\\"accountError\\\">{{accountError}}</p>\\n    </div>\\n\\n    <mat-tab-group animationDuration=\\\"0\\\" *ngIf=\\\"!accountOwner\\\">\\n        <mat-tab *ngFor=\\\"let scopeAccess of scopeAccesses\\\" [label]=\\\"scopeAccess.scopeDescription\\\">\\n            <ka-edit-roles class=\\\"block mt-4\\\" *ngIf=\\\"user.id\\\" [userService]=\\\"userService\\\"\\n                [scopeKey]=\\\"scopeAccess.scopeDescription\\\" [scope]=\\\"scopeAccess.scope\\\" [user]=\\\"user\\\"\\n                           [(updatedScopes)]=\\\"scopeRoles[scopeAccess.scope]\\\" [hideApply]=\\\"true\\\"></ka-edit-roles>\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"flex items-center justify-between\\\">\\n        <div></div>\\n        <button mat-flat-button color=\\\"primary\\\" (click)=\\\"saveUserDetails()\\\">Save Changes</button>\\n    </div>\\n</div>\\n\", styles: [\"table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.user-roles .roles-container{background-color:#fff;padding:1rem}.user-roles table{background-color:#fff}.user-roles tbody tr.thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd;font-weight:600;padding-top:2rem}.user-roles tbody tr:not(.thead):hover{background-color:#f5f5f5;cursor:pointer}.user-roles tbody:first-of-type tr.thead th{padding-top:1rem}.user-roles .actionpanel.edit{margin-bottom:0}.user-roles .changes-panel{margin:0 1rem 2rem;background-color:#fff;padding:1rem 2rem;border-top:1px solid whitesmoke}.user-roles .changes-panel p{margin:0}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i7$1.MatTabGroup, selector: \"mat-tab-group\", inputs: [\"color\", \"disableRipple\"], exportAs: [\"matTabGroup\"] }, { kind: \"component\", type: i7$1.MatTab, selector: \"mat-tab\", inputs: [\"disabled\", \"label\", \"aria-label\", \"aria-labelledby\", \"labelClass\", \"bodyClass\"], exportAs: [\"matTab\"] }, { kind: \"component\", type: EditRolesComponent, selector: \"ka-edit-roles\", inputs: [\"scope\", \"scopeKey\", \"user\", \"updatedScopes\", \"hideApply\", \"userService\"], outputs: [\"closed\", \"saved\", \"updatedScopesChange\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: UserRolesComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-user-roles', encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"user-roles\\\">\\n\\n    <div class=\\\"text-base font-medium\\\">{{user.name}}</div>\\n    <div class=\\\"text-sm text-gray-400 mb-4 border-b pb-4 border-gray-200\\\">{{user.emailAddress}}</div>\\n\\n    <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">Permissions</div>\\n\\n    <div class=\\\"mb2\\\">\\n        <ka-edit-roles *ngIf=\\\"user.id\\\" [scopeKey]=\\\"'Account'\\\" [scope]=\\\"'ACCOUNT'\\\" [user]=\\\"user\\\" [(updatedScopes)]=\\\"scopeRoles.ACCOUNT\\\"\\n                       [hideApply]=\\\"true\\\" (updatedScopesChange)=\\\"roleUpdated($event)\\\" [userService]=\\\"userService\\\"></ka-edit-roles>\\n        <p style=\\\"color: red\\\" *ngIf=\\\"accountError\\\">{{accountError}}</p>\\n    </div>\\n\\n    <mat-tab-group animationDuration=\\\"0\\\" *ngIf=\\\"!accountOwner\\\">\\n        <mat-tab *ngFor=\\\"let scopeAccess of scopeAccesses\\\" [label]=\\\"scopeAccess.scopeDescription\\\">\\n            <ka-edit-roles class=\\\"block mt-4\\\" *ngIf=\\\"user.id\\\" [userService]=\\\"userService\\\"\\n                [scopeKey]=\\\"scopeAccess.scopeDescription\\\" [scope]=\\\"scopeAccess.scope\\\" [user]=\\\"user\\\"\\n                           [(updatedScopes)]=\\\"scopeRoles[scopeAccess.scope]\\\" [hideApply]=\\\"true\\\"></ka-edit-roles>\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"flex items-center justify-between\\\">\\n        <div></div>\\n        <button mat-flat-button color=\\\"primary\\\" (click)=\\\"saveUserDetails()\\\">Save Changes</button>\\n    </div>\\n</div>\\n\", styles: [\"table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.user-roles .roles-container{background-color:#fff;padding:1rem}.user-roles table{background-color:#fff}.user-roles tbody tr.thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd;font-weight:600;padding-top:2rem}.user-roles tbody tr:not(.thead):hover{background-color:#f5f5f5;cursor:pointer}.user-roles tbody:first-of-type tr.thead th{padding-top:1rem}.user-roles .actionpanel.edit{margin-bottom:0}.user-roles .changes-panel{margin:0 1rem 2rem;background-color:#fff;padding:1rem 2rem;border-top:1px solid whitesmoke}.user-roles .changes-panel p{margin:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: UserService }, { type: i2$1.ActivatedRoute }, { type: RoleService }, { type: AuthenticationService }]; } });\n\nconst _$3 = lodash.default;\nclass InviteUserComponent {\n    constructor(roleService, accountService, location, userService) {\n        this.roleService = roleService;\n        this.accountService = accountService;\n        this.location = location;\n        this.userService = userService;\n        this.scopeRoles = { ACCOUNT: {} };\n        this.inviteComplete = false;\n    }\n    ngOnInit() {\n        this.roleService.getScopeAccesses().then(scopeAccesses => {\n            delete scopeAccesses['ACCOUNT'];\n            this.scopeAccesses = _$3.values(scopeAccesses);\n            _$3.forEach(scopeAccesses, scopeAccess => {\n                this.scopeRoles[scopeAccess.scope] = {};\n            });\n        });\n    }\n    save() {\n        this.accountError = '';\n        const accounts = _$3.filter(this.scopeRoles['ACCOUNT'], update => {\n            return update.scope === 'ACCOUNT' && update.roleIds.length === 0;\n        });\n        if (!_$3.values(this.scopeRoles['ACCOUNT']).length || accounts.length > 0) {\n            this.accountError = 'Please select at least one Account role for this user.';\n            return false;\n        }\n        const scopeRoles = [];\n        _$3.forEach(this.scopeRoles, (allRoles, scope) => {\n            _$3.forEach(allRoles, role => {\n                scopeRoles.push(role);\n            });\n        });\n        this.accountService.inviteUserToAccount(this.emailAddress, scopeRoles).then(() => {\n            this.inviteComplete = true;\n        });\n    }\n    back() {\n        this.location.back();\n    }\n}\nInviteUserComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InviteUserComponent, deps: [{ token: RoleService }, { token: AccountService }, { token: i3.Location }, { token: UserService }], target: i0.ɵɵFactoryTarget.Component });\nInviteUserComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: InviteUserComponent, selector: \"ka-invite-user\", ngImport: i0, template: \"<ng-template [ngIf]=\\\"inviteComplete\\\">\\n\\n    <div class=\\\"flex align-center justify-center p3 p-8 invite-sent\\\">\\n\\n        <h3 class=\\\"mb3 mb-8\\\"><mat-icon color=\\\"primary\\\">check</mat-icon> Invitation Sent</h3>\\n\\n        <p class=\\\"mb3 mb-8\\\">A confirmation email has been sent to <b>{{emailAddress}}</b>, the user will need to click on the confirmation\\n            link in order to activate their account.</p>\\n\\n        <button mat-flat-button class=\\\"but\\\" (click)=\\\"back()\\\">Return to list</button>\\n    </div>\\n\\n</ng-template>\\n\\n<ng-template [ngIf]=\\\"!inviteComplete\\\">\\n\\n    <div class=\\\"mb2 mb-8\\\">\\n        <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">User email address</div>\\n        <input type=\\\"text\\\" placeholder=\\\"Email address\\\" class=\\\"flex1 mr050 mt0 full\\\"\\n               [(ngModel)]=\\\"emailAddress\\\">\\n    </div>\\n\\n    <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">Permissions</div>\\n\\n    <div class=\\\"mb2 mb-4\\\">\\n        <ka-edit-roles [scopeKey]=\\\"'Account'\\\" [scope]=\\\"'ACCOUNT'\\\" [userService]=\\\"userService\\\"\\n                       [updatedScopes]=\\\"scopeRoles['ACCOUNT']\\\" [hideApply]=\\\"true\\\"></ka-edit-roles>\\n        <p style=\\\"color: red\\\" *ngIf=\\\"accountError\\\">{{accountError}}</p>\\n    </div>\\n\\n    <mat-tab-group animationDuration=\\\"0\\\">\\n        <mat-tab *ngFor=\\\"let scopeAccess of scopeAccesses\\\" [label]=\\\"scopeAccess.scopeDescription\\\">\\n            <ka-edit-roles class=\\\"block mt-4\\\" [scopeKey]=\\\"scopeAccess.scopeDescription\\\" [scope]=\\\"scopeAccess.scope\\\"\\n                           [updatedScopes]=\\\"scopeRoles[scopeAccess.scope]\\\" [hideApply]=\\\"true\\\" [userService]=\\\"userService\\\"></ka-edit-roles>\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"flex align-center justify-between mt2 mt-6\\\">\\n        <div></div>\\n        <button mat-flat-button color=\\\"primary\\\" class=\\\"but butsm\\\" (click)=\\\"save()\\\" [disabled]=\\\"!emailAddress\\\">Invite User</button>\\n    </div>\\n</ng-template>\\n\", styles: [\".invite-sent{background-color:#fff;flex-direction:column;text-align:center}.invite-sent h3{display:flex;align-content:center}.invite-sent h3 mat-icon{font-size:35px;height:35px;width:35px;margin-right:.5rem}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i7$1.MatTabGroup, selector: \"mat-tab-group\", inputs: [\"color\", \"disableRipple\"], exportAs: [\"matTabGroup\"] }, { kind: \"component\", type: i7$1.MatTab, selector: \"mat-tab\", inputs: [\"disabled\", \"label\", \"aria-label\", \"aria-labelledby\", \"labelClass\", \"bodyClass\"], exportAs: [\"matTab\"] }, { kind: \"component\", type: EditRolesComponent, selector: \"ka-edit-roles\", inputs: [\"scope\", \"scopeKey\", \"user\", \"updatedScopes\", \"hideApply\", \"userService\"], outputs: [\"closed\", \"saved\", \"updatedScopesChange\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InviteUserComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-invite-user', encapsulation: ViewEncapsulation.None, template: \"<ng-template [ngIf]=\\\"inviteComplete\\\">\\n\\n    <div class=\\\"flex align-center justify-center p3 p-8 invite-sent\\\">\\n\\n        <h3 class=\\\"mb3 mb-8\\\"><mat-icon color=\\\"primary\\\">check</mat-icon> Invitation Sent</h3>\\n\\n        <p class=\\\"mb3 mb-8\\\">A confirmation email has been sent to <b>{{emailAddress}}</b>, the user will need to click on the confirmation\\n            link in order to activate their account.</p>\\n\\n        <button mat-flat-button class=\\\"but\\\" (click)=\\\"back()\\\">Return to list</button>\\n    </div>\\n\\n</ng-template>\\n\\n<ng-template [ngIf]=\\\"!inviteComplete\\\">\\n\\n    <div class=\\\"mb2 mb-8\\\">\\n        <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">User email address</div>\\n        <input type=\\\"text\\\" placeholder=\\\"Email address\\\" class=\\\"flex1 mr050 mt0 full\\\"\\n               [(ngModel)]=\\\"emailAddress\\\">\\n    </div>\\n\\n    <div class=\\\"text-base font-medium text-gray-900 mb-4\\\">Permissions</div>\\n\\n    <div class=\\\"mb2 mb-4\\\">\\n        <ka-edit-roles [scopeKey]=\\\"'Account'\\\" [scope]=\\\"'ACCOUNT'\\\" [userService]=\\\"userService\\\"\\n                       [updatedScopes]=\\\"scopeRoles['ACCOUNT']\\\" [hideApply]=\\\"true\\\"></ka-edit-roles>\\n        <p style=\\\"color: red\\\" *ngIf=\\\"accountError\\\">{{accountError}}</p>\\n    </div>\\n\\n    <mat-tab-group animationDuration=\\\"0\\\">\\n        <mat-tab *ngFor=\\\"let scopeAccess of scopeAccesses\\\" [label]=\\\"scopeAccess.scopeDescription\\\">\\n            <ka-edit-roles class=\\\"block mt-4\\\" [scopeKey]=\\\"scopeAccess.scopeDescription\\\" [scope]=\\\"scopeAccess.scope\\\"\\n                           [updatedScopes]=\\\"scopeRoles[scopeAccess.scope]\\\" [hideApply]=\\\"true\\\" [userService]=\\\"userService\\\"></ka-edit-roles>\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"flex align-center justify-between mt2 mt-6\\\">\\n        <div></div>\\n        <button mat-flat-button color=\\\"primary\\\" class=\\\"but butsm\\\" (click)=\\\"save()\\\" [disabled]=\\\"!emailAddress\\\">Invite User</button>\\n    </div>\\n</ng-template>\\n\", styles: [\".invite-sent{background-color:#fff;flex-direction:column;text-align:center}.invite-sent h3{display:flex;align-content:center}.invite-sent h3 mat-icon{font-size:35px;height:35px;width:35px;margin-right:.5rem}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: RoleService }, { type: AccountService }, { type: i3.Location }, { type: UserService }]; } });\n\nclass EditDetailsComponent extends BaseComponent {\n    constructor(kcAuthService) {\n        super(kcAuthService);\n        this.saved = new EventEmitter();\n        this.newEmailAddress = '';\n        this.newName = '';\n        this.currentPassword = '';\n        this.emailAvailable = true;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        if (!this.user) {\n            return this.authService.getLoggedInUser().then(user => {\n                this.user = user;\n                this.newName = user.name;\n                this.newEmailAddress = user.emailAddress;\n            });\n        }\n        this.newName = this.user.name;\n        this.newEmailAddress = this.user.emailAddress;\n    }\n    ngOnDestroy() {\n    }\n    checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n    saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserDetails(this.newEmailAddress, this.newName, this.currentPassword, this.user.id)\n            .then(user => {\n            this.user = user;\n            this.saved.emit(user);\n        })\n            .catch(err => {\n            this.saveError = 'There was a problem updating your details, please check and try again.';\n        });\n    }\n}\nEditDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditDetailsComponent, deps: [{ token: AuthenticationService }], target: i0.ɵɵFactoryTarget.Component });\nEditDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: EditDetailsComponent, selector: \"ka-edit-details\", inputs: { user: \"user\" }, outputs: { saved: \"saved\" }, usesInheritance: true, ngImport: i0, template: \"<p class=\\\"mb2\\\">\\n    Update your basic account details here. You will be required to confirm you identity by entering your password\\n    prior to saving the new details.\\n</p>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Change the name for this account.</label>\\n    <input type=\\\"email\\\" placeholder=\\\"New name\\\" [(ngModel)]=\\\"newName\\\">\\n</div>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Change email address for this account.</label>\\n    <input type=\\\"email\\\" placeholder=\\\"New email address\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n           (change)=\\\"checkEmail()\\\" email #email=\\\"ngModel\\\" maxlength=\\\"200\\\">\\n    <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n    <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n</div>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Enter current password to confirm changes.</label>\\n    <input type=\\\"password\\\" placeholder=\\\"Enter password\\\" [(ngModel)]=\\\"currentPassword\\\" maxlength=\\\"100\\\">\\n</div>\\n\\n<div class=\\\"flex align-center justify-between\\\">\\n    <div></div>\\n    <button type=\\\"button\\\" class=\\\"but butsm\\\"\\n            [disabled]=\\\"!emailAvailable || !newEmailAddress || !newName || !currentPassword || email.invalid\\\"\\n            (click)=\\\"saveEmailAddress()\\\">\\n        Update details\\n    </button>\\n</div>\\n\\n\\n<p *ngIf=\\\"saveError\\\" class=\\\"mt2 flex align-center error\\\">\\n    {{saveError}}\\n</p>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { kind: \"directive\", type: i2.EmailValidator, selector: \"[email][formControlName],[email][formControl],[email][ngModel]\", inputs: [\"email\"] }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: EditDetailsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-edit-details', encapsulation: ViewEncapsulation.None, template: \"<p class=\\\"mb2\\\">\\n    Update your basic account details here. You will be required to confirm you identity by entering your password\\n    prior to saving the new details.\\n</p>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Change the name for this account.</label>\\n    <input type=\\\"email\\\" placeholder=\\\"New name\\\" [(ngModel)]=\\\"newName\\\">\\n</div>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Change email address for this account.</label>\\n    <input type=\\\"email\\\" placeholder=\\\"New email address\\\" [(ngModel)]=\\\"newEmailAddress\\\"\\n           (change)=\\\"checkEmail()\\\" email #email=\\\"ngModel\\\" maxlength=\\\"200\\\">\\n    <span style=\\\"color: red\\\" *ngIf=\\\"!emailAvailable\\\">An account already exists with this email address</span>\\n    <span style=\\\"color: red\\\" *ngIf=\\\"email.invalid\\\">Not a valid email address</span>\\n</div>\\n\\n<div class=\\\"mb2\\\">\\n    <label>Enter current password to confirm changes.</label>\\n    <input type=\\\"password\\\" placeholder=\\\"Enter password\\\" [(ngModel)]=\\\"currentPassword\\\" maxlength=\\\"100\\\">\\n</div>\\n\\n<div class=\\\"flex align-center justify-between\\\">\\n    <div></div>\\n    <button type=\\\"button\\\" class=\\\"but butsm\\\"\\n            [disabled]=\\\"!emailAvailable || !newEmailAddress || !newName || !currentPassword || email.invalid\\\"\\n            (click)=\\\"saveEmailAddress()\\\">\\n        Update details\\n    </button>\\n</div>\\n\\n\\n<p *ngIf=\\\"saveError\\\" class=\\\"mt2 flex align-center error\\\">\\n    {{saveError}}\\n</p>\\n\" }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }]; }, propDecorators: { user: [{\n                type: Input\n            }], saved: [{\n                type: Output,\n                args: ['saved']\n            }] } });\n\nclass NotificationService {\n    constructor(kbRequest, config) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n        this.notificationCount = new BehaviorSubject(0);\n    }\n    getNotification(id) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/item', {\n            params: { id }\n        }).toPromise();\n    }\n    getUserNotifications(projectKey = '', limit = '10', offset = '0') {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/', {\n            params: { projectKey, limit, offset }\n        }).toPromise();\n    }\n    getUnreadNotificationCount() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/unreadCount')\n            .toPromise().then(count => {\n            this.notificationCount.next(count);\n            return count;\n        });\n    }\n    markNotificationsRead(notificationIds) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/notification/markRead', notificationIds)\n            .toPromise().then(() => {\n            this.getUnreadNotificationCount();\n        });\n    }\n    markNotificationsUnread(notificationIds) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/notification/markUnread', notificationIds)\n            .toPromise().then(() => {\n            this.getUnreadNotificationCount();\n        });\n    }\n}\nNotificationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }], target: i0.ɵɵFactoryTarget.Injectable });\nNotificationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }]; } });\n\nconst _$2 = lodash.default;\nclass NotificationsComponent {\n    constructor(notificationService) {\n        this.notificationService = notificationService;\n        this.notifications = [];\n        this.selectAll = false;\n        this.someSelected = false;\n    }\n    ngOnInit() {\n        this.notificationService.getUserNotifications()\n            .then(notifications => this.notifications = notifications);\n    }\n    selectAllChange(value) {\n        this.notifications.forEach(notification => {\n            notification._checked = value;\n        });\n        this.someSelected = _$2.some(this.notifications, '_checked');\n    }\n    checkboxChange(value) {\n        this.selectAll = _$2.every(this.notifications, '_checked');\n        this.someSelected = _$2.some(this.notifications, '_checked');\n    }\n    markSelectedRead() {\n        const selected = _$2.filter(this.notifications, '_checked');\n        this.notificationService.markNotificationsRead(_$2.map(selected, 'id')).then(() => {\n            _$2.forEach(selected, notification => {\n                notification.read = true;\n            });\n        });\n    }\n    markSelectedUnread() {\n        const selected = _$2.filter(this.notifications, '_checked');\n        this.notificationService.markNotificationsUnread(_$2.map(selected, 'id')).then(() => {\n            _$2.forEach(selected, notification => {\n                notification.read = false;\n            });\n        });\n    }\n}\nNotificationsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationsComponent, deps: [{ token: NotificationService }], target: i0.ɵɵFactoryTarget.Component });\nNotificationsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: NotificationsComponent, selector: \"ka-notifications\", ngImport: i0, template: \"<div class=\\\"flex align-center justify-between\\\">\\n    <div></div>\\n    <button mat-flat-button [matMenuTriggerFor]=\\\"actionMenu\\\" color=\\\"primary\\\" [disabled]=\\\"!someSelected\\\">Actions</button>\\n    <mat-menu #actionMenu=\\\"matMenu\\\">\\n        <button mat-menu-item (click)=\\\"markSelectedRead()\\\">Mark Selected as Read</button>\\n        <button mat-menu-item (click)=\\\"markSelectedUnread()\\\">Mark Selected as Unread</button>\\n    </mat-menu>\\n</div>\\n\\n<table mat-table [dataSource]=\\\"notifications\\\">\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"check\\\">\\n        <th mat-header-cell *matHeaderCellDef> <mat-checkbox class=\\\"pl-2\\\" [(ngModel)]=\\\"selectAll\\\" (ngModelChange)=\\\"selectAllChange($event)\\\"></mat-checkbox> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50 border-l-4 border-blue-200': !element.read}\\\">\\n            <mat-checkbox class=\\\"pl-2\\\" [(ngModel)]=\\\"element._checked\\\" (ngModelChange)=\\\"checkboxChange($event)\\\"></mat-checkbox>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"title\\\">\\n        <th mat-header-cell *matHeaderCellDef> Title </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"truncate w-1/4 max-w-xs\\\"\\n            [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\"> {{element.title}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"content\\\">\\n        <th mat-header-cell *matHeaderCellDef> Content </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"truncate w-1/4 max-w-xs\\\"\\n            [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            <span class=\\\"capitalize\\\">{{element.content}}</span>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"date\\\">\\n        <th mat-header-cell *matHeaderCellDef> Date </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            {{element.formattedDate}}\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"level\\\">\\n        <th mat-header-cell *matHeaderCellDef>  </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-right\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            <mat-chip-list class=\\\"flex justify-end\\\">\\n                <mat-chip *ngIf=\\\"element.level.key === 'critical'\\\" color=\\\"warn\\\" class=\\\"capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n                <mat-chip *ngIf=\\\"element.level.key === 'warning'\\\" class=\\\"bg-yellow-500 capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n                <mat-chip *ngIf=\\\"element.level.key === 'info'\\\" color=\\\"primary\\\" class=\\\"capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n            </mat-chip-list>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"action\\\">\\n        <th mat-header-cell *matHeaderCellDef>  </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\" class=\\\"text-right\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n\\n        </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"['check', 'title', 'content', 'date', 'level', 'action']\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['check', 'title', 'content', 'date', 'level', 'action'];\\\"></tr>\\n</table>\\n\", styles: [\"table tr.mat-row:hover{background-color:#f5f5f5;cursor:pointer}table td,table th{padding:.5rem}table td:first-of-type,table th:first-of-type{padding-left:0}\\n\"], dependencies: [{ kind: \"directive\", type: i2$1.RouterLink, selector: \":not(a):not(area)[routerLink]\", inputs: [\"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i9.MatMenu, selector: \"mat-menu\", exportAs: [\"matMenu\"] }, { kind: \"component\", type: i9.MatMenuItem, selector: \"[mat-menu-item]\", inputs: [\"disabled\", \"disableRipple\", \"role\"], exportAs: [\"matMenuItem\"] }, { kind: \"directive\", type: i9.MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", exportAs: [\"matMenuTrigger\"] }, { kind: \"component\", type: i7$2.MatTable, selector: \"mat-table, table[mat-table]\", exportAs: [\"matTable\"] }, { kind: \"directive\", type: i7$2.MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: i7$2.MatHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: [\"matHeaderRowDef\", \"matHeaderRowDefSticky\"] }, { kind: \"directive\", type: i7$2.MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { kind: \"directive\", type: i7$2.MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: i7$2.MatRowDef, selector: \"[matRowDef]\", inputs: [\"matRowDefColumns\", \"matRowDefWhen\"] }, { kind: \"directive\", type: i7$2.MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: i7$2.MatCell, selector: \"mat-cell, td[mat-cell]\" }, { kind: \"component\", type: i7$2.MatHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", exportAs: [\"matHeaderRow\"] }, { kind: \"component\", type: i7$2.MatRow, selector: \"mat-row, tr[mat-row]\", exportAs: [\"matRow\"] }, { kind: \"component\", type: i8.MatChipList, selector: \"mat-chip-list\", inputs: [\"role\", \"aria-describedby\", \"errorStateMatcher\", \"multiple\", \"compareWith\", \"value\", \"required\", \"placeholder\", \"disabled\", \"aria-orientation\", \"selectable\", \"tabIndex\"], outputs: [\"change\", \"valueChange\"], exportAs: [\"matChipList\"] }, { kind: \"directive\", type: i8.MatChip, selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", inputs: [\"color\", \"disableRipple\", \"tabIndex\", \"role\", \"selected\", \"value\", \"selectable\", \"disabled\", \"removable\"], outputs: [\"selectionChange\", \"destroyed\", \"removed\"], exportAs: [\"matChip\"] }, { kind: \"component\", type: i9$1.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\"], exportAs: [\"matCheckbox\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-notifications', template: \"<div class=\\\"flex align-center justify-between\\\">\\n    <div></div>\\n    <button mat-flat-button [matMenuTriggerFor]=\\\"actionMenu\\\" color=\\\"primary\\\" [disabled]=\\\"!someSelected\\\">Actions</button>\\n    <mat-menu #actionMenu=\\\"matMenu\\\">\\n        <button mat-menu-item (click)=\\\"markSelectedRead()\\\">Mark Selected as Read</button>\\n        <button mat-menu-item (click)=\\\"markSelectedUnread()\\\">Mark Selected as Unread</button>\\n    </mat-menu>\\n</div>\\n\\n<table mat-table [dataSource]=\\\"notifications\\\">\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"check\\\">\\n        <th mat-header-cell *matHeaderCellDef> <mat-checkbox class=\\\"pl-2\\\" [(ngModel)]=\\\"selectAll\\\" (ngModelChange)=\\\"selectAllChange($event)\\\"></mat-checkbox> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50 border-l-4 border-blue-200': !element.read}\\\">\\n            <mat-checkbox class=\\\"pl-2\\\" [(ngModel)]=\\\"element._checked\\\" (ngModelChange)=\\\"checkboxChange($event)\\\"></mat-checkbox>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"title\\\">\\n        <th mat-header-cell *matHeaderCellDef> Title </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"truncate w-1/4 max-w-xs\\\"\\n            [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\"> {{element.title}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"content\\\">\\n        <th mat-header-cell *matHeaderCellDef> Content </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"truncate w-1/4 max-w-xs\\\"\\n            [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            <span class=\\\"capitalize\\\">{{element.content}}</span>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"date\\\">\\n        <th mat-header-cell *matHeaderCellDef> Date </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            {{element.formattedDate}}\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"level\\\">\\n        <th mat-header-cell *matHeaderCellDef>  </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-right\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n            <mat-chip-list class=\\\"flex justify-end\\\">\\n                <mat-chip *ngIf=\\\"element.level.key === 'critical'\\\" color=\\\"warn\\\" class=\\\"capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n                <mat-chip *ngIf=\\\"element.level.key === 'warning'\\\" class=\\\"bg-yellow-500 capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n                <mat-chip *ngIf=\\\"element.level.key === 'info'\\\" color=\\\"primary\\\" class=\\\"capitalize\\\" selected>{{element.level.title}}</mat-chip>\\n            </mat-chip-list>\\n        </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"action\\\">\\n        <th mat-header-cell *matHeaderCellDef>  </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'bg-blue-50': !element.read}\\\" class=\\\"text-right\\\"\\n            [routerLink]=\\\"['/notifications', element.id]\\\">\\n\\n        </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"['check', 'title', 'content', 'date', 'level', 'action']\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['check', 'title', 'content', 'date', 'level', 'action'];\\\"></tr>\\n</table>\\n\", styles: [\"table tr.mat-row:hover{background-color:#f5f5f5;cursor:pointer}table td,table th{padding:.5rem}table td:first-of-type,table th:first-of-type{padding-left:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: NotificationService }]; } });\n\nclass NotificationComponent {\n    constructor(route, notificationService) {\n        this.route = route;\n        this.notificationService = notificationService;\n    }\n    ngOnInit() {\n        this.notificationId = this.route.snapshot.params.id;\n        this.notificationService.getNotification(this.notificationId).then(notification => {\n            if (notification && !notification.read) {\n                notification.read = true;\n                this.notificationService.markNotificationsRead([this.notificationId]);\n            }\n            this.notification = notification;\n        });\n    }\n    updateNotificationRead(event) {\n        const markFunction = event ? 'markNotificationsRead' : 'markNotificationsUnread';\n        this.notificationService[markFunction]([this.notificationId]);\n    }\n}\nNotificationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationComponent, deps: [{ token: i2$1.ActivatedRoute }, { token: NotificationService }], target: i0.ɵɵFactoryTarget.Component });\nNotificationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: NotificationComponent, selector: \"ka-notification\", ngImport: i0, template: \"<!-- This example requires Tailwind CSS v2.0+ -->\\n<div *ngIf=\\\"notification\\\" class=\\\"bg-white shadow overflow-hidden sm:rounded-lg\\\">\\n    <div class=\\\"px-4 py-5 sm:px-6\\\">\\n        <h3 class=\\\"text-lg leading-6 font-medium text-gray-900\\\">\\n            {{notification.title}}\\n        </h3>\\n        <p class=\\\"mt-1 max-w-2xl text-sm text-gray-500\\\">\\n            Notification\\n        </p>\\n    </div>\\n    <div class=\\\"border-t border-gray-200\\\">\\n        <dl>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Received at\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.formattedDate}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Content\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.content}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Level\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    <mat-chip-list>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'critical'\\\" color=\\\"warn\\\" class=\\\"capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'warning'\\\" class=\\\"bg-yellow-500 capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'info'\\\" color=\\\"primary\\\" class=\\\"capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                    </mat-chip-list>\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Category\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.category}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Read\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    <mat-checkbox [(ngModel)]=\\\"notification.read\\\" (ngModelChange)=\\\"updateNotificationRead($event)\\\"></mat-checkbox>\\n                </dd>\\n            </div>\\n        </dl>\\n    </div>\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i8.MatChipList, selector: \"mat-chip-list\", inputs: [\"role\", \"aria-describedby\", \"errorStateMatcher\", \"multiple\", \"compareWith\", \"value\", \"required\", \"placeholder\", \"disabled\", \"aria-orientation\", \"selectable\", \"tabIndex\"], outputs: [\"change\", \"valueChange\"], exportAs: [\"matChipList\"] }, { kind: \"directive\", type: i8.MatChip, selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", inputs: [\"color\", \"disableRipple\", \"tabIndex\", \"role\", \"selected\", \"value\", \"selectable\", \"disabled\", \"removable\"], outputs: [\"selectionChange\", \"destroyed\", \"removed\"], exportAs: [\"matChip\"] }, { kind: \"component\", type: i9$1.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\"], exportAs: [\"matCheckbox\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NotificationComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-notification', template: \"<!-- This example requires Tailwind CSS v2.0+ -->\\n<div *ngIf=\\\"notification\\\" class=\\\"bg-white shadow overflow-hidden sm:rounded-lg\\\">\\n    <div class=\\\"px-4 py-5 sm:px-6\\\">\\n        <h3 class=\\\"text-lg leading-6 font-medium text-gray-900\\\">\\n            {{notification.title}}\\n        </h3>\\n        <p class=\\\"mt-1 max-w-2xl text-sm text-gray-500\\\">\\n            Notification\\n        </p>\\n    </div>\\n    <div class=\\\"border-t border-gray-200\\\">\\n        <dl>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Received at\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.formattedDate}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Content\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.content}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Level\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    <mat-chip-list>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'critical'\\\" color=\\\"warn\\\" class=\\\"capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'warning'\\\" class=\\\"bg-yellow-500 capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                        <mat-chip *ngIf=\\\"notification.level.key === 'info'\\\" color=\\\"primary\\\" class=\\\"capitalize\\\" selected>{{notification.level.title}}</mat-chip>\\n                    </mat-chip-list>\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Category\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    {{notification.category}}\\n                </dd>\\n            </div>\\n            <div class=\\\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\\\">\\n                <dt class=\\\"text-sm font-medium text-gray-500\\\">\\n                    Read\\n                </dt>\\n                <dd class=\\\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\\\">\\n                    <mat-checkbox [(ngModel)]=\\\"notification.read\\\" (ngModelChange)=\\\"updateNotificationRead($event)\\\"></mat-checkbox>\\n                </dd>\\n            </div>\\n        </dl>\\n    </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i2$1.ActivatedRoute }, { type: NotificationService }]; } });\n\nconst _$1 = lodash.default;\nclass AccountsComponent {\n    constructor(accountService, router) {\n        this.accountService = accountService;\n        this.router = router;\n        this.searchText = new BehaviorSubject('');\n        this.limit = new BehaviorSubject(100);\n        this.offset = new BehaviorSubject(0);\n        this.pageIndex = 0;\n        this.resultSize = 0;\n        this.reloadAccounts = new Subject$1();\n        this.allSelected = false;\n        this.selectionMade = false;\n        this.lodash = _$1;\n        this.passwordReset = false;\n        this.accountUnlocked = false;\n        this.accountSuspended = false;\n        this.newAccount = false;\n        this.newAccountEmail = '';\n        this.newAccountName = '';\n        this.newAccountPassword = null;\n        this.newAccountAdded = false;\n    }\n    ngOnInit() {\n        merge(this.searchText, this.limit, this.offset, this.reloadAccounts)\n            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(() => this.getAccounts()))\n            .subscribe((accounts) => {\n            this.accounts = accounts;\n        });\n    }\n    accountAction(account) {\n        if (this.accountClickThrough) {\n            this.router.navigate([this.accountClickThrough, account.accountId]);\n        }\n    }\n    saveNewAdminUser() {\n        if (this.newAccountPassword && this.newAccountPassword.length < 8) {\n            return true;\n        }\n        return this.accountService.createAccount(this.newAccountName, this.newAccountEmail, this.newAccountPassword || null, null)\n            .then(res => {\n            this.newAccountName = '';\n            this.newAccountEmail = '';\n            this.newAccountPassword = null;\n            this.newAccount = false;\n            this.newAccountAdded = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.newAccountAdded = false;\n            }, 3000);\n        });\n    }\n    viewAccount(user) {\n    }\n    toggleSelectAllUsers() {\n        this.allSelected = !this.allSelected;\n        this.selectionMade = this.allSelected;\n        this.accounts = this.lodash.map(this.accounts, user => {\n            user.selected = this.allSelected;\n            return user;\n        });\n    }\n    toggleUsersSelected(user) {\n        user.selected = !user.selected;\n        this.selectionMade = this.lodash.some(this.accounts, 'selected');\n    }\n    search(searchTerm) {\n        this.searchText.next(searchTerm);\n    }\n    updatePage(pageEvent) {\n        const limit = this.limit.getValue();\n        if (pageEvent.pageSize !== limit) {\n            this.offset.next(0);\n            this.limit.next(pageEvent.pageSize);\n            this.pageIndex = 0;\n        }\n        else {\n            this.offset.next(pageEvent.pageSize * (pageEvent.pageIndex));\n            this.pageIndex = pageEvent.pageIndex;\n        }\n    }\n    reactivate(account, note) {\n        this.accountService.reactivateAccount(account.accountId, note).then(() => {\n            this.accountUnlocked = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.accountUnlocked = false;\n            }, 3000);\n        });\n    }\n    suspend(account, note) {\n        this.accountService.suspendAccount(account.accountId, note).then(() => {\n            this.accountSuspended = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.accountSuspended = false;\n            }, 3000);\n        });\n    }\n    getAccounts() {\n        return this.accountService.searchForAccounts(this.searchText.getValue(), this.limit.getValue(), this.offset.getValue()).pipe(map((data) => {\n            this.resultSize = data.length;\n            return data;\n        }));\n    }\n}\nAccountsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountsComponent, deps: [{ token: AccountService }, { token: i2$1.Router }], target: i0.ɵɵFactoryTarget.Component });\nAccountsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: AccountsComponent, selector: \"ka-accounts\", inputs: { accountClickThrough: \"accountClickThrough\" }, ngImport: i0, template: \"<div class=\\\"p-6 bg-white border-b border-gray-200\\\">\\n    <div class=\\\"md:flex md:items-center md:justify-between md:space-x-5\\\">\\n        <div class=\\\"flex items-start flex-1\\\">\\n            <div class=\\\"pt-1.5\\\">\\n                <h1 class=\\\"text-2xl font-bold text-gray-900\\\">Accounts</h1>\\n                <p class=\\\"text-sm font-medium text-gray-500\\\">\\n                    A list of all the accounts in the system.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"mt-6 flex flex-col-reverse justify-stretch\\\">\\n            <button type=\\\"button\\\" (click)=\\\"newAccount = true;\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Create New Account\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"px-4 sm:px-6 lg:px-8 mt-0\\\">\\n    <div class=\\\"flex flex-col\\\">\\n        <div class=\\\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\\\">\\n            <div class=\\\"inline-block min-w-full py-2 align-middle\\\">\\n\\n                <div *ngIf=\\\"newAccountAdded\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n                         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">New account successfully added.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"newAccount\\\" class=\\\"px-6 pb-6 mt-4 flex flex-col border-b\\\">\\n                    <p><b>Add New Account</b></p>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"newAccountName\\\" placeholder=\\\"Enter name for the new account\\\">\\n\\n                    <input class=\\\"mt-2\\\" type=\\\"email\\\" [(ngModel)]=\\\"newAccountEmail\\\"\\n                           placeholder=\\\"Enter email address for account user\\\">\\n                    <input class=\\\"mt-2\\\" type=\\\"password\\\" [(ngModel)]=\\\"newAccountPassword\\\"\\n                           placeholder=\\\"Enter password for user\\\"\\n                           [ngClass]=\\\"{'border border-red-600': newAccountPassword && newAccountPassword.length < 8}\\\">\\n                    <div *ngIf=\\\"newAccountPassword && newAccountPassword.length < 8\\\">\\n                        <small class=\\\"text-red-600\\\">Password must be at least 8 characters long.</small>\\n                    </div>\\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\\n                        email.</small></div>\\n                    <div class=\\\"flex items-center justify-between my-4\\\">\\n                        <div></div>\\n                        <button (click)=\\\"saveNewAdminUser()\\\"\\n                                class=\\\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\\\">\\n                            Save New Account\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"passwordReset\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Password reset email sent. Please check your email for further instructions</div>\\n                </div>\\n\\n                <div *ngIf=\\\"accountUnlocked\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-primary h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This account has been successfully reactivated.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"accountSuspended\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This account has been suspended.</div>\\n                </div>\\n\\n                <div class=\\\"mt-3 sm:mt-0 flex-1\\\">\\n                    <label for=\\\"mobile-search-candidate\\\" class=\\\"sr-only\\\">Search</label>\\n                    <div class=\\\"flex\\\">\\n                        <div class=\\\"relative flex-grow focus-within:z-10\\\">\\n                            <div class=\\\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\\\">\\n                                <svg class=\\\"h-5 w-5 text-gray-400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                     viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                    <path fill-rule=\\\"evenodd\\\"\\n                                          d=\\\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\\\"\\n                                          clip-rule=\\\"evenodd\\\"/>\\n                                </svg>\\n                            </div>\\n                            <input type=\\\"text\\\" name=\\\"mobile-search-candidate\\\" id=\\\"mobile-search-candidate\\\"\\n                                   class=\\\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\\\"\\n                                   placeholder=\\\"Search users\\\"\\n                                   (keyup)=\\\"searchText.next($event.target.value)\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <table class=\\\"min-w-full border-separate bg-white\\\" style=\\\"border-spacing: 0\\\">\\n                    <ng-template [ngIf]=\\\"accounts && accounts.length\\\">\\n\\n                        <thead class=\\\"bg-gray-100\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Name\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Status\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\\\">\\n                                <span class=\\\"sr-only\\\">Edit</span>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody *ngFor=\\\"let account of accounts; let i = index\\\">\\n                        <tr class=\\\"hover:bg-gray-50 cursor-pointer\\\" (click)=\\\"accountAction(account)\\\">\\n                            <td (click)=\\\"viewAccount(account)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\\\">\\n                                {{account.name}}\\n                            </td>\\n                            <td (click)=\\\"viewAccount(account)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <span [ngClass]=\\\"{'bg-success': account.status === 'ACTIVE', 'bg-primary': account.status === 'PENDING', 'bg-danger': account.status === 'SUSPENDED'}\\\"\\n                                      class=\\\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\\\">\\n                                    {{account.status.toLowerCase()}}</span>\\n                            </td>\\n                            <td class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <div class=\\\"flex items-center justify-end\\\">\\n                                    <button mat-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">\\n                                        Actions\\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\\n                                    </button>\\n                                    <mat-menu #menu=\\\"matMenu\\\">\\n                                        <button mat-menu-item (click)=\\\"account.showNoteField = 'reactivate'\\\"\\n                                                *ngIf=\\\"account.status === 'LOCKED' || account.status === 'SUSPENDED'\\\">\\n                                            Reactivate\\n                                        </button>\\n                                        <button mat-menu-item (click)=\\\"account.showNoteField = 'suspend'\\\"\\n                                                *ngIf=\\\"account.status !== 'SUSPENDED'\\\">\\n                                            Suspend\\n                                        </button>\\n                                    </mat-menu>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"account.showNoteField\\\" class=\\\"hover:bg-white\\\">\\n                            <td [colSpan]=\\\"3\\\" class=\\\"pl-4\\\">\\n                                <div class=\\\"my-2\\\">\\n                                    <input type=\\\"text\\\" [ngClass]=\\\"{'border border-red-600': !account.note}\\\"\\n                                           class=\\\"w-full \\\" [(ngModel)]=\\\"account.note\\\"\\n                                           placeholder=\\\"Please enter accompanying note\\\">\\n                                </div>\\n                                <div class=\\\"flex items-center justify-between mt-4\\\">\\n                                    <button\\n                                        class=\\\"py-2 px-4 border border-gray-500 text-gray-500 font-semibold rounded-md hover:bg-gray-50 focus:outline-none\\\"\\n                                        (click)=\\\"account.showNoteField = ''\\\">\\n                                        Cancel\\n                                    </button>\\n                                    <button [disabled]=\\\"!account.note\\\"\\n                                            (click)=\\\"account.showNoteField === 'suspend' ? suspend(account, account.note) : reactivate(account, account.note)\\\"\\n                                            class=\\\"disabled:opacity-50 py-2 px-4 bg-primary text-white font-semibold rounded-md focus:outline-none\\\">\\n                                        Save note and {{account.showNoteField}}\\n                                    </button>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                        <tbody>\\n                        <tr>\\n                            <td colspan=\\\"4\\\"\\n                                class=\\\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\\\">\\n                                <div class=\\\"paging-toolbar flex align-center justify-end\\\">\\n                                    <mat-paginator class=\\\"user-paginator flex1 pl050 mb0\\\" [length]=\\\"resultSize\\\"\\n                                                   [pageSize]=\\\"limit.getValue()\\\"\\n                                                   [pageIndex]=\\\"pageIndex\\\"\\n                                                   [pageSizeOptions]=\\\"[5, 10, 25, 100, 500, 1000]\\\"\\n                                                   (page)=\\\"updatePage($event)\\\">\\n                                    </mat-paginator>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </ng-template>\\n                </table>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.list-items{background-color:#fff}.list-items .item-list{position:relative;border-bottom:1px solid #ddd;padding-left:1rem}.list-items .item-list:after{content:\\\"\\\\232a\\\";position:absolute;font-size:1.8rem;color:#ccc;right:0;top:25%}.list-items .item-list h3{margin:.3rem 0}.list-items .item-list p{margin:.3rem 0;color:#838383;font-size:.9rem}.list-items .item-list p:first-of-type{margin-bottom:0}.list-items .item-list p:last-of-type{margin-top:0}@media only screen and (max-width: 320px){.list-items .item-list h3{font-size:1.2rem}.list-items .item-list p{font-size:.85rem}}@media only screen and (max-width: 768px){.account-users .desktop-table-view{display:none}.account-users .mobile-list-view{display:block}}@media only screen and (min-width: 768px){.account-users .desktop-table-view{display:block;padding:1rem}.account-users .mobile-list-view{display:none}}.account-users .desktop-table-view,.account-users .mobile-list-view,.account-users table{background-color:#fff}.account-users tbody tr.PENDING td:not(.actions){opacity:.6}.account-users tbody tr:not(.PENDING):hover{background-color:#f5f5f5;cursor:pointer}.account-users tbody tr td.status span{padding:.25rem .4rem;text-transform:lowercase;font-size:.9rem;border-radius:2px}.account-users tbody tr td.status span.PENDING{background-color:gray;color:#fff}.account-users tbody tr td.status span.ACTIVE{background-color:#12a6d3;color:#fff}.account-users .invite-user{margin-bottom:0}.account-users .user-paginator{background:transparent}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i6.MatPaginator, selector: \"mat-paginator\", inputs: [\"disabled\"], exportAs: [\"matPaginator\"] }, { kind: \"component\", type: i6$1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i7.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i9.MatMenu, selector: \"mat-menu\", exportAs: [\"matMenu\"] }, { kind: \"component\", type: i9.MatMenuItem, selector: \"[mat-menu-item]\", inputs: [\"disabled\", \"disableRipple\", \"role\"], exportAs: [\"matMenuItem\"] }, { kind: \"directive\", type: i9.MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", exportAs: [\"matMenuTrigger\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AccountsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-accounts', template: \"<div class=\\\"p-6 bg-white border-b border-gray-200\\\">\\n    <div class=\\\"md:flex md:items-center md:justify-between md:space-x-5\\\">\\n        <div class=\\\"flex items-start flex-1\\\">\\n            <div class=\\\"pt-1.5\\\">\\n                <h1 class=\\\"text-2xl font-bold text-gray-900\\\">Accounts</h1>\\n                <p class=\\\"text-sm font-medium text-gray-500\\\">\\n                    A list of all the accounts in the system.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"mt-6 flex flex-col-reverse justify-stretch\\\">\\n            <button type=\\\"button\\\" (click)=\\\"newAccount = true;\\\"\\n                    class=\\\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\\\">\\n                Create New Account\\n            </button>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"px-4 sm:px-6 lg:px-8 mt-0\\\">\\n    <div class=\\\"flex flex-col\\\">\\n        <div class=\\\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\\\">\\n            <div class=\\\"inline-block min-w-full py-2 align-middle\\\">\\n\\n                <div *ngIf=\\\"newAccountAdded\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\"\\n                         viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                              d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">New account successfully added.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"newAccount\\\" class=\\\"px-6 pb-6 mt-4 flex flex-col border-b\\\">\\n                    <p><b>Add New Account</b></p>\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"newAccountName\\\" placeholder=\\\"Enter name for the new account\\\">\\n\\n                    <input class=\\\"mt-2\\\" type=\\\"email\\\" [(ngModel)]=\\\"newAccountEmail\\\"\\n                           placeholder=\\\"Enter email address for account user\\\">\\n                    <input class=\\\"mt-2\\\" type=\\\"password\\\" [(ngModel)]=\\\"newAccountPassword\\\"\\n                           placeholder=\\\"Enter password for user\\\"\\n                           [ngClass]=\\\"{'border border-red-600': newAccountPassword && newAccountPassword.length < 8}\\\">\\n                    <div *ngIf=\\\"newAccountPassword && newAccountPassword.length < 8\\\">\\n                        <small class=\\\"text-red-600\\\">Password must be at least 8 characters long.</small>\\n                    </div>\\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\\n                        email.</small></div>\\n                    <div class=\\\"flex items-center justify-between my-4\\\">\\n                        <div></div>\\n                        <button (click)=\\\"saveNewAdminUser()\\\"\\n                                class=\\\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\\\">\\n                            Save New Account\\n                        </button>\\n                    </div>\\n                </div>\\n\\n                <div *ngIf=\\\"passwordReset\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-success h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">Password reset email sent. Please check your email for further instructions</div>\\n                </div>\\n\\n                <div *ngIf=\\\"accountUnlocked\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-primary h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This account has been successfully reactivated.</div>\\n                </div>\\n\\n                <div *ngIf=\\\"accountSuspended\\\" class=\\\"my-8 flex items-center justify-center\\\">\\n                    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-16 w-16 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                        <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\\\" />\\n                    </svg>\\n                    <div class=\\\"text-lg\\\">This account has been suspended.</div>\\n                </div>\\n\\n                <div class=\\\"mt-3 sm:mt-0 flex-1\\\">\\n                    <label for=\\\"mobile-search-candidate\\\" class=\\\"sr-only\\\">Search</label>\\n                    <div class=\\\"flex\\\">\\n                        <div class=\\\"relative flex-grow focus-within:z-10\\\">\\n                            <div class=\\\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\\\">\\n                                <svg class=\\\"h-5 w-5 text-gray-400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n                                     viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\">\\n                                    <path fill-rule=\\\"evenodd\\\"\\n                                          d=\\\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\\\"\\n                                          clip-rule=\\\"evenodd\\\"/>\\n                                </svg>\\n                            </div>\\n                            <input type=\\\"text\\\" name=\\\"mobile-search-candidate\\\" id=\\\"mobile-search-candidate\\\"\\n                                   class=\\\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\\\"\\n                                   placeholder=\\\"Search users\\\"\\n                                   (keyup)=\\\"searchText.next($event.target.value)\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <table class=\\\"min-w-full border-separate bg-white\\\" style=\\\"border-spacing: 0\\\">\\n                    <ng-template [ngIf]=\\\"accounts && accounts.length\\\">\\n\\n                        <thead class=\\\"bg-gray-100\\\">\\n                        <tr>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Name\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\\\">\\n                                Status\\n                            </th>\\n                            <th scope=\\\"col\\\"\\n                                class=\\\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\\\">\\n                                <span class=\\\"sr-only\\\">Edit</span>\\n                            </th>\\n                        </tr>\\n                        </thead>\\n                        <tbody *ngFor=\\\"let account of accounts; let i = index\\\">\\n                        <tr class=\\\"hover:bg-gray-50 cursor-pointer\\\" (click)=\\\"accountAction(account)\\\">\\n                            <td (click)=\\\"viewAccount(account)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\\\">\\n                                {{account.name}}\\n                            </td>\\n                            <td (click)=\\\"viewAccount(account)\\\"\\n                                class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <span [ngClass]=\\\"{'bg-success': account.status === 'ACTIVE', 'bg-primary': account.status === 'PENDING', 'bg-danger': account.status === 'SUSPENDED'}\\\"\\n                                      class=\\\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\\\">\\n                                    {{account.status.toLowerCase()}}</span>\\n                            </td>\\n                            <td class=\\\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\\\">\\n                                <div class=\\\"flex items-center justify-end\\\">\\n                                    <button mat-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">\\n                                        Actions\\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\\n                                    </button>\\n                                    <mat-menu #menu=\\\"matMenu\\\">\\n                                        <button mat-menu-item (click)=\\\"account.showNoteField = 'reactivate'\\\"\\n                                                *ngIf=\\\"account.status === 'LOCKED' || account.status === 'SUSPENDED'\\\">\\n                                            Reactivate\\n                                        </button>\\n                                        <button mat-menu-item (click)=\\\"account.showNoteField = 'suspend'\\\"\\n                                                *ngIf=\\\"account.status !== 'SUSPENDED'\\\">\\n                                            Suspend\\n                                        </button>\\n                                    </mat-menu>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        <tr *ngIf=\\\"account.showNoteField\\\" class=\\\"hover:bg-white\\\">\\n                            <td [colSpan]=\\\"3\\\" class=\\\"pl-4\\\">\\n                                <div class=\\\"my-2\\\">\\n                                    <input type=\\\"text\\\" [ngClass]=\\\"{'border border-red-600': !account.note}\\\"\\n                                           class=\\\"w-full \\\" [(ngModel)]=\\\"account.note\\\"\\n                                           placeholder=\\\"Please enter accompanying note\\\">\\n                                </div>\\n                                <div class=\\\"flex items-center justify-between mt-4\\\">\\n                                    <button\\n                                        class=\\\"py-2 px-4 border border-gray-500 text-gray-500 font-semibold rounded-md hover:bg-gray-50 focus:outline-none\\\"\\n                                        (click)=\\\"account.showNoteField = ''\\\">\\n                                        Cancel\\n                                    </button>\\n                                    <button [disabled]=\\\"!account.note\\\"\\n                                            (click)=\\\"account.showNoteField === 'suspend' ? suspend(account, account.note) : reactivate(account, account.note)\\\"\\n                                            class=\\\"disabled:opacity-50 py-2 px-4 bg-primary text-white font-semibold rounded-md focus:outline-none\\\">\\n                                        Save note and {{account.showNoteField}}\\n                                    </button>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                        <tbody>\\n                        <tr>\\n                            <td colspan=\\\"4\\\"\\n                                class=\\\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\\\">\\n                                <div class=\\\"paging-toolbar flex align-center justify-end\\\">\\n                                    <mat-paginator class=\\\"user-paginator flex1 pl050 mb0\\\" [length]=\\\"resultSize\\\"\\n                                                   [pageSize]=\\\"limit.getValue()\\\"\\n                                                   [pageIndex]=\\\"pageIndex\\\"\\n                                                   [pageSizeOptions]=\\\"[5, 10, 25, 100, 500, 1000]\\\"\\n                                                   (page)=\\\"updatePage($event)\\\">\\n                                    </mat-paginator>\\n                                </div>\\n                            </td>\\n                        </tr>\\n                        </tbody>\\n                    </ng-template>\\n                </table>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";table{border-style:none;border-top-width:0;width:100%;border-spacing:0;border-collapse:collapse}table tr{border-style:none;border-bottom-width:0}table th,table td{border-style:none;padding-right:1em;padding-top:1em;padding-bottom:1em;text-align:left;vertical-align:top}table th.tool,table td.tool{padding:0 1em}table th+th,table th+td,table td+th,table td+td{border-left-width:1px}table thead tr:last-child{border-bottom-width:2px}table thead th,table tr.index th{font-weight:600}table thead th{border-bottom:1px solid;padding-bottom:.25em;border-color:#ddd}table tr.index th{font-size:1.33333em;line-height:1.2em}table tbody:first-of-type tr.index th{padding-top:1em}table tbody th{font-weight:400}table tbody td{border-bottom:1px solid;border-color:#eee;vertical-align:middle}.item-selection{width:20px;height:20px;border:2px solid #dddddd;border-radius:4px;font-size:1rem;cursor:pointer;-webkit-user-select:none;user-select:none}.item-selection.selected{background-color:#bcbcbc;border-color:#bcbcbc;color:#fff}.list-items{background-color:#fff}.list-items .item-list{position:relative;border-bottom:1px solid #ddd;padding-left:1rem}.list-items .item-list:after{content:\\\"\\\\232a\\\";position:absolute;font-size:1.8rem;color:#ccc;right:0;top:25%}.list-items .item-list h3{margin:.3rem 0}.list-items .item-list p{margin:.3rem 0;color:#838383;font-size:.9rem}.list-items .item-list p:first-of-type{margin-bottom:0}.list-items .item-list p:last-of-type{margin-top:0}@media only screen and (max-width: 320px){.list-items .item-list h3{font-size:1.2rem}.list-items .item-list p{font-size:.85rem}}@media only screen and (max-width: 768px){.account-users .desktop-table-view{display:none}.account-users .mobile-list-view{display:block}}@media only screen and (min-width: 768px){.account-users .desktop-table-view{display:block;padding:1rem}.account-users .mobile-list-view{display:none}}.account-users .desktop-table-view,.account-users .mobile-list-view,.account-users table{background-color:#fff}.account-users tbody tr.PENDING td:not(.actions){opacity:.6}.account-users tbody tr:not(.PENDING):hover{background-color:#f5f5f5;cursor:pointer}.account-users tbody tr td.status span{padding:.25rem .4rem;text-transform:lowercase;font-size:.9rem;border-radius:2px}.account-users tbody tr td.status span.PENDING{background-color:gray;color:#fff}.account-users tbody tr td.status span.ACTIVE{background-color:#12a6d3;color:#fff}.account-users .invite-user{margin-bottom:0}.account-users .user-paginator{background:transparent}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: AccountService }, { type: i2$1.Router }]; }, propDecorators: { accountClickThrough: [{\n                type: Input\n            }] } });\n\nclass InvitationComponent extends BaseComponent {\n    constructor(kcAuthService, route) {\n        super(kcAuthService);\n        this.route = route;\n        this.details = {};\n        this.name = '';\n        this.password = '';\n        this.inviteAccepted = false;\n        this.invitationError = false;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this.invitationCode = this.route.snapshot.queryParams.invitationCode;\n        this.authService.getInvitationDetails(this.invitationCode).then(details => {\n            this.details = details;\n        }).catch(err => {\n            this.invitationError = true;\n        });\n    }\n    acceptInvitation() {\n        this.authService.acceptInvitation(this.invitationCode, this.name, this.password, this.details.emailAddress).then(() => {\n            this.inviteAccepted = true;\n        });\n    }\n}\nInvitationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InvitationComponent, deps: [{ token: AuthenticationService }, { token: i2$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nInvitationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: InvitationComponent, selector: \"ka-invitation\", inputs: { authenticationService: \"authenticationService\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\\\">\\n\\n    <div class=\\\"actioninfo p2w p1m\\\">\\n        <ng-template [ngIf]=\\\"!inviteAccepted && !invitationError\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <b>Invitation Details</b>\\n            </h4>\\n\\n            <div class=\\\"mb1\\\">\\n                <p class=\\\"mb-4\\\">You have been invited to join the {{details.accountName}} account using email address\\n                    <b>{{details.emailAddress}}</b></p>\\n\\n                <ng-template [ngIf]=\\\"details.newUser\\\">\\n\\n                    <p class=\\\"mb-4\\\">Please enter your full name and create a new password in order to log into your account.</p>\\n\\n                    <p>\\n                        <label>Full Name</label>\\n                        <input class=\\\"w-full\\\" type=\\\"text\\\" [(ngModel)]=\\\"name\\\">\\n                    </p>\\n\\n                    <p>\\n                        <label>New Password</label>\\n                        <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\">\\n                    </p>\\n\\n                </ng-template>\\n\\n                <p class=\\\"mt-4\\\">To accept this invitation please click on the 'Accept Invitation' button.</p>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"inviteAccepted\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-green-500 h-24 w-24 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                </svg>\\n                <div class=\\\"text-lg\\\">Invitation Accepted. You have been added to the {{details.accountName}} account.</div>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"invitationError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-yellow-500 h-24 w-24 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\" />\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem with the invitation code supplied, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n    </div>\\n    <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n        <button *ngIf=\\\"!inviteAccepted && !invitationError\\\" class=\\\"button small-button white-button disabled:opacity-50\\\" (click)=\\\"acceptInvitation()\\\"\\n            [disabled]=\\\"details.newUser && (!name || !password)\\\">\\n            Accept Invitation\\n        </button>\\n    </div>\\n\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: InvitationComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-invitation', template: \"<div class=\\\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\\\">\\n\\n    <div class=\\\"actioninfo p2w p1m\\\">\\n        <ng-template [ngIf]=\\\"!inviteAccepted && !invitationError\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <b>Invitation Details</b>\\n            </h4>\\n\\n            <div class=\\\"mb1\\\">\\n                <p class=\\\"mb-4\\\">You have been invited to join the {{details.accountName}} account using email address\\n                    <b>{{details.emailAddress}}</b></p>\\n\\n                <ng-template [ngIf]=\\\"details.newUser\\\">\\n\\n                    <p class=\\\"mb-4\\\">Please enter your full name and create a new password in order to log into your account.</p>\\n\\n                    <p>\\n                        <label>Full Name</label>\\n                        <input class=\\\"w-full\\\" type=\\\"text\\\" [(ngModel)]=\\\"name\\\">\\n                    </p>\\n\\n                    <p>\\n                        <label>New Password</label>\\n                        <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\">\\n                    </p>\\n\\n                </ng-template>\\n\\n                <p class=\\\"mt-4\\\">To accept this invitation please click on the 'Accept Invitation' button.</p>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"inviteAccepted\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-green-500 h-24 w-24 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\" />\\n                </svg>\\n                <div class=\\\"text-lg\\\">Invitation Accepted. You have been added to the {{details.accountName}} account.</div>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"invitationError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-yellow-500 h-24 w-24 mr-2\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\" />\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem with the invitation code supplied, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n    </div>\\n    <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n        <button *ngIf=\\\"!inviteAccepted && !invitationError\\\" class=\\\"button small-button white-button disabled:opacity-50\\\" (click)=\\\"acceptInvitation()\\\"\\n            [disabled]=\\\"details.newUser && (!name || !password)\\\">\\n            Accept Invitation\\n        </button>\\n    </div>\\n\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }, { type: i2$1.ActivatedRoute }]; }, propDecorators: { authenticationService: [{\n                type: Input\n            }] } });\n\nclass PasswordResetComponent extends BaseComponent {\n    constructor(kcAuthService, route) {\n        super(kcAuthService);\n        this.route = route;\n        this.loginRoute = '/login';\n        this.codeError = false;\n        this.resetError = false;\n        this.resetComplete = false;\n    }\n    ngOnInit() {\n        const _super = Object.create(null, {\n            ngOnInit: { get: () => super.ngOnInit }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            _super.ngOnInit.call(this);\n            this.resetCode = this.route.snapshot.queryParams.code;\n            this.authService.getEmailForPasswordReset(this.resetCode).then(resetEmail => {\n                this.resetEmail = resetEmail;\n            }).catch(err => {\n                this.codeError = true;\n            });\n        });\n    }\n    recaptchaResolved(response) {\n        this.recaptchaResponse = response;\n    }\n    saveNewPassword() {\n        this.authService.resetPassword(this.resetEmail, this.confirmPassword, this.resetCode, this.recaptchaResponse)\n            .then(() => {\n            this.resetComplete = true;\n            setTimeout(() => {\n                window.location.href = this.loginRoute;\n            }, 5000);\n        })\n            .catch(err => {\n            this.resetError = true;\n        });\n    }\n}\nPasswordResetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: PasswordResetComponent, deps: [{ token: AuthenticationService }, { token: i2$1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nPasswordResetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.6\", type: PasswordResetComponent, selector: \"ka-password-reset\", inputs: { authenticationService: \"authenticationService\", loginRoute: \"loginRoute\", recaptchaKey: \"recaptchaKey\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\\\">\\n\\n    <div class=\\\"actioninfo p2w p1m\\\">\\n        <ng-template [ngIf]=\\\"resetEmail && !resetComplete && !resetError && !codeError\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <b>Enter New Password</b>\\n            </h4>\\n\\n            <div class=\\\"mb-4\\\">\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>Current Email Address</label>\\n                    <input class=\\\"w-full\\\" type=\\\"text\\\" [value]=\\\"resetEmail\\\" disabled>\\n                </div>\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>New Password</label>\\n                    <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\">\\n                </div>\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>Confirm New Password</label>\\n                    <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\">\\n                </div>\\n\\n                <div *ngIf=\\\"confirmPassword && password !== confirmPassword\\\"\\n                     class=\\\"text-red-600 text-sm\\\">\\n                    Passwords do not match\\n                </div>\\n\\n            </div>\\n\\n            <re-captcha class=\\\"mt-4\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                        [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"resetComplete\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-secondary h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">Your password has been successfully reset.</div>\\n            </div>\\n\\n            <a class=\\\"justify-center text-primary mt-8 cursor-pointer hover:underline flex items-center\\\"\\n               [routerLink]=\\\"[loginRoute]\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-6 w-6\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\"\\n                     stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M11 17l-5-5m0 0l5-5m-5 5h12\\\"/>\\n                </svg>\\n                Go to login\\n            </a>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"codeError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem with the reset code supplied, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"resetError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem resetting your password at this time, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n    </div>\\n    <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n        <button class=\\\"button small-button white-button disabled:opacity-50\\\"\\n                *ngIf=\\\"resetEmail && !resetComplete && !resetError && !codeError\\\"\\n                [disabled]=\\\"!confirmPassword || confirmPassword !== password\\\"\\n                (click)=\\\"saveNewPassword()\\\">\\n            Save New Password\\n        </button>\\n    </div>\\n\\n</div>\\n\", styles: [\"\"], dependencies: [{ kind: \"directive\", type: i2$1.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i5.RecaptchaComponent, selector: \"re-captcha\", inputs: [\"id\", \"siteKey\", \"theme\", \"type\", \"size\", \"badge\", \"tabIndex\"], outputs: [\"resolved\"], exportAs: [\"reCaptcha\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: PasswordResetComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ka-password-reset', template: \"<div class=\\\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\\\">\\n\\n    <div class=\\\"actioninfo p2w p1m\\\">\\n        <ng-template [ngIf]=\\\"resetEmail && !resetComplete && !resetError && !codeError\\\">\\n            <h4 class=\\\"mb1 mt0 flex align-center\\\">\\n                <b>Enter New Password</b>\\n            </h4>\\n\\n            <div class=\\\"mb-4\\\">\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>Current Email Address</label>\\n                    <input class=\\\"w-full\\\" type=\\\"text\\\" [value]=\\\"resetEmail\\\" disabled>\\n                </div>\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>New Password</label>\\n                    <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"password\\\">\\n                </div>\\n\\n                <div class=\\\"mb-4\\\">\\n                    <label>Confirm New Password</label>\\n                    <input class=\\\"w-full\\\" type=\\\"password\\\" [(ngModel)]=\\\"confirmPassword\\\">\\n                </div>\\n\\n                <div *ngIf=\\\"confirmPassword && password !== confirmPassword\\\"\\n                     class=\\\"text-red-600 text-sm\\\">\\n                    Passwords do not match\\n                </div>\\n\\n            </div>\\n\\n            <re-captcha class=\\\"mt-4\\\" (resolved)=\\\"recaptchaResolved($event)\\\"\\n                        [siteKey]=\\\"recaptchaKey\\\"></re-captcha>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"resetComplete\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-secondary h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">Your password has been successfully reset.</div>\\n            </div>\\n\\n            <a class=\\\"justify-center text-primary mt-8 cursor-pointer hover:underline flex items-center\\\"\\n               [routerLink]=\\\"[loginRoute]\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-6 w-6\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\"\\n                     stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M11 17l-5-5m0 0l5-5m-5 5h12\\\"/>\\n                </svg>\\n                Go to login\\n            </a>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"codeError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem with the reset code supplied, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n        <ng-template [ngIf]=\\\"resetError\\\">\\n            <div class=\\\"my-8 flex items-center justify-center\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"text-danger h-24 w-24 mr-2\\\" fill=\\\"none\\\"\\n                     viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\">\\n                    <path stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"\\n                          d=\\\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\\\"/>\\n                </svg>\\n                <div class=\\\"text-lg\\\">There was a problem resetting your password at this time, please check and try again.</div>\\n            </div>\\n        </ng-template>\\n\\n    </div>\\n    <div class=\\\"actions flex flex-col align-center justify-center p1\\\">\\n        <button class=\\\"button small-button white-button disabled:opacity-50\\\"\\n                *ngIf=\\\"resetEmail && !resetComplete && !resetError && !codeError\\\"\\n                [disabled]=\\\"!confirmPassword || confirmPassword !== password\\\"\\n                (click)=\\\"saveNewPassword()\\\">\\n            Save New Password\\n        </button>\\n    </div>\\n\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: AuthenticationService }, { type: i2$1.ActivatedRoute }]; }, propDecorators: { authenticationService: [{\n                type: Input\n            }], loginRoute: [{\n                type: Input\n            }], recaptchaKey: [{\n                type: Input\n            }] } });\n\nclass NgKiniAuthModule {\n    static forRoot(conf) {\n        return {\n            ngModule: NgKiniAuthModule,\n            providers: [\n                { provide: KiniAuthModuleConfig, useValue: conf || {} }\n            ]\n        };\n    }\n}\nNgKiniAuthModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NgKiniAuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgKiniAuthModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.6\", ngImport: i0, type: NgKiniAuthModule, declarations: [AccountSummaryComponent,\n        EditNameComponent,\n        EditEmailComponent,\n        TwoFactorComponent,\n        LoginComponent,\n        InlineModalComponent,\n        BaseComponent,\n        EditBackupEmailComponent,\n        EditMobileComponent,\n        AddressBookComponent,\n        ContactDetailsComponent,\n        CountryCodesDirective,\n        PostcodeLookupDirective,\n        AccountUsersComponent,\n        UserRolesComponent,\n        EditRolesComponent,\n        InviteUserComponent,\n        EditDetailsComponent,\n        EditAccountNameComponent,\n        NotificationsComponent,\n        NotificationComponent,\n        AccountsComponent,\n        InvitationComponent,\n        PasswordResetComponent,\n        ChangePasswordComponent], imports: [NgKinibindModule,\n        RouterModule,\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        MatPaginatorModule,\n        MatIconModule,\n        MatButtonModule,\n        MatMenuModule,\n        MatTabsModule,\n        RecaptchaModule,\n        MatTableModule,\n        MatChipsModule,\n        MatCheckboxModule], exports: [AccountSummaryComponent,\n        EditEmailComponent,\n        TwoFactorComponent,\n        LoginComponent,\n        AddressBookComponent,\n        ContactDetailsComponent,\n        AccountUsersComponent,\n        UserRolesComponent,\n        EditRolesComponent,\n        InviteUserComponent,\n        EditAccountNameComponent,\n        NotificationsComponent,\n        NotificationComponent,\n        AccountsComponent,\n        InvitationComponent,\n        PasswordResetComponent] });\nNgKiniAuthModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NgKiniAuthModule, imports: [NgKinibindModule,\n        RouterModule,\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        MatPaginatorModule,\n        MatIconModule,\n        MatButtonModule,\n        MatMenuModule,\n        MatTabsModule,\n        RecaptchaModule,\n        MatTableModule,\n        MatChipsModule,\n        MatCheckboxModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: NgKiniAuthModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        AccountSummaryComponent,\n                        EditNameComponent,\n                        EditEmailComponent,\n                        TwoFactorComponent,\n                        LoginComponent,\n                        InlineModalComponent,\n                        BaseComponent,\n                        EditBackupEmailComponent,\n                        EditMobileComponent,\n                        AddressBookComponent,\n                        ContactDetailsComponent,\n                        CountryCodesDirective,\n                        PostcodeLookupDirective,\n                        AccountUsersComponent,\n                        UserRolesComponent,\n                        EditRolesComponent,\n                        InviteUserComponent,\n                        EditDetailsComponent,\n                        EditAccountNameComponent,\n                        NotificationsComponent,\n                        NotificationComponent,\n                        AccountsComponent,\n                        InvitationComponent,\n                        PasswordResetComponent,\n                        ChangePasswordComponent\n                    ],\n                    imports: [\n                        NgKinibindModule,\n                        RouterModule,\n                        CommonModule,\n                        FormsModule,\n                        HttpClientModule,\n                        ReactiveFormsModule,\n                        MatPaginatorModule,\n                        MatIconModule,\n                        MatButtonModule,\n                        MatMenuModule,\n                        MatTabsModule,\n                        RecaptchaModule,\n                        MatTableModule,\n                        MatChipsModule,\n                        MatCheckboxModule\n                    ],\n                    exports: [\n                        AccountSummaryComponent,\n                        EditEmailComponent,\n                        TwoFactorComponent,\n                        LoginComponent,\n                        AddressBookComponent,\n                        ContactDetailsComponent,\n                        AccountUsersComponent,\n                        UserRolesComponent,\n                        EditRolesComponent,\n                        InviteUserComponent,\n                        EditAccountNameComponent,\n                        NotificationsComponent,\n                        NotificationComponent,\n                        AccountsComponent,\n                        InvitationComponent,\n                        PasswordResetComponent\n                    ]\n                }]\n        }] });\nclass KiniAuthModuleConfig {\n}\n\nconst _ = lodash.default;\nclass AuthenticationService {\n    constructor(kbRequest, config, http) {\n        this.kbRequest = kbRequest;\n        this.config = config;\n        this.http = http;\n        this.authUser = new BehaviorSubject$1(null);\n        this.sessionData = new BehaviorSubject$1(null);\n        this.loadingRequests = new BehaviorSubject$1(false);\n        const user = sessionStorage.getItem('loggedInUser');\n        this.authUser.next(JSON.parse(user));\n        const sessionData = sessionStorage.getItem('sessionData');\n        if (sessionData && _.filter(JSON.parse(sessionData)).length) {\n            this.sessionData.next(JSON.parse(sessionData));\n        }\n    }\n    getLoggedInUser(reloadSession) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (reloadSession || !this.sessionData.getValue()) {\n                yield this.getSessionData();\n            }\n            const res = yield this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user')\n                .toPromise();\n            if (res) {\n                yield this.setSessionUser(res);\n                const sessionData = sessionStorage.getItem('sessionData');\n                if (sessionData && _.filter(JSON.parse(sessionData)).length) {\n                    this.sessionData.next(JSON.parse(sessionData));\n                }\n                else {\n                    yield this.getSessionData();\n                }\n                return res;\n            }\n            return null;\n        });\n    }\n    login(username, password, clientTwoFactorData, recaptcha) {\n        const request = this.config.guestHttpURL + `/auth/login`;\n        const headers = new HttpHeaders({ 'X-CAPTCHA-TOKEN': recaptcha || '' });\n        const options = { headers };\n        return this.kbRequest.makePostRequest(request, {\n            emailAddress: username,\n            password: this.getHashedPassword(password, username),\n            clientTwoFactorData: clientTwoFactorData || null\n        }, options).toPromise().then((user) => {\n            if (user === 'REQUIRES_2FA') {\n                return user;\n            }\n            else {\n                return this.getSessionData().then(() => {\n                    return this.setSessionUser(user);\n                });\n            }\n        });\n    }\n    sendPasswordReset(emailAddress, recaptcha) {\n        const headers = new HttpHeaders({ 'X-CAPTCHA-TOKEN': recaptcha || '' });\n        return this.http.get(this.config.guestHttpURL + '/auth/passwordReset', {\n            params: { emailAddress },\n            headers\n        }).toPromise();\n    }\n    getEmailForPasswordReset(resetCode) {\n        return this.http.get(this.config.guestHttpURL + '/auth/passwordReset/' + resetCode)\n            .toPromise();\n    }\n    resetPassword(emailAddress, newPassword, resetCode, recaptcha) {\n        const headers = new HttpHeaders({ 'X-CAPTCHA-TOKEN': recaptcha || '' });\n        const options = { headers };\n        return this.http.post(this.config.guestHttpURL + '/auth/passwordReset', {\n            newPassword: this.getHashedPassword(newPassword, emailAddress, true),\n            resetCode\n        }, options).toPromise();\n    }\n    changeUserPassword(newPassword, existingPassword, email) {\n        return this.http.post(this.config.accessHttpURL + '/user/changeUserPassword', {\n            newPassword: this.getHashedPassword(newPassword, email, true),\n            password: this.getHashedPassword(existingPassword, email)\n        }).toPromise();\n    }\n    updateApplicationSettings(settings) {\n        return this.http.put(this.config.accessHttpURL + '/user/applicationSettings', settings).toPromise();\n    }\n    isAdminNow() {\n        const session = this.sessionData.getValue();\n        if (session && session.privileges) {\n            const accountId = session.account ? session.account.accountId : null;\n            const privileges = session.privileges.ACCOUNT;\n            if (privileges['*']) {\n                return true;\n            }\n            return privileges[accountId] ? privileges[accountId].indexOf('*') > -1 : false;\n        }\n        return false;\n    }\n    isAdmin() {\n        return this.sessionData.pipe(map(session => {\n            if (session && session.privileges) {\n                const accountId = session.account ? session.account.accountId : null;\n                const privileges = session.privileges.ACCOUNT;\n                if (privileges['*']) {\n                    return true;\n                }\n                return privileges[accountId] ? privileges[accountId].indexOf('*') > -1 : false;\n            }\n            return false;\n        }));\n    }\n    closeActiveSession() {\n        return this.kbRequest.makeGetRequest('/guest/auth/closeActiveSessions').toPromise()\n            .then(res => {\n            return this.getSessionData().then(() => {\n                return res;\n            });\n        });\n    }\n    generateTwoFactorSettings() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/twoFactorSettings')\n            .toPromise();\n    }\n    authenticateNewTwoFactor(code, secret) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/newTwoFactor', {\n            params: { code, secret }\n        }).toPromise().then(user => {\n            if (user) {\n                this.setSessionUser(user);\n            }\n            return user;\n        });\n    }\n    authenticateTwoFactor(code) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const url = this.config.guestHttpURL + `/auth/twoFactor?code=${code}`;\n            const result = yield this.kbRequest.makeGetRequest(url).toPromise();\n            if (result) {\n                sessionStorage.removeItem('pendingLoginSession');\n                yield this.getLoggedInUser(true);\n                return result;\n            }\n            else {\n                throw (result);\n            }\n        });\n    }\n    disableTwoFactor() {\n        const url = this.config.accessHttpURL + '/user/disableTwoFA';\n        return this.kbRequest.makeGetRequest(url).toPromise().then(user => {\n            this.setSessionUser(user);\n        });\n    }\n    doesUserExist(username) {\n        return Promise.resolve(true);\n    }\n    emailAvailable(emailAddress) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + `/auth/emailExists?emailAddress=${emailAddress}`).toPromise().then(res => {\n            return !res;\n        });\n    }\n    getInvitationDetails(invitationCode) {\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + `/registration/invitation/${invitationCode}`).toPromise();\n    }\n    acceptInvitation(invitationCode, name = '', password = '', email = '') {\n        return this.kbRequest.makePostRequest(this.config.guestHttpURL + `/registration/invitation/${invitationCode}`, { name, password: this.getHashedPassword(password, email, true) }).toPromise();\n    }\n    validateUserPassword(emailAddress, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/auth/validatePassword', {\n            emailAddress,\n            password: this.getHashedPassword(password)\n        }).toPromise();\n    }\n    changeUserDetails(newEmailAddress, newName, password, userId) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeDetails', {\n            newEmailAddress,\n            newName,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    changeUserName(newName, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeName', {\n            newName,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    changeUserEmailAddress(newEmailAddress, password) {\n        const sessionData = this.sessionData.getValue();\n        const params = { newEmailAddress, password };\n        if (sessionData.sessionSalt) {\n            params.password = this.getHashedPassword(password);\n            params.hashedPassword = sha512.sha512(password + newEmailAddress);\n        }\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeEmail', params).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    changeUserBackEmailAddress(newEmailAddress, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeBackupEmail', {\n            newEmailAddress,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    changeUserMobile(newMobile, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeMobile', {\n            newMobile,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n    getGoogleAuthSettings() {\n        return Promise.resolve(123);\n    }\n    logout() {\n        this.authUser.next(null);\n        this.sessionData.next(null);\n        sessionStorage.clear();\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + '/auth/logout')\n            .toPromise();\n    }\n    setSessionUser(user) {\n        sessionStorage.setItem('loggedInUser', JSON.stringify(user));\n        this.authUser.next(user);\n        return Promise.resolve(user);\n    }\n    setLoadingRequest(value) {\n        this.loadingRequests.next(value);\n    }\n    sessionTransfer(token) {\n        return this.http.post(this.config.guestHttpURL + '/auth/sessionTransfer', token).toPromise();\n    }\n    getSessionData() {\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + '/session')\n            .toPromise()\n            .then(sessionData => {\n            if (sessionData) {\n                sessionStorage.setItem('sessionData', JSON.stringify(sessionData));\n                this.sessionData.next(sessionData);\n                return sessionData;\n            }\n            else {\n                sessionStorage.removeItem('sessionData');\n                this.sessionData.next(null);\n                return null;\n            }\n        });\n    }\n    getHashedPassword(password, emailAddress, newPassword = false) {\n        let hashedPassword;\n        const sessionData = this.sessionData.getValue();\n        const loggedInUser = this.authUser.getValue();\n        const email = emailAddress ? emailAddress : (loggedInUser ? loggedInUser.emailAddress : '');\n        const hash = sha512.sha512(password + email);\n        if (newPassword) {\n            return hash;\n        }\n        if (email && sessionData && sessionData.sessionSalt) {\n            hashedPassword = sha512.sha512(hash + sessionData.sessionSalt);\n        }\n        return hashedPassword || password;\n    }\n}\nAuthenticationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AuthenticationService, deps: [{ token: i1.KinibindRequestService }, { token: KiniAuthModuleConfig }, { token: i3$1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthenticationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AuthenticationService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.6\", ngImport: i0, type: AuthenticationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.KinibindRequestService }, { type: KiniAuthModuleConfig }, { type: i3$1.HttpClient }]; } });\n\n/*\n * Public API Surface of ng-kiniauth\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AccountService, AccountSummaryComponent, AccountUsersComponent, AccountsComponent, AddressBookComponent, AuthenticationService, ContactDetailsComponent, EditAccountNameComponent, EditEmailComponent, EditRolesComponent, InvitationComponent, InviteUserComponent, KiniAuthModuleConfig, LoginComponent, NgKiniAuthModule, NotificationComponent, NotificationService, NotificationsComponent, PasswordResetComponent, TwoFactorComponent, UserRolesComponent, UserService };\n//# sourceMappingURL=ng-kiniauth.mjs.map\n","map":{"version":3,"file":"ng-kiniauth.mjs","sources":["../../../projects/ng-kiniauth/src/lib/views/base-component.ts","../../../projects/ng-kiniauth/src/lib/services/account.service.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-name/edit-name.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-name/edit-name.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-email/edit-email.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-email/edit-email.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/two-factor/two-factor.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/two-factor/two-factor.component.html","../../../projects/ng-kiniauth/src/lib/views/inline-modal/inline-modal.component.ts","../../../projects/ng-kiniauth/src/lib/views/inline-modal/inline-modal.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-backup-email/edit-backup-email.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-backup-email/edit-backup-email.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-mobile/edit-mobile.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-mobile/edit-mobile.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-account-name/edit-account-name.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-account-name/edit-account-name.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/change-password/change-password.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/change-password/change-password.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/account-summary.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/account-summary.component.html","../../../projects/ng-kiniauth/src/lib/views/auth/login/login.component.ts","../../../projects/ng-kiniauth/src/lib/views/auth/login/login.component.html","../../../projects/ng-kiniauth/src/lib/services/contact.service.ts","../../../projects/ng-kiniauth/src/lib/views/address-book/address-book.component.ts","../../../projects/ng-kiniauth/src/lib/views/address-book/address-book.component.html","../../../projects/ng-kiniauth/src/lib/views/contact-details/contact-details.component.ts","../../../projects/ng-kiniauth/src/lib/views/contact-details/contact-details.component.html","../../../projects/ng-kiniauth/src/lib/directives/country-codes/country-codes.directive.ts","../../../projects/ng-kiniauth/src/lib/directives/postcode-lookup/postcode-lookup.directive.ts","../../../projects/ng-kiniauth/src/lib/services/user.service.ts","../../../projects/ng-kiniauth/src/lib/views/account-users/account-users.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-users/account-users.component.html","../../../projects/ng-kiniauth/src/lib/services/role.service.ts","../../../projects/ng-kiniauth/src/lib/views/user-roles/edit-roles/edit-roles.component.ts","../../../projects/ng-kiniauth/src/lib/views/user-roles/edit-roles/edit-roles.component.html","../../../projects/ng-kiniauth/src/lib/views/user-roles/user-roles.component.ts","../../../projects/ng-kiniauth/src/lib/views/user-roles/user-roles.component.html","../../../projects/ng-kiniauth/src/lib/views/invite-user/invite-user.component.ts","../../../projects/ng-kiniauth/src/lib/views/invite-user/invite-user.component.html","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-details/edit-details.component.ts","../../../projects/ng-kiniauth/src/lib/views/account-summary/edit-details/edit-details.component.html","../../../projects/ng-kiniauth/src/lib/services/notification.service.ts","../../../projects/ng-kiniauth/src/lib/views/notifications/notifications.component.ts","../../../projects/ng-kiniauth/src/lib/views/notifications/notifications.component.html","../../../projects/ng-kiniauth/src/lib/views/notifications/notification/notification.component.ts","../../../projects/ng-kiniauth/src/lib/views/notifications/notification/notification.component.html","../../../projects/ng-kiniauth/src/lib/views/accounts/accounts.component.ts","../../../projects/ng-kiniauth/src/lib/views/accounts/accounts.component.html","../../../projects/ng-kiniauth/src/lib/views/invitation/invitation.component.ts","../../../projects/ng-kiniauth/src/lib/views/invitation/invitation.component.html","../../../projects/ng-kiniauth/src/lib/views/password-reset/password-reset.component.ts","../../../projects/ng-kiniauth/src/lib/views/password-reset/password-reset.component.html","../../../projects/ng-kiniauth/src/ng-kiniauth.module.ts","../../../projects/ng-kiniauth/src/lib/services/authentication.service.ts","../../../projects/ng-kiniauth/src/public-api.ts","../../../projects/ng-kiniauth/src/ng-kiniauth.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Component({\n    selector: 'ka-base-component',\n    template: ''\n})\nexport class BaseComponent implements OnInit {\n\n    @Input() authenticationService;\n\n    public authService;\n\n    constructor(public kcAuthService: AuthenticationService) {\n\n    }\n\n    ngOnInit(): void {\n        this.authService = this.authenticationService ? this.authenticationService : this.kcAuthService;\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {KinibindRequestService} from 'ng-kinibind';\nimport {KiniAuthModuleConfig} from '../../ng-kiniauth.module';\nimport {AuthenticationService} from './authentication.service';\nimport * as lodash from 'lodash';\n\nconst _ = lodash.default;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AccountService {\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig,\n                private authService: AuthenticationService) {\n    }\n\n    public getAccount(accountId?) {\n        const accountString = accountId ? `/${accountId}` : '';\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account' + accountString).toPromise()\n            .catch(err => {\n                return null;\n            });\n    }\n\n    public searchForAccounts(searchString?, limit?, offset?) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account', {\n            params: _.pickBy({searchString, limit, offset}, _.identity)\n        });\n    }\n\n    public createAccount(accountName, emailAddress = null, rawPassword = null, name = null) {\n        let password = rawPassword;\n        if (rawPassword) {\n            password = this.authService.getHashedPassword(rawPassword, emailAddress, true);\n        }\n\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account',\n            _.omitBy({accountName, emailAddress, password, name}, _.isNil)\n        ).toPromise();\n    }\n\n    public suspendAccount(accountId, note) {\n        return this.kbRequest.makeRequest('PUT',\n            this.config.accessHttpURL + '/account/' + accountId + '/suspend', {\n                params: {note}\n            })\n            .toPromise();\n    }\n\n    public updateAccountName(accountId, newAccountName) {\n        return this.kbRequest.makeRequest('PUT',\n            this.config.accessHttpURL + '/account/' + accountId + '/name', {\n                params: {newAccountName}\n            })\n            .toPromise();\n    }\n\n    public reactivateAccount(accountId, note) {\n        return this.kbRequest.makeRequest('PUT',\n            this.config.accessHttpURL + '/account/' + accountId + '/reactivate', {\n                params: {note}\n            })\n            .toPromise();\n    }\n\n    public changeAccountName(newName, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account/changeName', {\n            newName,\n            password: this.authService.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return true;\n            }\n        });\n    }\n\n    public inviteUserToAccount(emailAddress, assignedRoles) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/account/invite?emailAddress=' + emailAddress,\n            assignedRoles).toPromise();\n    }\n\n}\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-name',\n    templateUrl: './edit-name.component.html',\n    styleUrls: ['./edit-name.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditNameComponent implements OnInit, OnDestroy {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newName = '';\n    public currentPassword = '';\n    public saveError: string;\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    ngOnDestroy(): void {\n\n    }\n\n    public saveNewName() {\n        this.saveError = '';\n        this.authService.changeUserName(this.newName, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                this.saveError = 'There was a problem updating your details, please check and try again.';\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your user name. You will be required to confirm you identity by entering your password\n                prior to saving the new name.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new name you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"text\" name=\"name\" [(ngModel)]=\"newName\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!newName || !currentPassword\" (click)=\"saveNewName()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Save Changes</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-email',\n    templateUrl: './edit-email.component.html',\n    styleUrls: ['./edit-email.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditEmailComponent implements OnInit, OnDestroy {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newEmailAddress = '';\n    public currentPassword = '';\n    public saveError: string;\n    public emailAvailable = true;\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    ngOnDestroy(): void {\n\n    }\n\n    public checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n\n    public saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserEmailAddress(this.newEmailAddress, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                if (err.error.validationErrors.emailAddress.email.errorMessage) {\n                    this.saveError = 'Email error: ' + err.error.validationErrors.emailAddress.email.errorMessage;\n                } else {\n                    this.saveError = 'There was a problem changing the email address, please check and try again.';\n                }\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your email address. You will be required to confirm you identity by entering your password\n                prior to saving the new email address.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new email address you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"email\" #email=\"ngModel\" name=\"email\" [(ngModel)]=\"newEmailAddress\"\n                               (change)=\"checkEmail()\" placeholder=\"New email address\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                        <span style=\"color: red\" *ngIf=\"!emailAvailable\">An account already exists with this email address</span>\n                        <span style=\"color: red\" *ngIf=\"email.invalid\">Not a valid email address</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\"\n                    (click)=\"saveEmailAddress()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Update email address</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-two-factor',\n    templateUrl: './two-factor.component.html',\n    styleUrls: ['./two-factor.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TwoFactorComponent implements OnInit {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public user: any;\n    public settings: any;\n    public twoFACode: string;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n            return user;\n        }).then(() => {\n            this.authService.generateTwoFactorSettings().then(settings => {\n                this.settings = settings;\n            });\n        });\n    }\n\n    public verifyCode() {\n        this.authService.authenticateNewTwoFactor(this.twoFACode, this.settings.secret)\n            .then(res => {\n                this.saved.emit(res);\n            });\n    }\n\n}\n","<ng-template [ngIf]=\"settings\">\n    <div class=\"font-medium text-lg ml-6 mt-4\">Google Authenticator</div>\n\n    <div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n        <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n            <div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            After downloading and installing the Google Authenticator app, scan the QR code below\n                            to link your account.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <img [src]=\"settings.qrCode\" alt=\"\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            If you are unable to scan the QR code below, please enter the following code...</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <input type=\"text\" name=\"name\" [value]=\"settings.secret\" disabled\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md cursor-text\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            Once linked, please enter the verification code you see in the Google Authenticator app\n                            below.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <input type=\"text\" name=\"name\" [(ngModel)]=\"twoFACode\" maxlength=\"10\"\n                                   placeholder=\"Enter verification code\"\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n\n                            <button type=\"button\" [disabled]=\"!twoFACode\" (click)=\"verifyCode()\"\n                                    class=\"mt-4 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                                Verify Code\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"font-medium ml-6 text-lg\">Backup Codes</div>\n    <div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n        <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n            <div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            The following one-time codes can be used if you need to gain access to your account in an\n                            emergency.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <div *ngFor=\"let code of settings.backupCodes\">{{code}}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, OnInit, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'ka-inline-modal',\n    templateUrl: './inline-modal.component.html',\n    styleUrls: ['./inline-modal.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InlineModalComponent implements OnInit {\n\n    @Output('closed') closed: EventEmitter<boolean> = new EventEmitter();\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    public back() {\n        this.closed.emit(true);\n    }\n\n}\n","<div class=\"inline-modal\">\n\n    <div class=\"flex pt2 px2 justify-end\">\n        <a class=\"close-link\" (click)=\"back()\">\n            &#10005;\n        </a>\n    </div>\n\n    <div class=\"grid grid-desktop my2 px1\">\n\n        <ng-content></ng-content>\n\n    </div>\n\n\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-backup-email',\n    templateUrl: './edit-backup-email.component.html',\n    styleUrls: ['./edit-backup-email.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditBackupEmailComponent implements OnInit {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newEmailAddress = '';\n    public currentPassword = '';\n    public saveError: string;\n    public emailAvailable = true;\n\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    public checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n\n    public saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserBackEmailAddress(this.newEmailAddress, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                this.saveError = 'There was a problem changing the email address, please check and try again.';\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your backup email address. You will be required to confirm you identity by entering your password\n                prior to saving the new email address.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new email address you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"email\" placeholder=\"New email address\" name=\"email\" [(ngModel)]=\"newEmailAddress\"\n                               (change)=\"checkEmail()\" email #email=\"ngModel\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                        <span style=\"color: red\" *ngIf=\"!emailAvailable\">An account already exists with this email address</span>\n                        <span style=\"color: red\" *ngIf=\"email.invalid\">Not a valid email address</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!emailAvailable || !newEmailAddress || !currentPassword || email.invalid\"\n                    (click)=\"saveEmailAddress()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Update email address</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-mobile',\n    templateUrl: './edit-mobile.component.html',\n    styleUrls: ['./edit-mobile.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditMobileComponent implements OnInit {\n\n    @Input() authService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newMobile = '';\n    public currentPassword = '';\n    public saveError: string;\n\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    public saveMobileNumber() {\n        this.saveError = '';\n        this.authService.changeUserMobile(this.newMobile, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                if (err.error.validationErrors.mobileNumber.regexp.errorMessage) {\n                    this.saveError = 'Number error: ' + err.error.validationErrors.mobileNumber.regexp.errorMessage;\n                } else {\n                    this.saveError = 'There was a problem changing the mobile number, please check and try again.';\n                }\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your mobile number. You will be required to confirm you identity by entering your password\n                prior to saving the new number.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new mobile number you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"text\" name=\"name\" [(ngModel)]=\"newMobile\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!newMobile || !currentPassword\" (click)=\"saveMobileNumber()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Update mobile number</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    selector: 'ka-edit-account-name',\n    templateUrl: './edit-account-name.component.html',\n    styleUrls: ['./edit-account-name.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditAccountNameComponent implements OnInit, OnDestroy {\n\n    @Input() authService;\n    @Input() accountService;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newName = '';\n    public currentPassword = '';\n    public saveError: string;\n    public user: any;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        return this.authService.getLoggedInUser().then(user => {\n            this.user = user;\n        });\n    }\n\n    ngOnDestroy(): void {\n\n    }\n\n    public saveNewName() {\n        this.saveError = '';\n        this.accountService.changeAccountName(this.newName, this.currentPassword)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                this.saveError = 'There was a problem changing the account name, please check and try again.';\n            });\n    }\n\n}\n","<div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n    <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n            <div class=\"mb-8\">\n                Change your account name. You will be required to confirm you identity by entering your password\n                prior to saving the new name.\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter the new name you want to use.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"text\" name=\"name\" [(ngModel)]=\"newName\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"space-y-6 sm:space-y-5\">\n                <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                    <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                        Enter current password to confirm name change.</label>\n                    <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                        <input type=\"password\" name=\"password\" [(ngModel)]=\"currentPassword\"\n                               class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"pt-5\">\n        <div *ngIf=\"saveError\" class=\"my-8 flex align-center error text-red-600\">\n            {{saveError}}\n        </div>\n\n        <div class=\"flex justify-end\">\n            <button type=\"button\" [disabled]=\"!newName || !currentPassword\" (click)=\"saveNewName()\"\n                    class=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                Save Changes</button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\n\n@Component({\n    selector: 'ka-change-password',\n    templateUrl: './change-password.component.html',\n    styleUrls: ['./change-password.component.sass']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n    @Input() email: string;\n    @Input() authService: any;\n\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public password: string;\n    public confirmPassword: string;\n    public existingPassword: string;\n    public saveError = false;\n    public changeComplete = false;\n    public isLengthOk = false;\n    public isLowerCaseOk = false;\n    public isUpperCaseOk = false;\n    public isDigitOk = false;\n    public isSpecialOk = false;\n    public isPasswordOk = false;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    public passwordChange() {\n        const strongPassword = new RegExp('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})');\n        this.isPasswordOk = strongPassword.test(this.password);\n\n        const lower = new RegExp('(?=.*[a-z])');\n        const upper = new RegExp('(?=.*[A-Z])');\n        const digit = new RegExp('(?=.*[0-9])');\n        const special = new RegExp('(?=.*[^A-Za-z0-9])');\n        const length = new RegExp('(?=.{8,})');\n\n        this.isLengthOk = length.test(this.password);\n        this.isLowerCaseOk = lower.test(this.password);\n        this.isUpperCaseOk = upper.test(this.password);\n        this.isDigitOk = digit.test(this.password);\n        this.isSpecialOk = special.test(this.password);\n    }\n\n    public saveNewPassword() {\n        this.saveError = false;\n        this.authService.changeUserPassword(this.confirmPassword, this.existingPassword, this.email)\n            .then(() => {\n                this.changeComplete = true;\n                setTimeout(() => {\n                    this.saved.emit(Date.now());\n                }, 3000);\n            })\n            .catch(err => {\n                this.saveError = true;\n                setTimeout(() => {\n                    this.saved.emit(Date.now());\n                }, 3000);\n            });\n    }\n\n}\n","<div *ngIf=\"saveError\" class=\"my-8 flex items-center justify-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-16 w-16 mr-2\" fill=\"none\"\n         viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n    </svg>\n    <div class=\"text-lg\">There was a problem changing your password at this time, please check your details and\n        try again.\n    </div>\n</div>\n\n<div *ngIf=\"changeComplete\" class=\"my-8 flex items-center justify-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\"\n         viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n    </svg>\n    <div class=\"text-lg\">Your password has been successfully changed.</div>\n</div>\n<ng-template [ngIf]=\"!saveError && !changeComplete\">\n    <div class=\"space-y-8 divide-y divide-gray-200 p-6\">\n        <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n\n            <div>\n                <div class=\"mb-8\">\n                    Change your existing password. You will need to enter your current password to confirm the changes.\n                </div>\n                <div class=\"font-medium text-base mb-4\">New Password</div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            Enter the new password to use.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2 \">\n                            <input type=\"password\" name=\"name\" [(ngModel)]=\"password\" (ngModelChange)=\"passwordChange()\"\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n\n                            <div class=\"mt-2 text-gray-500\">\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isLengthOk}\">\n                                    <svg [ngClass]=\"{visible: isLengthOk, invisible: !isLengthOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                          class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>8 characters</b>\n                                </div>\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isLowerCaseOk}\">\n                                    <svg [ngClass]=\"{visible: isLowerCaseOk, invisible: !isLowerCaseOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                         class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>one lower case</b>\n                                </div>\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isUpperCaseOk}\">\n                                    <svg [ngClass]=\"{visible: isUpperCaseOk, invisible: !isUpperCaseOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                         class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>one upper case</b>\n                                </div>\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isDigitOk}\">\n                                    <svg [ngClass]=\"{visible: isDigitOk, invisible: !isDigitOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                         class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>one number</b>\n                                </div>\n                                <div class=\"flex items-center\" [ngClass]=\"{'text-green-500': isSpecialOk}\">\n                                    <svg [ngClass]=\"{visible: isSpecialOk, invisible: !isSpecialOk}\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                                         class=\"w-5 h-5 mr-2\">\n                                        <path fill-rule=\"evenodd\" d=\"M9.661 2.237a.531.531 0 01.678 0 11.947 11.947 0 007.078 2.749.5.5 0 01.479.425c.069.52.104 1.05.104 1.59 0 5.162-3.26 9.563-7.834 11.256a.48.48 0 01-.332 0C5.26 16.564 2 12.163 2 7c0-.538.035-1.069.104-1.589a.5.5 0 01.48-.425 11.947 11.947 0 007.077-2.75zm4.196 5.954a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\" />\n                                    </svg>\n                                    At least&nbsp;<b>one special character</b>\n                                </div>\n                            </div>\n\n\n                        </div>\n\n                    </div>\n                </div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            Confirm new password.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <input type=\"password\" name=\"password\" [(ngModel)]=\"confirmPassword\"\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                            <span class=\"text-sm text-red-600\"\n                                  [ngClass]=\"{visible: confirmPassword && password !== confirmPassword, invisible: !confirmPassword || password === confirmPassword}\">Passwords do not match</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div class=\"font-medium text-base my-4\">Existing Password</div>\n                <div class=\"space-y-6 sm:space-y-5\">\n                    <div class=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:border-t sm:border-gray-200 sm:py-4\">\n                        <label class=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\n                            Enter your existing password.</label>\n                        <div class=\"mt-1 sm:mt-0 sm:col-span-2\">\n                            <input type=\"password\" name=\"name\" [(ngModel)]=\"existingPassword\"\n                                   class=\"max-w-lg block w-full shadow-sm sm:max-w-xs sm:text-sm border-gray-300 rounded-md\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class=\"pt-5\">\n            <div class=\"flex justify-end\">\n                <button type=\"button\" (click)=\"saveNewPassword()\"\n                        [disabled]=\"!isPasswordOk || !existingPassword || (!confirmPassword || confirmPassword !== password)\"\n                        class=\"disabled:opacity-50 ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary focus:outline-none\">\n                    Save New Password\n                </button>\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { BaseComponent } from '../base-component';\nimport { AccountService } from '../../services/account.service';\n\n@Component({\n    selector: 'ka-account-summary',\n    templateUrl: './account-summary.component.html',\n    styleUrls: ['./account-summary.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AccountSummaryComponent extends BaseComponent implements OnInit, OnDestroy {\n\n    @Input() authenticationService: any;\n    @Input() showPasswordReset = true;\n    @Input() showAccountDetails = true;\n\n    public security: any;\n    public account: any;\n    public twoFactorConfig: any;\n    public reloadTwoFactor: Subject<boolean> = new Subject();\n    public isLoading = true;\n\n    public editName = false;\n    public editAccountName = false;\n    public editEmail = false;\n    public editMobile = false;\n    public editBackup = false;\n    public enableTwoFa = false;\n    public changePassword = false;\n\n    private userSub: Subscription;\n\n    constructor(kcAuthService: AuthenticationService,\n                public accountService: AccountService) {\n        super(kcAuthService);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.loadAccount();\n        this.userSub = this.authService.authUser.subscribe(user => this.security = user);\n        return this.authService.getLoggedInUser();\n    }\n\n    ngOnDestroy(): void {\n        this.userSub.unsubscribe();\n    }\n\n    public loadAccount() {\n        this.editAccountName = false;\n        this.accountService.getAccount().then(account => {\n            this.account = account;\n        });\n    }\n\n    public resetAccountPassword() {\n        const message = 'We are going to reset the account password to a temporary one and email the registered ' +\n            'email address. Are you sure you wish to proceed?';\n        if (window.confirm(message)) {\n            this.authService.resetAccountPassword();\n        }\n    }\n\n    public disable2FA() {\n        const message = 'Are you sure you would like to turn off Two Factor Authentication?';\n        if (window.confirm(message)) {\n            this.authService.disableTwoFactor().then(() => {\n                this.reloadTwoFactor.next(true);\n            });\n        }\n    }\n\n}\n","<ng-template [ngIf]=\"!editName && !editEmail && !editBackup && !editMobile && !enableTwoFa && !changePassword\">\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\" *ngIf=\"account && showAccountDetails\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Account Details</h4>\n\n            <p class=\"mb0\" *ngIf=\"security\">Your account name is currently set to\n                <strong>{{account.name}}</strong></p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editAccountName = true;\">Edit Account Name\n            </button>\n        </div>\n\n    </div>\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0 flex align-center\">\n                <img src=\"https://www.gravatar.com/avatar/{{security.hashedEmail}}?d=mp\" height=\"40\" alt=\"user-gravatar\"\n                     class=\"mr1 mr-4\">\n                {{security.name}}\n            </h4>\n\n            <div class=\"mb1\">\n                <p *ngIf=\"security\">If you need to update your name, you can do so here.</p>\n            </div>\n\n            <div *ngIf=\"security\">\n                <p class=\"mb0\">Your user icon is based on your Gravatar image. You can easily create/edit your image by visiting the <a href=\"https://gravatar.com\" target=\"_blank\">Gravatar website.</a></p>\n            </div>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editName = true;\">Edit Name\n            </button>\n        </div>\n\n    </div>\n\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Email Address</h4>\n\n            <p class=\"mb0\" *ngIf=\"security\">Your account email address is currently set to\n                <strong>{{security.emailAddress}}</strong></p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editEmail = true;\">Edit Email\n                Address\n            </button>\n        </div>\n\n    </div>\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\" *ngIf=\"showPasswordReset\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Password</h4>\n\n            <p class=\"mb0\">Change your existing password.</p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"changePassword = true\">Change Password</button>\n        </div>\n\n    </div>\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Mobile Phone Number</h4>\n\n            <p *ngIf=\"security && security.mobileNumber\">Your mobile number is currently set to\n                <strong>{{security.mobileNumber}}</strong></p>\n\n            <p *ngIf=\"security && !security.mobileNumber\"><strong>\n                No mobile number has been set.\n            </strong></p>\n\n            <p class=\"mb0\">\n                We use your mobile phone number as an extra layer of security. It can also be used to help restore\n                access to your account.\n            </p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editMobile = true;\">Edit Mobile Number</button>\n        </div>\n\n    </div>\n\n    <div class=\"actionpanel sixtyforty mx1 mb2\">\n\n        <div class=\"actioninfo p2w p1m\">\n            <h4 class=\"mb1 mt0\">Backup Email Address</h4>\n\n            <p *ngIf=\"security && security.backupEmailAddress\">Your account backup email address is currently set to\n                <strong>{{security.backupEmailAddress}}</strong></p>\n\n            <p *ngIf=\"security && !security.backupEmailAddress\"><strong>\n                No backup email address has been set.\n            </strong></p>\n\n            <p class=\"mb0\">\n                In the event you need to restore access to your account we can use this secondary email address\n                to help you gain access.\n            </p>\n\n        </div>\n        <div class=\"actions flex flex-col align-center justify-center p1\">\n            <button class=\"button small-button white-button\" (click)=\"editBackup = true;\">Edit Email Address</button>\n        </div>\n\n    </div>\n\n<!--    <div class=\"actionpanel sixtyforty mx1 mb2\">-->\n\n<!--        <div class=\"actioninfo p2w p1m\">-->\n<!--            <h4 class=\"mb1 mt0\">Two Factor Authentication</h4>-->\n\n<!--            <p class=\"mb0\">-->\n<!--                To increase security on your account you can enable two factor authentication. Currently this uses the-->\n<!--                Google Authenticator app downloadable for your mobile device.-->\n<!--            </p>-->\n\n<!--        </div>-->\n<!--        <div class=\"actions flex flex-col align-center justify-center p1\">-->\n\n<!--            <span *ngIf=\"!security\">Loading...</span>-->\n\n<!--            <button class=\"button small-button white-button\" (click)=\"enableTwoFa = true\"-->\n<!--                    *ngIf=\"security && !security.twoFactorData\">-->\n<!--                Enable 2FA-->\n<!--            </button>-->\n<!--            <button class=\"button small-button alert-button\" *ngIf=\"security && security.twoFactorData\"-->\n<!--                    (click)=\"disable2FA()\">-->\n<!--                Disable 2FA-->\n<!--            </button>-->\n<!--        </div>-->\n\n<!--    </div>-->\n\n</ng-template>\n<ka-inline-modal *ngIf=\"editName\" (closed)=\"editName = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit User Name</div>\n    <ka-edit-name [authService]=\"authService\" (saved)=\"editName = false;\"></ka-edit-name>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"editAccountName\" (closed)=\"editAccountName = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit Account Name</div>\n    <ka-edit-account-name [accountService]=\"accountService\" [authService]=\"authService\" (saved)=\"loadAccount()\"></ka-edit-account-name>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"editEmail\" (closed)=\"editEmail = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit Email Address</div>\n    <ka-edit-email [authService]=\"authService\" (saved)=\"editEmail = false;\"></ka-edit-email>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"editMobile\" (closed)=\"editMobile = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit Mobile Phone Number</div>\n    <ka-edit-mobile [authService]=\"authService\" (saved)=\"editMobile = false;\"></ka-edit-mobile>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"editBackup\" (closed)=\"editBackup = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Edit Backup Email Address</div>\n    <ka-edit-backup-email [authService]=\"authService\" (saved)=\"editBackup = false;\"></ka-edit-backup-email>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"enableTwoFa\" (closed)=\"enableTwoFa = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Enable Two Factor Authentication</div>\n    <ka-two-factor [authService]=\"authService\" (saved)=\"enableTwoFa = false;\"></ka-two-factor>\n</ka-inline-modal>\n\n<ka-inline-modal *ngIf=\"changePassword\" (closed)=\"changePassword = false\">\n    <div class=\"text-base font-medium text-gray-900 ml-6\">Change Password</div>\n    <ka-change-password [authService]=\"authService\" (saved)=\"changePassword = false;\" [email]=\"security.emailAddress\"></ka-change-password>\n</ka-inline-modal>\n","import {Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../../../services/authentication.service';\nimport { BaseComponent } from '../../base-component';\n\n@Component({\n    selector: 'ka-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class LoginComponent extends BaseComponent implements OnInit {\n\n    @Input() loginRoute: string;\n    @Input() recaptchaKey: string;\n    @Input() preventRedirect = false;\n\n    @Output() loggedIn = new EventEmitter();\n\n    public email: string;\n    public forgottenEmail: string;\n    public password: string;\n    public loading = false;\n    public loginError = false;\n    public twoFA = false;\n    public twoFACode: string;\n    public twoFAError = false;\n    public showRecaptcha = false;\n    public recaptchaResponse: string;\n    public activeSession = false;\n    public forgottenPassword = false;\n    public passwordResetSent = false;\n\n    constructor(private router: Router,\n                kcAuthService: AuthenticationService) {\n        super(kcAuthService);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        this.authService.sessionData.subscribe(session => {\n            if (session && session.delayedCaptchas && session.delayedCaptchas['guest/auth/login']) {\n                this.showRecaptcha = true;\n            }\n        });\n\n        return Promise.resolve(true);\n    }\n\n    public recaptchaResolved(response) {\n        this.recaptchaResponse = response;\n    }\n\n    public login() {\n        this.loginError = false;\n        if (this.email && this.password) {\n            this.loading = true;\n            const clientTwoFactorData = localStorage.getItem('clientTwoFactorData');\n            return this.authService.login(this.email, this.password, clientTwoFactorData || null, (this.showRecaptcha ? this.recaptchaResponse : null))\n                .then((res: any) => {\n                    this.loading = false;\n                    if (res === 'REQUIRES_2FA') {\n                        this.twoFA = true;\n                        return true;\n                    } else if (res === 'ACTIVE_SESSION') {\n                        this.activeSession = true;\n                    } else {\n                        this.loggedIn.emit(res);\n                        if (!this.preventRedirect) {\n                            return this.router.navigate([this.loginRoute || '/']);\n                        }\n                    }\n                })\n                .catch(err => {\n                    this.authService.getSessionData();\n                    this.loginError = true;\n                    this.loading = false;\n                });\n        }\n    }\n\n    public sendForgottenPassword() {\n        this.authService.sendPasswordReset(this.forgottenEmail, this.recaptchaResponse).then(() => {\n            this.passwordResetSent = true;\n            setTimeout(() => {\n                window.location.reload();\n            }, 5000);\n        });\n    }\n\n    public closeActiveSession() {\n        this.authService.closeActiveSession().then(res => {\n            if (res === 'REQUIRES_2FA') {\n                this.activeSession = false;\n                this.twoFA = true;\n                return true;\n            } else if (res === 'ACTIVE_SESSION') {\n                this.activeSession = true;\n            } else {\n                this.activeSession = false;\n                if (!this.preventRedirect) {\n                    return this.router.navigate([this.loginRoute || '/']);\n                }\n            }\n        });\n    }\n\n    public checkUsername() {\n        this.authService.doesUserExist(this.email).then(res => {\n        });\n    }\n\n    public authenticate() {\n        this.loading = true;\n        if (this.twoFACode) {\n            return this.authService.authenticateTwoFactor(this.twoFACode)\n                .then(clientTwoFactorData => {\n                    this.loading = false;\n                    if (clientTwoFactorData) {\n                        localStorage.setItem('clientTwoFactorData', String(clientTwoFactorData));\n                    }\n                    this.loggedIn.emit(clientTwoFactorData);\n                    if (!this.preventRedirect) {\n                        return this.router.navigate([this.loginRoute || '/']);\n                    }\n                })\n                .catch(error => {\n                    this.authService.getSessionData();\n                    this.twoFAError = true;\n                    this.loading = false;\n                    return error;\n                });\n        }\n    }\n\n}\n","<div class=\"login\">\n\n    <div class=\"login-container\" *ngIf=\"!twoFA && !activeSession && !forgottenPassword\">\n\n        <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Sign in to your account</h2>\n\n        <label>Enter your username or email address</label>\n        <input type=\"text\" placeholder=\"Username\" name=\"email\" [(ngModel)]=\"email\" required\n               (change)=\"checkUsername()\">\n\n        <label>Enter your password</label>\n        <input type=\"password\" placeholder=\"Password\" name=\"password\" [(ngModel)]=\"password\"\n               (keyup.enter)=\"login()\" required>\n\n        <p class=\"error\" *ngIf=\"loginError\">Email or password incorrect, please check and try again.</p>\n\n        <re-captcha class=\"mt-8\" *ngIf=\"showRecaptcha\" (resolved)=\"recaptchaResolved($event)\"\n                    [siteKey]=\"recaptchaKey\"></re-captcha>\n\n        <button\n            class=\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\"\n            *ngIf=\"!loading\" (click)=\"login()\"\n            [disabled]=\"!email || !password\">Sign in\n        </button>\n\n        <a class=\"text-center text-secondary mt-4 cursor-pointer hover:underline\"\n           (click)=\"forgottenPassword = true\">I've forgotten my password</a>\n    </div>\n\n    <div class=\"login-container\" *ngIf=\"forgottenPassword\">\n\n        <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Forgotten Password\n        </h2>\n\n        <ng-template [ngIf]=\"!passwordResetSent\">\n            <label>Enter your username or email address</label>\n            <input type=\"text\" placeholder=\"Email address\" name=\"forgottenEmail\" [(ngModel)]=\"forgottenEmail\" required>\n\n            <re-captcha class=\"mt-8\" (resolved)=\"recaptchaResolved($event)\"\n                        [siteKey]=\"recaptchaKey\"></re-captcha>\n\n            <button\n                class=\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-secondary focus:outline-none\"\n                (click)=\"sendForgottenPassword()\" [disabled]=\"!forgottenEmail\">\n                Request Password Reset\n            </button>\n        </ng-template>\n\n        <div *ngIf=\"passwordResetSent\" class=\"py-8 flex items-center justify-center\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-12 w-12 text-secondary mr-4\" fill=\"none\"\n                 viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n            </svg>\n            <div class=\"font-medium text-lg\">Password reset has been requested.</div>\n        </div>\n\n        <a class=\"justify-center text-primary mt-4 cursor-pointer hover:underline flex items-center\"\n           (click)=\"forgottenPassword = false; passwordResetSent = false\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"\n                 stroke=\"currentColor\" stroke-width=\"2\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11 17l-5-5m0 0l5-5m-5 5h12\"/>\n            </svg>\n            Back to login</a>\n    </div>\n\n    <div class=\"two-fa-container\" *ngIf=\"activeSession\">\n        <p class=\"text-center\">We have detected other active logged in sessions for your user account. To continue with\n            this login and terminate any other active sessions please click the button below.</p>\n\n        <button\n            class=\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-danger focus:outline-none\"\n            (click)=\"closeActiveSession()\">Close my other sessions and\n            continue\n        </button>\n    </div>\n\n    <div class=\"two-fa-container\" *ngIf=\"twoFA\">\n        <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Two Factor Authentication</h2>\n\n        <p>Enter your second factor authentication code.</p>\n\n        <input placeholder=\"Verification code\" [(ngModel)]=\"twoFACode\"\n               (keyup.enter)=\"authenticate()\">\n\n        <p class=\"error py-4\" *ngIf=\"twoFAError\">Invalid code, please try again.</p>\n\n        <button\n            class=\"mt-8 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary focus:outline-none\"\n            *ngIf=\"!loading\" (click)=\"authenticate()\"\n            [disabled]=\"!twoFACode\">Login\n        </button>\n\n    </div>\n\n</div>\n","import { Injectable } from '@angular/core';\nimport { KinibindRequestService } from 'ng-kinibind';\nimport { KiniAuthModuleConfig } from '../../ng-kiniauth.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContactService {\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig) {\n    }\n\n    public getContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact', {\n            params: {\n                contactId\n            }\n        }).toPromise();\n    }\n\n    public getContacts() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/contacts').toPromise();\n    }\n\n    public setDefaultContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/default', {\n            params: {\n                contactId: contactId\n            }\n        }).toPromise();\n    }\n\n    public deleteContact(contactId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/contact/delete', {\n            params: {\n                contactId: contactId\n            }\n        }).toPromise();\n    }\n}\n","import { Component, EventEmitter, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { KinibindModel, KinibindRequestService } from 'ng-kinibind';\nimport { ContactService } from '../../services/contact.service';\n\n@Component({\n    selector: 'ka-address-book',\n    templateUrl: './address-book.component.html',\n    styleUrls: ['./address-book.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddressBookComponent implements OnInit {\n\n    @Input() editContactURL: string;\n    @Input() deleteContactURL: string;\n    @Input() defaultContactURL: string;\n    @Input() source: string;\n\n    public contacts: KinibindModel = new KinibindModel();\n    public reload: EventEmitter<boolean> = new EventEmitter<boolean>();\n    public contactLoading;\n\n    constructor(private contactService: ContactService,\n                private kbRequest: KinibindRequestService) {\n    }\n\n    ngOnInit() {\n        this.contactService.getContacts().then(contacts => {\n            this.contacts.data = contacts;\n        });\n    }\n\n    public deleteContact(contactId) {\n        const message = 'Are you sure you would like to delete this contact?';\n        if (window.confirm(message)) {\n            return this.contactService.deleteContact(contactId).then(() => {\n                this.reload.next(true);\n            });\n        }\n    }\n\n    public makeDefault(contactId) {\n        return this.contactService.setDefaultContact(contactId).then(() => {\n            this.reload.next(true);\n        });\n    }\n\n}\n","<div class=\"contacts-wrapper\">\n\n    <div class=\"contact-block new\" [routerLink]=\"[editContactURL]\">\n        <span style=\"font-size: 2rem\"><b>+</b></span>\n        <span>New Contact</span>\n    </div>\n\n    <div class=\"contact-block existing\" *ngFor=\"let contact of contacts.data; let i = index\">\n        <div class=\"contact-loading\" *ngIf=\"contactLoading === i\">\n            <span style=\"color: white\">loading...</span>\n        </div>\n\n        <div class=\"flex align-center justify-between\" style=\"width: 100%\">\n            <p class=\"m0\"><strong>{{contact.name}}</strong></p>\n            <a class=\"delete-method\" (click)=\"deleteContact(contact.id)\" style=\"text-decoration: none\">\n                &#10005;\n            </a>\n        </div>\n\n        <p [innerHTML]=\"contact.htmlAddressLinesString\"></p>\n        <p style=\"margin-bottom: 0\"><strong>Telephone: </strong>{{contact.telephoneNumber}}</p>\n        <p><strong>Email: </strong>{{contact.emailAddress}}</p>\n\n        <div style=\"width: 100%\" class=\"flex align-center justify-between\">\n            <p class=\"flex align-center confirm1 m0\" *ngIf=\"contact.defaultContact\">\n                <span>&#10004;</span>&nbsp;&nbsp;Default contact\n            </p>\n            <button class=\"but butsm\" *ngIf=\"!contact.defaultContact\"\n                    (click)=\"makeDefault(contact.id)\">\n                Make Default\n            </button>\n            <a class=\"edit\" [routerLink]=\"[editContactURL + '/' + contact.id]\">\n                Edit\n            </a>\n        </div>\n\n    </div>\n\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { KinibindModel, KinibindRequestService } from 'ng-kinibind';\nimport { Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\nimport { Location } from '@angular/common';\nimport { ContactService } from '../../services/contact.service';\n\n@Component({\n    selector: 'ka-contact-details',\n    templateUrl: './contact-details.component.html',\n    styleUrls: ['./contact-details.component.sass']\n})\nexport class ContactDetailsComponent implements OnInit {\n\n    @Input() contactId: any;\n    @Input() savedRoute: any;\n    @Input() readOnlyAddress = true;\n    @Input() hiddenFields: any = [];\n\n    // @ViewChild('contactForm') public contactForm: NgForm;\n\n    @Output() loaded: EventEmitter<any> = new EventEmitter<any>();\n    @Output() contactSaved: EventEmitter<any> = new EventEmitter<any>();\n\n    public contact: KinibindModel = new KinibindModel();\n    public countries = [];\n\n    constructor(private kbRequest: KinibindRequestService,\n                private location: Location,\n                private router: Router,\n                private contactService: ContactService) {\n\n    }\n\n    ngOnInit() {\n        this.contactService.getContact(this.contactId).then(contact => {\n            this.contact.data = contact;\n        });\n\n        this.setCountries();\n    }\n\n    public saved() {\n        if (this.savedRoute) {\n            if (this.savedRoute === 'BACK') {\n                this.location.back();\n            } else {\n                this.router.navigate([this.savedRoute]);\n            }\n        } else {\n            this.contactSaved.emit(this.contact.data);\n        }\n    }\n\n    private setCountries() {\n        this.countries = [\n            {\"name\": \"United Kingdom\", \"code\": \"GB\"},\n            {\"name\": \"United States\", \"code\": \"US\"},\n            {\"name\": \"Afghanistan\", \"code\": \"AF\"},\n            {\"name\": \"Åland Islands\", \"code\": \"AX\"},\n            {\"name\": \"Albania\", \"code\": \"AL\"},\n            {\"name\": \"Algeria\", \"code\": \"DZ\"},\n            {\"name\": \"American Samoa\", \"code\": \"AS\"},\n            {\"name\": \"AndorrA\", \"code\": \"AD\"},\n            {\"name\": \"Angola\", \"code\": \"AO\"},\n            {\"name\": \"Anguilla\", \"code\": \"AI\"},\n            {\"name\": \"Antarctica\", \"code\": \"AQ\"},\n            {\"name\": \"Antigua and Barbuda\", \"code\": \"AG\"},\n            {\"name\": \"Argentina\", \"code\": \"AR\"},\n            {\"name\": \"Armenia\", \"code\": \"AM\"},\n            {\"name\": \"Aruba\", \"code\": \"AW\"},\n            {\"name\": \"Australia\", \"code\": \"AU\"},\n            {\"name\": \"Austria\", \"code\": \"AT\"},\n            {\"name\": \"Azerbaijan\", \"code\": \"AZ\"},\n            {\"name\": \"Bahamas\", \"code\": \"BS\"},\n            {\"name\": \"Bahrain\", \"code\": \"BH\"},\n            {\"name\": \"Bangladesh\", \"code\": \"BD\"},\n            {\"name\": \"Barbados\", \"code\": \"BB\"},\n            {\"name\": \"Belarus\", \"code\": \"BY\"},\n            {\"name\": \"Belgium\", \"code\": \"BE\"},\n            {\"name\": \"Belize\", \"code\": \"BZ\"},\n            {\"name\": \"Benin\", \"code\": \"BJ\"},\n            {\"name\": \"Bermuda\", \"code\": \"BM\"},\n            {\"name\": \"Bhutan\", \"code\": \"BT\"},\n            {\"name\": \"Bolivia\", \"code\": \"BO\"},\n            {\"name\": \"Bosnia and Herzegovina\", \"code\": \"BA\"},\n            {\"name\": \"Botswana\", \"code\": \"BW\"},\n            {\"name\": \"Bouvet Island\", \"code\": \"BV\"},\n            {\"name\": \"Brazil\", \"code\": \"BR\"},\n            {\"name\": \"British Indian Ocean Territory\", \"code\": \"IO\"},\n            {\"name\": \"Brunei Darussalam\", \"code\": \"BN\"},\n            {\"name\": \"Bulgaria\", \"code\": \"BG\"},\n            {\"name\": \"Burkina Faso\", \"code\": \"BF\"},\n            {\"name\": \"Burundi\", \"code\": \"BI\"},\n            {\"name\": \"Cambodia\", \"code\": \"KH\"},\n            {\"name\": \"Cameroon\", \"code\": \"CM\"},\n            {\"name\": \"Canada\", \"code\": \"CA\"},\n            {\"name\": \"Cape Verde\", \"code\": \"CV\"},\n            {\"name\": \"Cayman Islands\", \"code\": \"KY\"},\n            {\"name\": \"Central African Republic\", \"code\": \"CF\"},\n            {\"name\": \"Chad\", \"code\": \"TD\"},\n            {\"name\": \"Chile\", \"code\": \"CL\"},\n            {\"name\": \"China\", \"code\": \"CN\"},\n            {\"name\": \"Christmas Island\", \"code\": \"CX\"},\n            {\"name\": \"Cocos (Keeling) Islands\", \"code\": \"CC\"},\n            {\"name\": \"Colombia\", \"code\": \"CO\"},\n            {\"name\": \"Comoros\", \"code\": \"KM\"},\n            {\"name\": \"Congo\", \"code\": \"CG\"},\n            {\"name\": \"Congo, The Democratic Republic of the\", \"code\": \"CD\"},\n            {\"name\": \"Cook Islands\", \"code\": \"CK\"},\n            {\"name\": \"Costa Rica\", \"code\": \"CR\"},\n            {\"name\": \"Cote D'Ivoire\", \"code\": \"CI\"},\n            {\"name\": \"Croatia\", \"code\": \"HR\"},\n            {\"name\": \"Cuba\", \"code\": \"CU\"},\n            {\"name\": \"Cyprus\", \"code\": \"CY\"},\n            {\"name\": \"Czech Republic\", \"code\": \"CZ\"},\n            {\"name\": \"Denmark\", \"code\": \"DK\"},\n            {\"name\": \"Djibouti\", \"code\": \"DJ\"},\n            {\"name\": \"Dominica\", \"code\": \"DM\"},\n            {\"name\": \"Dominican Republic\", \"code\": \"DO\"},\n            {\"name\": \"Ecuador\", \"code\": \"EC\"},\n            {\"name\": \"Egypt\", \"code\": \"EG\"},\n            {\"name\": \"El Salvador\", \"code\": \"SV\"},\n            {\"name\": \"Equatorial Guinea\", \"code\": \"GQ\"},\n            {\"name\": \"Eritrea\", \"code\": \"ER\"},\n            {\"name\": \"Estonia\", \"code\": \"EE\"},\n            {\"name\": \"Ethiopia\", \"code\": \"ET\"},\n            {\"name\": \"Falkland Islands (Malvinas)\", \"code\": \"FK\"},\n            {\"name\": \"Faroe Islands\", \"code\": \"FO\"},\n            {\"name\": \"Fiji\", \"code\": \"FJ\"},\n            {\"name\": \"Finland\", \"code\": \"FI\"},\n            {\"name\": \"France\", \"code\": \"FR\"},\n            {\"name\": \"French Guiana\", \"code\": \"GF\"},\n            {\"name\": \"French Polynesia\", \"code\": \"PF\"},\n            {\"name\": \"French Southern Territories\", \"code\": \"TF\"},\n            {\"name\": \"Gabon\", \"code\": \"GA\"},\n            {\"name\": \"Gambia\", \"code\": \"GM\"},\n            {\"name\": \"Georgia\", \"code\": \"GE\"},\n            {\"name\": \"Germany\", \"code\": \"DE\"},\n            {\"name\": \"Ghana\", \"code\": \"GH\"},\n            {\"name\": \"Gibraltar\", \"code\": \"GI\"},\n            {\"name\": \"Greece\", \"code\": \"GR\"},\n            {\"name\": \"Greenland\", \"code\": \"GL\"},\n            {\"name\": \"Grenada\", \"code\": \"GD\"},\n            {\"name\": \"Guadeloupe\", \"code\": \"GP\"},\n            {\"name\": \"Guam\", \"code\": \"GU\"},\n            {\"name\": \"Guatemala\", \"code\": \"GT\"},\n            {\"name\": \"Guernsey\", \"code\": \"GG\"},\n            {\"name\": \"Guinea\", \"code\": \"GN\"},\n            {\"name\": \"Guinea-Bissau\", \"code\": \"GW\"},\n            {\"name\": \"Guyana\", \"code\": \"GY\"},\n            {\"name\": \"Haiti\", \"code\": \"HT\"},\n            {\"name\": \"Heard Island and Mcdonald Islands\", \"code\": \"HM\"},\n            {\"name\": \"Holy See (Vatican City State)\", \"code\": \"VA\"},\n            {\"name\": \"Honduras\", \"code\": \"HN\"},\n            {\"name\": \"Hong Kong\", \"code\": \"HK\"},\n            {\"name\": \"Hungary\", \"code\": \"HU\"},\n            {\"name\": \"Iceland\", \"code\": \"IS\"},\n            {\"name\": \"India\", \"code\": \"IN\"},\n            {\"name\": \"Indonesia\", \"code\": \"ID\"},\n            {\"name\": \"Iran, Islamic Republic Of\", \"code\": \"IR\"},\n            {\"name\": \"Iraq\", \"code\": \"IQ\"},\n            {\"name\": \"Ireland\", \"code\": \"IE\"},\n            {\"name\": \"Isle of Man\", \"code\": \"IM\"},\n            {\"name\": \"Israel\", \"code\": \"IL\"},\n            {\"name\": \"Italy\", \"code\": \"IT\"},\n            {\"name\": \"Jamaica\", \"code\": \"JM\"},\n            {\"name\": \"Japan\", \"code\": \"JP\"},\n            {\"name\": \"Jersey\", \"code\": \"JE\"},\n            {\"name\": \"Jordan\", \"code\": \"JO\"},\n            {\"name\": \"Kazakhstan\", \"code\": \"KZ\"},\n            {\"name\": \"Kenya\", \"code\": \"KE\"},\n            {\"name\": \"Kiribati\", \"code\": \"KI\"},\n            {\"name\": \"Korea, Democratic People's Republic of\", \"code\": \"KP\"},\n            {\"name\": \"Korea, Republic of\", \"code\": \"KR\"},\n            {\"name\": \"Kuwait\", \"code\": \"KW\"},\n            {\"name\": \"Kyrgyzstan\", \"code\": \"KG\"},\n            {\"name\": \"Lao People's Democratic Republic\", \"code\": \"LA\"},\n            {\"name\": \"Latvia\", \"code\": \"LV\"},\n            {\"name\": \"Lebanon\", \"code\": \"LB\"},\n            {\"name\": \"Lesotho\", \"code\": \"LS\"},\n            {\"name\": \"Liberia\", \"code\": \"LR\"},\n            {\"name\": \"Libyan Arab Jamahiriya\", \"code\": \"LY\"},\n            {\"name\": \"Liechtenstein\", \"code\": \"LI\"},\n            {\"name\": \"Lithuania\", \"code\": \"LT\"},\n            {\"name\": \"Luxembourg\", \"code\": \"LU\"},\n            {\"name\": \"Macao\", \"code\": \"MO\"},\n            {\"name\": \"Macedonia, The Former Yugoslav Republic of\", \"code\": \"MK\"},\n            {\"name\": \"Madagascar\", \"code\": \"MG\"},\n            {\"name\": \"Malawi\", \"code\": \"MW\"},\n            {\"name\": \"Malaysia\", \"code\": \"MY\"},\n            {\"name\": \"Maldives\", \"code\": \"MV\"},\n            {\"name\": \"Mali\", \"code\": \"ML\"},\n            {\"name\": \"Malta\", \"code\": \"MT\"},\n            {\"name\": \"Marshall Islands\", \"code\": \"MH\"},\n            {\"name\": \"Martinique\", \"code\": \"MQ\"},\n            {\"name\": \"Mauritania\", \"code\": \"MR\"},\n            {\"name\": \"Mauritius\", \"code\": \"MU\"},\n            {\"name\": \"Mayotte\", \"code\": \"YT\"},\n            {\"name\": \"Mexico\", \"code\": \"MX\"},\n            {\"name\": \"Micronesia, Federated States of\", \"code\": \"FM\"},\n            {\"name\": \"Moldova, Republic of\", \"code\": \"MD\"},\n            {\"name\": \"Monaco\", \"code\": \"MC\"},\n            {\"name\": \"Mongolia\", \"code\": \"MN\"},\n            {\"name\": \"Montserrat\", \"code\": \"MS\"},\n            {\"name\": \"Morocco\", \"code\": \"MA\"},\n            {\"name\": \"Mozambique\", \"code\": \"MZ\"},\n            {\"name\": \"Myanmar\", \"code\": \"MM\"},\n            {\"name\": \"Namibia\", \"code\": \"NA\"},\n            {\"name\": \"Nauru\", \"code\": \"NR\"},\n            {\"name\": \"Nepal\", \"code\": \"NP\"},\n            {\"name\": \"Netherlands\", \"code\": \"NL\"},\n            {\"name\": \"Netherlands Antilles\", \"code\": \"AN\"},\n            {\"name\": \"New Caledonia\", \"code\": \"NC\"},\n            {\"name\": \"New Zealand\", \"code\": \"NZ\"},\n            {\"name\": \"Nicaragua\", \"code\": \"NI\"},\n            {\"name\": \"Niger\", \"code\": \"NE\"},\n            {\"name\": \"Nigeria\", \"code\": \"NG\"},\n            {\"name\": \"Niue\", \"code\": \"NU\"},\n            {\"name\": \"Norfolk Island\", \"code\": \"NF\"},\n            {\"name\": \"Northern Mariana Islands\", \"code\": \"MP\"},\n            {\"name\": \"Norway\", \"code\": \"NO\"},\n            {\"name\": \"Oman\", \"code\": \"OM\"},\n            {\"name\": \"Pakistan\", \"code\": \"PK\"},\n            {\"name\": \"Palau\", \"code\": \"PW\"},\n            {\"name\": \"Palestinian Territory, Occupied\", \"code\": \"PS\"},\n            {\"name\": \"Panama\", \"code\": \"PA\"},\n            {\"name\": \"Papua New Guinea\", \"code\": \"PG\"},\n            {\"name\": \"Paraguay\", \"code\": \"PY\"},\n            {\"name\": \"Peru\", \"code\": \"PE\"},\n            {\"name\": \"Philippines\", \"code\": \"PH\"},\n            {\"name\": \"Pitcairn\", \"code\": \"PN\"},\n            {\"name\": \"Poland\", \"code\": \"PL\"},\n            {\"name\": \"Portugal\", \"code\": \"PT\"},\n            {\"name\": \"Puerto Rico\", \"code\": \"PR\"},\n            {\"name\": \"Qatar\", \"code\": \"QA\"},\n            {\"name\": \"Reunion\", \"code\": \"RE\"},\n            {\"name\": \"Romania\", \"code\": \"RO\"},\n            {\"name\": \"Russian Federation\", \"code\": \"RU\"},\n            {\"name\": \"RWANDA\", \"code\": \"RW\"},\n            {\"name\": \"Saint Helena\", \"code\": \"SH\"},\n            {\"name\": \"Saint Kitts and Nevis\", \"code\": \"KN\"},\n            {\"name\": \"Saint Lucia\", \"code\": \"LC\"},\n            {\"name\": \"Saint Pierre and Miquelon\", \"code\": \"PM\"},\n            {\"name\": \"Saint Vincent and the Grenadines\", \"code\": \"VC\"},\n            {\"name\": \"Samoa\", \"code\": \"WS\"},\n            {\"name\": \"San Marino\", \"code\": \"SM\"},\n            {\"name\": \"Sao Tome and Principe\", \"code\": \"ST\"},\n            {\"name\": \"Saudi Arabia\", \"code\": \"SA\"},\n            {\"name\": \"Senegal\", \"code\": \"SN\"},\n            {\"name\": \"Serbia and Montenegro\", \"code\": \"CS\"},\n            {\"name\": \"Seychelles\", \"code\": \"SC\"},\n            {\"name\": \"Sierra Leone\", \"code\": \"SL\"},\n            {\"name\": \"Singapore\", \"code\": \"SG\"},\n            {\"name\": \"Slovakia\", \"code\": \"SK\"},\n            {\"name\": \"Slovenia\", \"code\": \"SI\"},\n            {\"name\": \"Solomon Islands\", \"code\": \"SB\"},\n            {\"name\": \"Somalia\", \"code\": \"SO\"},\n            {\"name\": \"South Africa\", \"code\": \"ZA\"},\n            {\"name\": \"South Georgia and the South Sandwich Islands\", \"code\": \"GS\"},\n            {\"name\": \"Spain\", \"code\": \"ES\"},\n            {\"name\": \"Sri Lanka\", \"code\": \"LK\"},\n            {\"name\": \"Sudan\", \"code\": \"SD\"},\n            {\"name\": \"Suriname\", \"code\": \"SR\"},\n            {\"name\": \"Svalbard and Jan Mayen\", \"code\": \"SJ\"},\n            {\"name\": \"Swaziland\", \"code\": \"SZ\"},\n            {\"name\": \"Sweden\", \"code\": \"SE\"},\n            {\"name\": \"Switzerland\", \"code\": \"CH\"},\n            {\"name\": \"Syrian Arab Republic\", \"code\": \"SY\"},\n            {\"name\": \"Taiwan, Province of China\", \"code\": \"TW\"},\n            {\"name\": \"Tajikistan\", \"code\": \"TJ\"},\n            {\"name\": \"Tanzania, United Republic of\", \"code\": \"TZ\"},\n            {\"name\": \"Thailand\", \"code\": \"TH\"},\n            {\"name\": \"Timor-Leste\", \"code\": \"TL\"},\n            {\"name\": \"Togo\", \"code\": \"TG\"},\n            {\"name\": \"Tokelau\", \"code\": \"TK\"},\n            {\"name\": \"Tonga\", \"code\": \"TO\"},\n            {\"name\": \"Trinidad and Tobago\", \"code\": \"TT\"},\n            {\"name\": \"Tunisia\", \"code\": \"TN\"},\n            {\"name\": \"Turkey\", \"code\": \"TR\"},\n            {\"name\": \"Turkmenistan\", \"code\": \"TM\"},\n            {\"name\": \"Turks and Caicos Islands\", \"code\": \"TC\"},\n            {\"name\": \"Tuvalu\", \"code\": \"TV\"},\n            {\"name\": \"Uganda\", \"code\": \"UG\"},\n            {\"name\": \"Ukraine\", \"code\": \"UA\"},\n            {\"name\": \"United Arab Emirates\", \"code\": \"AE\"},\n            {\"name\": \"United States Minor Outlying Islands\", \"code\": \"UM\"},\n            {\"name\": \"Uruguay\", \"code\": \"UY\"},\n            {\"name\": \"Uzbekistan\", \"code\": \"UZ\"},\n            {\"name\": \"Vanuatu\", \"code\": \"VU\"},\n            {\"name\": \"Venezuela\", \"code\": \"VE\"},\n            {\"name\": \"Viet Nam\", \"code\": \"VN\"},\n            {\"name\": \"Virgin Islands, British\", \"code\": \"VG\"},\n            {\"name\": \"Virgin Islands, U.S.\", \"code\": \"VI\"},\n            {\"name\": \"Wallis and Futuna\", \"code\": \"WF\"},\n            {\"name\": \"Western Sahara\", \"code\": \"EH\"},\n            {\"name\": \"Yemen\", \"code\": \"YE\"},\n            {\"name\": \"Zambia\", \"code\": \"ZM\"},\n            {\"name\": \"Zimbabwe\", \"code\": \"ZW\"}\n        ];\n    }\n\n}\n","<!--<form class=\"px2 py2 whitebk mb1\" #contactForm=\"ngForm\" (ngSubmit)=\"saveContact()\">-->\n\n    <div *ngIf=\"contact.data\">\n\n        <label>\n            <input class=\"full\" type=\"text\" name=\"name\" [(ngModel)]=\"contact.data.name\" required>\n            <span>Full Name <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n        </label>\n\n        <label>\n            <input class=\"full\" type=\"text\" name=\"organisation\" [(ngModel)]=\"contact.data.organisation\">\n            Name of Business / Organisation\n        </label>\n\n        <label>\n            <input type=\"text\" class=\"full\" name=\"addressStreet1\"\n                   [(ngModel)]=\"contact.data.street1\" required>\n            <span>Address 1 <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n        </label>\n\n        <label>\n            <input type=\"text\" class=\"full\" name=\"addressStreet2\"\n                   [(ngModel)]=\"contact.data.street2\">\n            Address 2\n        </label>\n\n        <div class=\"flex align-center flex-wrap\">\n            <label>\n                <input type=\"text\" class=\"full\" name=\"addressCity\"\n                       [(ngModel)]=\"contact.data.city\" required>\n                <span>Town / City <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n            </label>\n\n            <label>\n                <input type=\"text\" class=\"full\" name=\"addressCounty\"\n                       [(ngModel)]=\"contact.data.county\" required>\n                <span>State / County / Region <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n            </label>\n        </div>\n\n        <label>\n            <select name=\"country\" required [(ngModel)]=\"contact.data.countryCode\">\n                <option *ngFor=\"let country of countries\" [value]=\"country.code\">\n                    {{country.name}}\n                </option>\n            </select>\n            <span>Country <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n        </label>\n\n        <label>\n            <input type=\"text\" name=\"postcode\"\n                   [(ngModel)]=\"contact.data.postcode\" required>\n            <span>Postcode <span style=\"color: rgba(139,0,0,.5)\">*</span></span>\n        </label>\n\n        <label>\n            <input type=\"number\" name=\"telephoneNumber\" [(ngModel)]=\"contact.data.telephoneNumber\">\n            Telephone Number\n        </label>\n\n    </div>\n\n    <div class=\"flex justify-end mt2\">\n<!--        <button type=\"submit\" class=\"mt2 but butsm\" [disabled]=\"contactForm.invalid\">-->\n<!--            SAVE CHANGES-->\n<!--        </button>-->\n    </div>\n\n<!--</form>-->\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { KinibindRequestService } from 'ng-kinibind';\n\n@Directive({\n    selector: '[netCountryCodes]',\n    exportAs: 'countryCodes'\n})\nexport class CountryCodesDirective implements OnInit {\n\n    private searchURL = '/internal/application/countryCodes';\n\n    public results: any[] = [];\n\n    @Input() promotedCountries: string;\n    @Input() valueFormat: string;\n    @Input() onInit: boolean;\n\n    constructor(private kbRequest: KinibindRequestService) {\n    }\n\n    public search() {\n        const params: any = {};\n\n        if (this.promotedCountries) {\n            params.promotedCountries = this.promotedCountries;\n        }\n\n        if (this.valueFormat) {\n            params.valueFormat = this.valueFormat;\n        }\n\n        return this.kbRequest.makePostRequest(this.searchURL, params).toPromise()\n            .then((results: any) => this.results = results);\n    }\n\n    ngOnInit(): void {\n        if (this.onInit) {\n            this.search();\n        }\n    }\n\n}\n","import { Directive, Input } from '@angular/core';\nimport { KinibindRequestService } from 'ng-kinibind';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Directive({\n    selector: '[netPostcodeLookup]',\n    exportAs: 'postcodeLookup'\n})\nexport class PostcodeLookupDirective {\n\n    private searchURL = '/internal/application/searchAddress';\n\n    public results: any[] = [];\n    public match = false;\n    public complete = false;\n\n    @Input() postcode: Observable<string>;\n    @Input() country: Observable<string>;\n\n    constructor(private kbRequest: KinibindRequestService) {\n    }\n\n    public search(postcode, country) {\n        this.results = [];\n        this.complete = false;\n        return this.kbRequest.makePostRequest(this.searchURL,\n            { term: postcode, countryCode: country }).toPromise()\n            .then((results: any) => {\n                this.results = results;\n                this.complete = true;\n            });\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {KinibindRequestService} from 'ng-kinibind';\nimport {KiniAuthModuleConfig} from '../../ng-kiniauth.module';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\nimport {AuthenticationService} from './authentication.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig,\n                private authService: AuthenticationService) {\n    }\n\n    public getUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/summary', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public createAdminUser(emailAddress, rawPassword?, name?) {\n        let password = rawPassword;\n        if (rawPassword) {\n            password = this.authService.getHashedPassword(rawPassword, emailAddress, true);\n        }\n\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/admin',\n            _.omitBy({emailAddress, password, name}, _.isNil)\n        ).toPromise();\n    }\n\n    public getUserExtended(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public getAccountUsers(searchString?, limit?, offset?) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/search', {\n            params: _.pickBy({searchString, limit, offset}, _.identity)\n        });\n    }\n\n    public getAllUserAccountRoles(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/roles', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public getAssignableRoles(userId, scope, filterString = '', offset = 0, limit = 10) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/assignableRoles', {\n            params: {userId, scope, filterString, offset, limit}\n        }).toPromise();\n    }\n\n    public updateUserScope(scopeObjects, userId) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + `/user/updateUserScope?userId=${userId}`,\n            scopeObjects).toPromise();\n    }\n\n    public removeUserFromAccount(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/account/removeUser', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public requestPasswordReset(emailAddress) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/passwordReset', {\n            params: {emailAddress}\n        }).toPromise();\n    }\n\n    public unlockUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/unlock', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public suspendUser(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/suspend', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public getAccounts(userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/accounts', {\n            params: {userId}\n        }).toPromise();\n    }\n\n    public switchAccount(accountId, userId) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/switchAccount', {\n            params: {accountId, userId}\n        }).toPromise();\n    }\n}\n","import {Component, Input, OnInit, ViewEncapsulation} from '@angular/core';\nimport {debounceTime, distinctUntilChanged, map, switchMap} from 'rxjs/operators';\nimport {BehaviorSubject, merge, Subject} from 'rxjs';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\nimport {UserService} from '../../services/user.service';\nimport {Router} from '@angular/router';\nimport {AuthenticationService} from '../../services/authentication.service';\n\n@Component({\n    selector: 'ka-account-users',\n    templateUrl: './account-users.component.html',\n    styleUrls: ['./account-users.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AccountUsersComponent implements OnInit {\n\n    @Input() userRoleRoute: string;\n    @Input() disableInvite: boolean;\n    @Input() createAdminUser: boolean;\n\n    public users: any[];\n    public searchText = new BehaviorSubject<string>('');\n    public limit = new BehaviorSubject<number>(10);\n    public offset = new BehaviorSubject<number>(0);\n    public pageIndex = 0;\n    public resultSize = 0;\n    public reloadUsers = new Subject();\n    public allSelected = false;\n    public selectionMade = false;\n    public lodash = _;\n    public passwordReset = false;\n    public userUnlocked = false;\n    public userSuspended = false;\n    public newAdminUser = false;\n    public newAdminEmail = '';\n    public newAdminPassword: string = null;\n    public newAdminAdded = false;\n\n    constructor(private userService: UserService,\n                private router: Router,\n                private authService: AuthenticationService) {\n    }\n\n    ngOnInit() {\n        merge(this.searchText, this.limit, this.offset, this.reloadUsers)\n            .pipe(\n                debounceTime(300),\n                distinctUntilChanged(),\n                switchMap(() =>\n                    this.getUsers()\n                )\n            )\n            .subscribe((users: any) => {\n                this.users = users;\n            });\n    }\n\n    public saveNewAdminUser() {\n        if (this.newAdminPassword && this.newAdminPassword.length < 8) {\n            return true;\n        }\n\n        return this.userService.createAdminUser(this.newAdminEmail, this.newAdminPassword || null, null)\n            .then(res => {\n                this.newAdminEmail = '';\n                this.newAdminPassword = null;\n                this.newAdminUser = false;\n                this.newAdminAdded = true;\n                this.reloadUsers.next(Date.now());\n                setTimeout(() => {\n                    this.newAdminAdded = false;\n                }, 3000);\n            });\n    }\n\n    public viewUser(user) {\n        if (user.status !== 'PENDING') {\n            const route = this.userRoleRoute ? this.userRoleRoute + '/' + user.id : user.id;\n            this.router.navigate([route]);\n        }\n    }\n\n    public toggleSelectAllUsers() {\n        this.allSelected = !this.allSelected;\n        this.selectionMade = this.allSelected;\n        this.users = this.lodash.map(this.users, user => {\n            user.selected = this.allSelected;\n            return user;\n        });\n    }\n\n    public toggleUsersSelected(user) {\n        user.selected = !user.selected;\n        this.selectionMade = this.lodash.some(this.users, 'selected');\n    }\n\n    public search(searchTerm: string) {\n        this.searchText.next(searchTerm);\n    }\n\n    public updatePage(pageEvent) {\n        const limit = this.limit.getValue();\n\n        if (pageEvent.pageSize !== limit) {\n            this.offset.next(0);\n            this.limit.next(pageEvent.pageSize);\n            this.pageIndex = 0;\n        } else {\n            this.offset.next(pageEvent.pageSize * (pageEvent.pageIndex));\n            this.pageIndex = pageEvent.pageIndex;\n        }\n    }\n\n    public removeUser(user) {\n        const message = 'Are you sure you would like to remove this user?';\n        if (window.confirm(message)) {\n            this.userService.removeUserFromAccount(user.id).then(() => {\n                this.reloadUsers.next(Date.now());\n            });\n        }\n    }\n\n    public resetPassword(user) {\n        this.authService.sendPasswordReset(user.emailAddress, null).then(() => {\n            this.passwordReset = true;\n            setTimeout(() => {\n                this.passwordReset = false;\n            }, 3000);\n        });\n    }\n\n    public unlockUser(userId) {\n        this.userService.unlockUser(userId).then(() => {\n            this.userUnlocked = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.userUnlocked = false;\n            }, 3000);\n        });\n    }\n\n    public suspendUser(userId) {\n        this.userService.suspendUser(userId).then(() => {\n            this.userSuspended = true;\n            this.reloadUsers.next(Date.now());\n            setTimeout(() => {\n                this.userSuspended = false;\n            }, 3000);\n        });\n    }\n\n    private getUsers() {\n        return this.userService.getAccountUsers(\n            this.searchText.getValue(),\n            this.limit.getValue(),\n            this.offset.getValue()\n        ).pipe(map((data: any) => {\n            this.resultSize = data.totalRecords;\n            return data.results;\n        }));\n    }\n\n}\n","<div class=\"p-6 bg-white border-b border-gray-200\">\n    <div class=\"md:flex md:items-center md:justify-between md:space-x-5\">\n        <div class=\"flex items-start flex-1\">\n            <div class=\"pt-1.5\">\n                <h1 class=\"text-2xl font-bold text-gray-900\">Account Users</h1>\n                <p class=\"text-sm font-medium text-gray-500\">\n                    A list of all the users currently assigned to your account.\n                </p>\n            </div>\n        </div>\n        <div class=\"mt-6 flex flex-col-reverse justify-stretch\">\n            <button type=\"button\" [routerLink]=\"['/invite-user']\" *ngIf=\"!disableInvite\"\n                    class=\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\">\n                Invite User\n            </button>\n\n            <button type=\"button\" *ngIf=\"createAdminUser\" (click)=\"newAdminUser = true;\"\n                    class=\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\">\n                Create Admin User\n            </button>\n        </div>\n    </div>\n</div>\n<div class=\"px-4 sm:px-6 lg:px-8 mt-0\">\n    <div class=\"flex flex-col\">\n        <div class=\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\">\n            <div class=\"inline-block min-w-full py-2 align-middle\">\n\n                <div *ngIf=\"newAdminAdded\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\"\n                         viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                    </svg>\n                    <div class=\"text-lg\">Admin user successfully added.</div>\n                </div>\n\n                <div *ngIf=\"newAdminUser\" class=\"px-6 pb-6 mt-4 flex flex-col border-b\">\n                    <p><b>Add New Admin User</b></p>\n                    <input type=\"email\" [(ngModel)]=\"newAdminEmail\" placeholder=\"Enter email address for user\">\n                    <input class=\"mt-2\" type=\"password\" [(ngModel)]=\"newAdminPassword\"\n                           placeholder=\"Enter password for user\"\n                           [ngClass]=\"{'border border-red-600': newAdminPassword && newAdminPassword.length < 8}\">\n                    <div *ngIf=\"newAdminPassword && newAdminPassword.length < 8\">\n                        <small class=\"text-red-600\">Password must be at least 8 characters long.</small>\n                    </div>\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\n                        email.</small></div>\n                    <div class=\"flex items-center justify-between my-4\">\n                        <div></div>\n                        <button (click)=\"saveNewAdminUser()\"\n                                class=\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\">\n                            Save New User\n                        </button>\n                    </div>\n                </div>\n\n                <div *ngIf=\"passwordReset\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    <div class=\"text-lg\">Password reset email sent. Please check your email for further instructions</div>\n                </div>\n\n                <div *ngIf=\"userUnlocked\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-primary h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\" />\n                    </svg>\n                    <div class=\"text-lg\">This user has been successfully unlocked.</div>\n                </div>\n\n                <div *ngIf=\"userSuspended\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n                    </svg>\n                    <div class=\"text-lg\">This user has been suspended.</div>\n                </div>\n\n                <div class=\"mt-3 sm:mt-0 flex-1\">\n                    <label for=\"mobile-search-candidate\" class=\"sr-only\">Search</label>\n                    <div class=\"flex\">\n                        <div class=\"relative flex-grow focus-within:z-10\">\n                            <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                                <svg class=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\"\n                                     viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                                    <path fill-rule=\"evenodd\"\n                                          d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                                          clip-rule=\"evenodd\"/>\n                                </svg>\n                            </div>\n                            <input type=\"text\" name=\"mobile-search-candidate\" id=\"mobile-search-candidate\"\n                                   class=\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\"\n                                   placeholder=\"Search users\"\n                                   (keyup)=\"searchText.next($event.target.value)\">\n                        </div>\n                    </div>\n                </div>\n                <table class=\"min-w-full border-separate bg-white\" style=\"border-spacing: 0\">\n                    <ng-template [ngIf]=\"users && users.length\">\n\n                        <thead class=\"bg-gray-100\">\n                        <tr>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Name\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Email\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Status\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\">\n                                <span class=\"sr-only\">Edit</span>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let user of users; let i = index\" class=\"hover:bg-gray-50 cursor-pointer\">\n                            <td (click)=\"viewUser(user)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\">\n                                {{user.name}}\n                            </td>\n                            <td (click)=\"viewUser(user)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                {{user.emailAddress}}\n                            </td>\n                            <td (click)=\"viewUser(user)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                <span [ngClass]=\"{'bg-success': user.status === 'ACTIVE', 'bg-primary': user.status === 'PENDING', 'bg-danger': user.status === 'SUSPENDED'}\"\n                                    class=\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\">\n                                    {{user.status.toLowerCase()}}</span>\n                            </td>\n                            <td class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                <div class=\"flex items-center justify-end\">\n                                    <button mat-button [matMenuTriggerFor]=\"menu\" color=\"primary\">\n                                        Actions\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\n                                    </button>\n                                    <mat-menu #menu=\"matMenu\">\n                                        <button mat-menu-item (click)=\"removeUser(user)\">Remove</button>\n                                        <button mat-menu-item (click)=\"resetPassword(user)\">Reset Password</button>\n                                        <button mat-menu-item (click)=\"unlockUser(user.id)\"\n                                                *ngIf=\"user.status === 'LOCKED' || user.status === 'SUSPENDED'\">Unlock\n                                        </button>\n                                        <button mat-menu-item (click)=\"suspendUser(user.id)\"\n                                                *ngIf=\"user.status !== 'SUSPENDED'\">\n                                            Suspend\n                                        </button>\n                                    </mat-menu>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"4\"\n                                class=\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\">\n                                <div class=\"paging-toolbar flex align-center justify-end\">\n                                    <mat-paginator class=\"user-paginator flex1 pl050 mb0\" [length]=\"resultSize\"\n                                                   [pageSize]=\"limit.getValue()\"\n                                                   [pageIndex]=\"pageIndex\"\n                                                   [pageSizeOptions]=\"[5, 10, 25, 100]\"\n                                                   (page)=\"updatePage($event)\">\n                                    </mat-paginator>\n                                </div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </ng-template>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { KinibindRequestService } from 'ng-kinibind';\nimport { KiniAuthModuleConfig } from '../../ng-kiniauth.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RoleService {\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig) {\n    }\n\n    public getScopeAccesses() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/role/scopeAccesses')\n            .toPromise();\n    }\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\n\n@Component({\n    selector: 'ka-edit-roles',\n    templateUrl: './edit-roles.component.html',\n    styleUrls: ['./edit-roles.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditRolesComponent implements OnInit {\n\n    @Input() scope: string;\n    @Input() scopeKey: string;\n    @Input() user: any;\n    @Input() updatedScopes: any;\n    @Input() hideApply: boolean;\n    @Input() userService;\n\n    @Output() closed: EventEmitter<any> = new EventEmitter<any>();\n    @Output() saved: EventEmitter<any> = new EventEmitter<any>();\n    @Output() updatedScopesChange: EventEmitter<any> = new EventEmitter<any>();\n\n    public assignableRoles: any[];\n    public _ = _;\n    public Object = Object;\n    public disabled = {};\n    public checked: any = {};\n    public loading = true;\n    public roles: any[] = [];\n    public errors = {};\n\n\n    constructor() {\n    }\n\n    ngOnInit() {\n        if (!this.updatedScopes) {\n            this.updatedScopes = {};\n        }\n        if (this.scope) {\n            const userId = this.user ? this.user.id : null;\n            const promises = [\n                this.userService.getAssignableRoles(userId, this.scope),\n                this.loadUserRoles()\n            ];\n            Promise.all(promises).then(res => {\n                this.assignableRoles = res[0];\n                this.setInitialRoleState();\n                this.loading = false;\n            });\n        }\n    }\n\n    public updateRole(event, scopeId) {\n        // Reset the displayed errors at this point;\n        this.errors = {};\n        const checked = event.target.checked;\n        const owner = event.target.value === 'OWNER';\n        let roleIds: any[] = [];\n\n        if (owner) {\n            if (checked) {\n                roleIds = [null];\n            } else {\n                delete this.checked[scopeId].owner;\n                roleIds = this.setRoleIds(scopeId);\n            }\n\n            this.disabled[scopeId] = checked;\n        } else {\n            roleIds = this.setRoleIds(scopeId);\n        }\n\n        this.updatedScopes[scopeId] = {\n            scope: this.scope,\n            scopeId,\n            roleIds: _.uniq(roleIds)\n        };\n        this.updatedScopesChange.next(this.updatedScopes);\n    }\n\n    public updateUserScope() {\n        this.errors = {};\n        // Check if we are saving any ACCOUNT scopes. If we are, check there are some roles attached.\n        const accounts = _.filter(this.updatedScopes, update => {\n            return update.scope === 'ACCOUNT' && update.roleIds.length > 0;\n        });\n        if (accounts.length > 0) {\n            accounts.forEach(scopeUpdate => {\n                this.errors[scopeUpdate.scopeId] = 'Please select at least one Account role for this user.';\n            });\n            return false;\n        }\n\n        this.userService.updateUserScope(_.values(this.updatedScopes), this.user.id).then(() => {\n            this.closed.emit(true);\n        });\n\n    }\n\n    public setInitialRoleState() {\n        this.assignableRoles.forEach(assignableRole => {\n            if (!this.checked[assignableRole.scopeId]) {\n                this.checked[assignableRole.scopeId] = {};\n            }\n\n            const allAssignableRoles = _.values(assignableRole.roles);\n            const existing = _.find(this.roles, { scopeId: assignableRole.scopeId });\n            if (existing && (existing.roles[0] === null && existing.roles.length === 1)) {\n                this.checked[assignableRole.scopeId]['owner'] = true;\n                this.disabled[assignableRole.scopeId] = true;\n            }\n\n\n            allAssignableRoles.forEach(role => {\n                if (role) {\n                    const checked = existing ? !!_.find(existing.roles, { id: role.id }) : false;\n                    this.checked[assignableRole.scopeId][role.id] = checked;\n                }\n            });\n        });\n    }\n\n    private setRoleIds(scopeId) {\n        const ids = Object.keys(this.checked[scopeId]);\n        const res = ids.filter(id => {\n            return this.checked[scopeId][id];\n        });\n        return res.length ? res.map(Number) : [];\n    }\n\n    private loadUserRoles() {\n        if (this.user) {\n            return this.userService.getAllUserAccountRoles(this.user.id).then(roles => {\n                this.roles = roles[this.scopeKey];\n                return true;\n            });\n        }\n    }\n\n}\n","<ng-template [ngIf]=\"assignableRoles\">\n    <ng-template ngFor let-assignableRole [ngForOf]=\"_.orderBy(assignableRoles, ['scopeId'], ['asc'])\">\n\n        <fieldset class=\"mb-4 ml-4\">\n            <legend class=\"text-sm font-medium text-gray-800\">{{assignableRole.scopeObjectDescription}}</legend>\n\n            <ng-template [ngIf]=\"_.reject(assignableRole.roles).length\">\n                <div><i>You have reached the max number of users</i></div>\n            </ng-template>\n\n            <ng-template [ngIf]=\"!_.reject(assignableRole.roles).length\">\n                <div class=\"mt-4 flex items-center\">\n\n                    <ng-template ngFor let-roleIndex [ngForOf]=\"Object.keys(assignableRole.roles)\">\n\n                        <div class=\"flex items-start\" *ngIf=\"assignableRole.roles[roleIndex]\">\n                            <div class=\"flex items-center h-5\">\n                                <input type=\"checkbox\" *ngIf=\"assignableRole.roles[roleIndex]\"\n                                       [disabled]=\"disabled[assignableRole.scopeId]\"\n                                       [(ngModel)]=\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\"\n                                       (change)=\"updateRole($event, assignableRole.scopeId)\"\n                                       [name]=\"'name' + roleIndex\"\n                                       class=\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\">\n                            </div>\n                            <div class=\"ml-3 text-sm\">\n                                <label class=\"font-medium text-gray-700\">{{assignableRole.roles[roleIndex].name}}</label>\n                            </div>\n                        </div>\n\n                    </ng-template>\n\n                    <div class=\"flex items-start\">\n                        <div class=\"flex items-center h-5\">\n                            <input value=\"OWNER\" type=\"checkbox\" [name]=\"'owner' + assignableRole.scopeId\"\n                                   [checked]=\"checked[assignableRole.scopeId]['owner']\"\n                                   (change)=\"updateRole($event, assignableRole.scopeId)\"\n                                   class=\"focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded\">\n                        </div>\n                        <div class=\"ml-3 text-sm\">\n                            <label class=\"font-medium text-gray-700\">Owner</label>\n                        </div>\n                    </div>\n\n                    <div class=\"text-red-500 m-2\" *ngIf=\"errors[assignableRole.scopeId]\">\n                        {{errors[assignableRole.scopeId]}}\n                    </div>\n                </div>\n            </ng-template>\n\n        </fieldset>\n\n    </ng-template>\n</ng-template>\n\n<!--<table class=\"edit-roles\" *ngIf=\"assignableRoles\" [ngStyle]=\"{marginBottom: hideApply ? '0' : '100px'}\">-->\n<!--    <tbody *ngFor=\"let assignableRole of _.orderBy(assignableRoles, ['scopeId'], ['asc'])\">-->\n<!--    <tr class=\"thead\">-->\n<!--        <th>{{assignableRole.scopeObjectDescription}}</th>-->\n<!--    </tr>-->\n<!--    <tr>-->\n<!--        <td>-->\n<!--            <div class=\"flex align-center\" *ngIf=\"!loading\">-->\n<!--                <ng-template [ngIf]=\"_.reject(assignableRole.roles).length\">-->\n<!--                    <i>You have reached the max number of users</i>-->\n<!--                </ng-template>-->\n\n<!--                <ng-template [ngIf]=\"!_.reject(assignableRole.roles).length\">-->\n<!--                    <span class=\"mr1 flex items-center align-baseline\" *ngIf=\"assignableRole.scope === 'ACCOUNT'\">-->\n<!--                        <input type=\"checkbox\" value=\"OWNER\" class=\"role-checkbox\"-->\n<!--                               [checked]=\"checked[assignableRole.scopeId]['owner']\"-->\n<!--                               (change)=\"updateRole($event, assignableRole.scopeId)\">-->\n<!--                        Owner-->\n<!--                    </span>-->\n<!--                    <ng-template ngFor let-roleIndex [ngForOf]=\"Object.keys(assignableRole.roles)\">-->\n<!--                        <span class=\"mr1 flex items-center align-baseline\" *ngIf=\"assignableRole.roles[roleIndex]\">-->\n<!--                            <input type=\"checkbox\" class=\"role-checkbox\"-->\n<!--                                   *ngIf=\"assignableRole.roles[roleIndex]\"-->\n<!--                                   [disabled]=\"disabled[assignableRole.scopeId]\"-->\n<!--                                   [(ngModel)]=\"checked[assignableRole.scopeId][assignableRole.roles[roleIndex].id]\"-->\n<!--                                   (change)=\"updateRole($event, assignableRole.scopeId)\">-->\n<!--                            {{assignableRole.roles[roleIndex].name}}-->\n<!--                        </span>-->\n<!--                        <i *ngIf=\"!assignableRole.roles[roleIndex]\" class=\"mr2\">-->\n<!--                            Upgrade-->\n<!--                        </i>-->\n<!--                    </ng-template>-->\n<!--                </ng-template>-->\n<!--            </div>-->\n\n<!--            <p class=\"mb0 mt050 text-red\"-->\n<!--               *ngIf=\"errors[assignableRole.scopeId]\">{{errors[assignableRole.scopeId]}}</p>-->\n<!--        </td>-->\n\n<!--    </tr>-->\n<!--    </tbody>-->\n<!--</table>-->\n\n<div class=\"flex align-center items-center justify-between p1 p-4 apply-bar\" *ngIf=\"!hideApply\">\n    <div></div>\n    <button mat-flat-button color=\"primary\" class=\"but butsm\" (click)=\"updateUserScope()\">Apply Changes</button>\n</div>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { UserService } from '../../services/user.service';\nimport { ActivatedRoute } from '@angular/router';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\nimport { AuthenticationService } from '../../services/authentication.service';\nimport {RoleService} from '../../services/role.service';\n\n@Component({\n    selector: 'ka-user-roles',\n    templateUrl: './user-roles.component.html',\n    styleUrls: ['./user-roles.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UserRolesComponent implements OnInit {\n\n    public accountError: string;\n    public user: any = {};\n    public Object = Object;\n    public editDetails = false;\n    public loggedInUser: any;\n    public scopeAccesses: any[];\n    public scopeRoles: any = { ACCOUNT: {} };\n    public scopeEdit = null;\n    public _ = _;\n    public accountOwner = false;\n\n    private userId;\n\n    constructor(public userService: UserService,\n                private route: ActivatedRoute,\n                private roleService: RoleService,\n                public authService: AuthenticationService) {\n    }\n\n    ngOnInit() {\n        this.route.params.subscribe(params => {\n            this.loadUser();\n            this.userId = params.userId;\n        });\n\n        this.loadUser();\n    }\n\n    public roleUpdated(value) {\n        this.accountOwner = _.values(value)[0].roleIds[0] === null;\n    }\n\n    public saveUserDetails() {\n        const updates = [];\n        _.values(this.scopeRoles).forEach(scope => {\n            _.forEach(scope, update => {\n                updates.push(update);\n            });\n        });\n        if (updates.length) {\n            this.userService.updateUserScope(updates, this.user.id);\n        }\n    }\n\n    private loadRoles(userId) {\n        this.userService.getUser(userId).then(user => {\n            this.user = user;\n        });\n        this.roleService.getScopeAccesses().then(scopeAccesses => {\n            delete scopeAccesses.ACCOUNT;\n            this.scopeAccesses = _.values(scopeAccesses);\n            _.forEach(scopeAccesses, scopeAccess => {\n                this.scopeRoles[scopeAccess.scope] = {};\n            });\n        });\n        this.userService.getAllUserAccountRoles(userId).then(roles => {\n            const role = _.values(roles.Account).length ? _.values(roles.Account)[0] : null;\n            if (role) {\n                this.accountOwner = role.roles[0] === null;\n            }\n        });\n    }\n\n    private loadUser() {\n        this.authService.getLoggedInUser().then(user => {\n            this.loggedInUser = user;\n            this.loadRoles(this.userId);\n        });\n    }\n}\n","<div class=\"user-roles\">\n\n    <div class=\"text-base font-medium\">{{user.name}}</div>\n    <div class=\"text-sm text-gray-400 mb-4 border-b pb-4 border-gray-200\">{{user.emailAddress}}</div>\n\n    <div class=\"text-base font-medium text-gray-900 mb-4\">Permissions</div>\n\n    <div class=\"mb2\">\n        <ka-edit-roles *ngIf=\"user.id\" [scopeKey]=\"'Account'\" [scope]=\"'ACCOUNT'\" [user]=\"user\" [(updatedScopes)]=\"scopeRoles.ACCOUNT\"\n                       [hideApply]=\"true\" (updatedScopesChange)=\"roleUpdated($event)\" [userService]=\"userService\"></ka-edit-roles>\n        <p style=\"color: red\" *ngIf=\"accountError\">{{accountError}}</p>\n    </div>\n\n    <mat-tab-group animationDuration=\"0\" *ngIf=\"!accountOwner\">\n        <mat-tab *ngFor=\"let scopeAccess of scopeAccesses\" [label]=\"scopeAccess.scopeDescription\">\n            <ka-edit-roles class=\"block mt-4\" *ngIf=\"user.id\" [userService]=\"userService\"\n                [scopeKey]=\"scopeAccess.scopeDescription\" [scope]=\"scopeAccess.scope\" [user]=\"user\"\n                           [(updatedScopes)]=\"scopeRoles[scopeAccess.scope]\" [hideApply]=\"true\"></ka-edit-roles>\n        </mat-tab>\n    </mat-tab-group>\n\n    <div class=\"flex items-center justify-between\">\n        <div></div>\n        <button mat-flat-button color=\"primary\" (click)=\"saveUserDetails()\">Save Changes</button>\n    </div>\n</div>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { RoleService } from '../../services/role.service';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\nimport { AccountService } from '../../services/account.service';\nimport { Location } from '@angular/common';\nimport {UserService} from '../../services/user.service';\n\n@Component({\n    selector: 'ka-invite-user',\n    templateUrl: './invite-user.component.html',\n    styleUrls: ['./invite-user.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InviteUserComponent implements OnInit {\n\n    public scopeAccesses: any[];\n    public scopeRoles: any = { ACCOUNT: {} };\n    public emailAddress: string;\n    public accountError: string;\n    public inviteComplete = false;\n\n    constructor(private roleService: RoleService,\n                private accountService: AccountService,\n                private location: Location,\n                public userService: UserService) {\n    }\n\n    ngOnInit() {\n        this.roleService.getScopeAccesses().then(scopeAccesses => {\n            delete scopeAccesses['ACCOUNT'];\n            this.scopeAccesses = _.values(scopeAccesses);\n            _.forEach(scopeAccesses, scopeAccess => {\n                this.scopeRoles[scopeAccess.scope] = {};\n            });\n        });\n    }\n\n    public save() {\n        this.accountError = '';\n        const accounts = _.filter(this.scopeRoles['ACCOUNT'], update => {\n            return update.scope === 'ACCOUNT' && update.roleIds.length === 0;\n        });\n        if (!_.values(this.scopeRoles['ACCOUNT']).length || accounts.length > 0) {\n            this.accountError = 'Please select at least one Account role for this user.';\n            return false;\n        }\n\n        const scopeRoles = [];\n        _.forEach(this.scopeRoles, (allRoles, scope) => {\n            _.forEach(allRoles, role => {\n                scopeRoles.push(role);\n            });\n        });\n        this.accountService.inviteUserToAccount(this.emailAddress, scopeRoles).then(() => {\n            this.inviteComplete = true;\n        });\n    }\n\n    public back() {\n        this.location.back();\n    }\n\n}\n","<ng-template [ngIf]=\"inviteComplete\">\n\n    <div class=\"flex align-center justify-center p3 p-8 invite-sent\">\n\n        <h3 class=\"mb3 mb-8\"><mat-icon color=\"primary\">check</mat-icon> Invitation Sent</h3>\n\n        <p class=\"mb3 mb-8\">A confirmation email has been sent to <b>{{emailAddress}}</b>, the user will need to click on the confirmation\n            link in order to activate their account.</p>\n\n        <button mat-flat-button class=\"but\" (click)=\"back()\">Return to list</button>\n    </div>\n\n</ng-template>\n\n<ng-template [ngIf]=\"!inviteComplete\">\n\n    <div class=\"mb2 mb-8\">\n        <div class=\"text-base font-medium text-gray-900 mb-4\">User email address</div>\n        <input type=\"text\" placeholder=\"Email address\" class=\"flex1 mr050 mt0 full\"\n               [(ngModel)]=\"emailAddress\">\n    </div>\n\n    <div class=\"text-base font-medium text-gray-900 mb-4\">Permissions</div>\n\n    <div class=\"mb2 mb-4\">\n        <ka-edit-roles [scopeKey]=\"'Account'\" [scope]=\"'ACCOUNT'\" [userService]=\"userService\"\n                       [updatedScopes]=\"scopeRoles['ACCOUNT']\" [hideApply]=\"true\"></ka-edit-roles>\n        <p style=\"color: red\" *ngIf=\"accountError\">{{accountError}}</p>\n    </div>\n\n    <mat-tab-group animationDuration=\"0\">\n        <mat-tab *ngFor=\"let scopeAccess of scopeAccesses\" [label]=\"scopeAccess.scopeDescription\">\n            <ka-edit-roles class=\"block mt-4\" [scopeKey]=\"scopeAccess.scopeDescription\" [scope]=\"scopeAccess.scope\"\n                           [updatedScopes]=\"scopeRoles[scopeAccess.scope]\" [hideApply]=\"true\" [userService]=\"userService\"></ka-edit-roles>\n        </mat-tab>\n    </mat-tab-group>\n\n    <div class=\"flex align-center justify-between mt2 mt-6\">\n        <div></div>\n        <button mat-flat-button color=\"primary\" class=\"but butsm\" (click)=\"save()\" [disabled]=\"!emailAddress\">Invite User</button>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { AuthenticationService } from '../../../services/authentication.service';\nimport { BaseComponent } from '../../base-component';\n\n@Component({\n    selector: 'ka-edit-details',\n    templateUrl: './edit-details.component.html',\n    styleUrls: ['./edit-details.component.sass'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditDetailsComponent extends BaseComponent implements OnInit, OnDestroy {\n\n    @Input() user: any;\n    @Output('saved') saved: EventEmitter<any> = new EventEmitter();\n\n    public newEmailAddress = '';\n    public newName = '';\n    public currentPassword = '';\n    public saveError: string;\n    public emailAvailable = true;\n\n    private userSub: Subscription;\n\n    constructor(kcAuthService: AuthenticationService) {\n        super(kcAuthService);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        if (!this.user) {\n            return this.authService.getLoggedInUser().then(user => {\n                this.user = user;\n                this.newName = user.name;\n                this.newEmailAddress = user.emailAddress;\n            });\n        }\n        this.newName = this.user.name;\n        this.newEmailAddress = this.user.emailAddress;\n    }\n\n    ngOnDestroy(): void {\n\n    }\n\n    public checkEmail() {\n        this.authService.emailAvailable(this.newEmailAddress).then(res => {\n            this.emailAvailable = res;\n        });\n    }\n\n    public saveEmailAddress() {\n        this.saveError = '';\n        this.authService.changeUserDetails(this.newEmailAddress, this.newName, this.currentPassword, this.user.id)\n            .then(user => {\n                this.user = user;\n                this.saved.emit(user);\n            })\n            .catch(err => {\n                this.saveError = 'There was a problem updating your details, please check and try again.';\n            });\n    }\n\n}\n","<p class=\"mb2\">\n    Update your basic account details here. You will be required to confirm you identity by entering your password\n    prior to saving the new details.\n</p>\n\n<div class=\"mb2\">\n    <label>Change the name for this account.</label>\n    <input type=\"email\" placeholder=\"New name\" [(ngModel)]=\"newName\">\n</div>\n\n<div class=\"mb2\">\n    <label>Change email address for this account.</label>\n    <input type=\"email\" placeholder=\"New email address\" [(ngModel)]=\"newEmailAddress\"\n           (change)=\"checkEmail()\" email #email=\"ngModel\" maxlength=\"200\">\n    <span style=\"color: red\" *ngIf=\"!emailAvailable\">An account already exists with this email address</span>\n    <span style=\"color: red\" *ngIf=\"email.invalid\">Not a valid email address</span>\n</div>\n\n<div class=\"mb2\">\n    <label>Enter current password to confirm changes.</label>\n    <input type=\"password\" placeholder=\"Enter password\" [(ngModel)]=\"currentPassword\" maxlength=\"100\">\n</div>\n\n<div class=\"flex align-center justify-between\">\n    <div></div>\n    <button type=\"button\" class=\"but butsm\"\n            [disabled]=\"!emailAvailable || !newEmailAddress || !newName || !currentPassword || email.invalid\"\n            (click)=\"saveEmailAddress()\">\n        Update details\n    </button>\n</div>\n\n\n<p *ngIf=\"saveError\" class=\"mt2 flex align-center error\">\n    {{saveError}}\n</p>\n","import {Injectable} from '@angular/core';\nimport {KinibindRequestService} from 'ng-kinibind';\nimport {KiniAuthModuleConfig} from '../../ng-kiniauth.module';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationService {\n\n    public notificationCount = new BehaviorSubject<number>(0);\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig) {\n    }\n\n    public getNotification(id) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/item', {\n            params: {id}\n        }).toPromise();\n    }\n\n    public getUserNotifications(projectKey = '', limit = '10', offset = '0') {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/', {\n            params: {projectKey, limit, offset}\n        }).toPromise();\n    }\n\n    public getUnreadNotificationCount() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/notification/unreadCount')\n            .toPromise().then(count => {\n                this.notificationCount.next(count);\n                return count;\n            });\n    }\n\n    public markNotificationsRead(notificationIds: any[]) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/notification/markRead', notificationIds)\n            .toPromise().then(() => {\n                this.getUnreadNotificationCount();\n            });\n    }\n\n    public markNotificationsUnread(notificationIds: any[]) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/notification/markUnread', notificationIds)\n            .toPromise().then(() => {\n                this.getUnreadNotificationCount();\n            });\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {NotificationService} from '../../services/notification.service';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\n\n@Component({\n    selector: 'ka-notifications',\n    templateUrl: './notifications.component.html',\n    styleUrls: ['./notifications.component.sass']\n})\nexport class NotificationsComponent implements OnInit {\n\n    public notifications: any = [];\n    public selectAll = false;\n    public someSelected = false;\n\n    constructor(private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.notificationService.getUserNotifications()\n            .then(notifications => this.notifications = notifications);\n    }\n\n    public selectAllChange(value) {\n        this.notifications.forEach(notification => {\n            notification._checked = value;\n        });\n        this.someSelected = _.some(this.notifications, '_checked');\n    }\n\n    public checkboxChange(value) {\n        this.selectAll = _.every(this.notifications, '_checked');\n        this.someSelected = _.some(this.notifications, '_checked');\n    }\n\n    public markSelectedRead() {\n        const selected = _.filter(this.notifications, '_checked');\n        this.notificationService.markNotificationsRead(_.map(selected, 'id')).then(() => {\n            _.forEach(selected, notification => {\n                notification.read = true;\n            });\n        });\n    }\n\n    public markSelectedUnread() {\n        const selected = _.filter(this.notifications, '_checked');\n        this.notificationService.markNotificationsUnread(_.map(selected, 'id')).then(() => {\n            _.forEach(selected, notification => {\n                notification.read = false;\n            });\n        });\n    }\n}\n","<div class=\"flex align-center justify-between\">\n    <div></div>\n    <button mat-flat-button [matMenuTriggerFor]=\"actionMenu\" color=\"primary\" [disabled]=\"!someSelected\">Actions</button>\n    <mat-menu #actionMenu=\"matMenu\">\n        <button mat-menu-item (click)=\"markSelectedRead()\">Mark Selected as Read</button>\n        <button mat-menu-item (click)=\"markSelectedUnread()\">Mark Selected as Unread</button>\n    </mat-menu>\n</div>\n\n<table mat-table [dataSource]=\"notifications\">\n\n    <!-- Position Column -->\n    <ng-container matColumnDef=\"check\">\n        <th mat-header-cell *matHeaderCellDef> <mat-checkbox class=\"pl-2\" [(ngModel)]=\"selectAll\" (ngModelChange)=\"selectAllChange($event)\"></mat-checkbox> </th>\n        <td mat-cell *matCellDef=\"let element\" [ngClass]=\"{'bg-blue-50 border-l-4 border-blue-200': !element.read}\">\n            <mat-checkbox class=\"pl-2\" [(ngModel)]=\"element._checked\" (ngModelChange)=\"checkboxChange($event)\"></mat-checkbox>\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"title\">\n        <th mat-header-cell *matHeaderCellDef> Title </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"truncate w-1/4 max-w-xs\"\n            [ngClass]=\"{'bg-blue-50': !element.read}\"\n            [routerLink]=\"['/notifications', element.id]\"> {{element.title}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"content\">\n        <th mat-header-cell *matHeaderCellDef> Content </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"truncate w-1/4 max-w-xs\"\n            [ngClass]=\"{'bg-blue-50': !element.read}\"\n            [routerLink]=\"['/notifications', element.id]\">\n            <span class=\"capitalize\">{{element.content}}</span>\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"date\">\n        <th mat-header-cell *matHeaderCellDef> Date </th>\n        <td mat-cell *matCellDef=\"let element\" [ngClass]=\"{'bg-blue-50': !element.read}\"\n            [routerLink]=\"['/notifications', element.id]\">\n            {{element.formattedDate}}\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"level\">\n        <th mat-header-cell *matHeaderCellDef>  </th>\n        <td mat-cell *matCellDef=\"let element\" class=\"text-right\" [ngClass]=\"{'bg-blue-50': !element.read}\"\n            [routerLink]=\"['/notifications', element.id]\">\n            <mat-chip-list class=\"flex justify-end\">\n                <mat-chip *ngIf=\"element.level.key === 'critical'\" color=\"warn\" class=\"capitalize\" selected>{{element.level.title}}</mat-chip>\n                <mat-chip *ngIf=\"element.level.key === 'warning'\" class=\"bg-yellow-500 capitalize\" selected>{{element.level.title}}</mat-chip>\n                <mat-chip *ngIf=\"element.level.key === 'info'\" color=\"primary\" class=\"capitalize\" selected>{{element.level.title}}</mat-chip>\n            </mat-chip-list>\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n        <th mat-header-cell *matHeaderCellDef>  </th>\n        <td mat-cell *matCellDef=\"let element\" [ngClass]=\"{'bg-blue-50': !element.read}\" class=\"text-right\"\n            [routerLink]=\"['/notifications', element.id]\">\n\n        </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"['check', 'title', 'content', 'date', 'level', 'action']\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: ['check', 'title', 'content', 'date', 'level', 'action'];\"></tr>\n</table>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {NotificationService} from '../../../services/notification.service';\n\n@Component({\n    selector: 'ka-notification',\n    templateUrl: './notification.component.html',\n    styleUrls: ['./notification.component.sass']\n})\nexport class NotificationComponent implements OnInit {\n\n    public notification: any;\n\n    private notificationId;\n\n    constructor(private route: ActivatedRoute,\n                private notificationService: NotificationService) {\n    }\n\n    ngOnInit() {\n        this.notificationId = this.route.snapshot.params.id;\n        this.notificationService.getNotification(this.notificationId).then(notification => {\n            if (notification && !notification.read) {\n                notification.read = true;\n                this.notificationService.markNotificationsRead([this.notificationId]);\n            }\n            this.notification = notification;\n        });\n    }\n\n    public updateNotificationRead(event) {\n        const markFunction = event ? 'markNotificationsRead' : 'markNotificationsUnread';\n        this.notificationService[markFunction]([this.notificationId]);\n    }\n\n}\n","<!-- This example requires Tailwind CSS v2.0+ -->\n<div *ngIf=\"notification\" class=\"bg-white shadow overflow-hidden sm:rounded-lg\">\n    <div class=\"px-4 py-5 sm:px-6\">\n        <h3 class=\"text-lg leading-6 font-medium text-gray-900\">\n            {{notification.title}}\n        </h3>\n        <p class=\"mt-1 max-w-2xl text-sm text-gray-500\">\n            Notification\n        </p>\n    </div>\n    <div class=\"border-t border-gray-200\">\n        <dl>\n            <div class=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Received at\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    {{notification.formattedDate}}\n                </dd>\n            </div>\n            <div class=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Content\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    {{notification.content}}\n                </dd>\n            </div>\n            <div class=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Level\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    <mat-chip-list>\n                        <mat-chip *ngIf=\"notification.level.key === 'critical'\" color=\"warn\" class=\"capitalize\" selected>{{notification.level.title}}</mat-chip>\n                        <mat-chip *ngIf=\"notification.level.key === 'warning'\" class=\"bg-yellow-500 capitalize\" selected>{{notification.level.title}}</mat-chip>\n                        <mat-chip *ngIf=\"notification.level.key === 'info'\" color=\"primary\" class=\"capitalize\" selected>{{notification.level.title}}</mat-chip>\n                    </mat-chip-list>\n                </dd>\n            </div>\n            <div class=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Category\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    {{notification.category}}\n                </dd>\n            </div>\n            <div class=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt class=\"text-sm font-medium text-gray-500\">\n                    Read\n                </dt>\n                <dd class=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                    <mat-checkbox [(ngModel)]=\"notification.read\" (ngModelChange)=\"updateNotificationRead($event)\"></mat-checkbox>\n                </dd>\n            </div>\n        </dl>\n    </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {BehaviorSubject, merge, Subject} from 'rxjs';\nimport {AccountService} from '../../services/account.service';\nimport {Router} from '@angular/router';\nimport {debounceTime, distinctUntilChanged, map, switchMap} from 'rxjs/operators';\nimport * as lodash from 'lodash';\nconst _ = lodash.default;\n\n@Component({\n    selector: 'ka-accounts',\n    templateUrl: './accounts.component.html',\n    styleUrls: ['./accounts.component.sass']\n})\nexport class AccountsComponent implements OnInit {\n\n    @Input() accountClickThrough: string;\n\n    public accounts: any[];\n    public searchText = new BehaviorSubject<string>('');\n    public limit = new BehaviorSubject<number>(100);\n    public offset = new BehaviorSubject<number>(0);\n    public pageIndex = 0;\n    public resultSize = 0;\n    public reloadAccounts = new Subject();\n    public allSelected = false;\n    public selectionMade = false;\n    public lodash = _;\n    public passwordReset = false;\n    public accountUnlocked = false;\n    public accountSuspended = false;\n    public newAccount = false;\n    public newAccountEmail = '';\n    public newAccountName = '';\n    public newAccountPassword: string = null;\n    public newAccountAdded = false;\n\n    constructor(private accountService: AccountService,\n                private router: Router) {\n    }\n\n    ngOnInit() {\n        merge(this.searchText, this.limit, this.offset, this.reloadAccounts)\n            .pipe(\n                debounceTime(300),\n                distinctUntilChanged(),\n                switchMap(() =>\n                    this.getAccounts()\n                )\n            )\n            .subscribe((accounts: any) => {\n                this.accounts = accounts;\n            });\n    }\n\n    public accountAction(account) {\n        if (this.accountClickThrough) {\n            this.router.navigate([this.accountClickThrough, account.accountId]);\n        }\n    }\n\n    public saveNewAdminUser() {\n        if (this.newAccountPassword && this.newAccountPassword.length < 8) {\n            return true;\n        }\n\n        return this.accountService.createAccount(this.newAccountName, this.newAccountEmail, this.newAccountPassword || null, null)\n            .then(res => {\n                this.newAccountName = '';\n                this.newAccountEmail = '';\n                this.newAccountPassword = null;\n                this.newAccount = false;\n                this.newAccountAdded = true;\n                this.reloadAccounts.next(Date.now());\n                setTimeout(() => {\n                    this.newAccountAdded = false;\n                }, 3000);\n            });\n    }\n\n    public viewAccount(user) {\n\n    }\n\n    public toggleSelectAllUsers() {\n        this.allSelected = !this.allSelected;\n        this.selectionMade = this.allSelected;\n        this.accounts = this.lodash.map(this.accounts, user => {\n            user.selected = this.allSelected;\n            return user;\n        });\n    }\n\n    public toggleUsersSelected(user) {\n        user.selected = !user.selected;\n        this.selectionMade = this.lodash.some(this.accounts, 'selected');\n    }\n\n    public search(searchTerm: string) {\n        this.searchText.next(searchTerm);\n    }\n\n    public updatePage(pageEvent) {\n        const limit = this.limit.getValue();\n\n        if (pageEvent.pageSize !== limit) {\n            this.offset.next(0);\n            this.limit.next(pageEvent.pageSize);\n            this.pageIndex = 0;\n        } else {\n            this.offset.next(pageEvent.pageSize * (pageEvent.pageIndex));\n            this.pageIndex = pageEvent.pageIndex;\n        }\n    }\n\n    public reactivate(account, note) {\n        this.accountService.reactivateAccount(account.accountId, note).then(() => {\n            this.accountUnlocked = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.accountUnlocked = false;\n            }, 3000);\n        });\n    }\n\n    public suspend(account, note) {\n        this.accountService.suspendAccount(account.accountId, note).then(() => {\n            this.accountSuspended = true;\n            this.reloadAccounts.next(Date.now());\n            setTimeout(() => {\n                this.accountSuspended = false;\n            }, 3000);\n        });\n    }\n\n    private getAccounts() {\n        return this.accountService.searchForAccounts(\n            this.searchText.getValue(),\n            this.limit.getValue(),\n            this.offset.getValue()\n        ).pipe(map((data: any) => {\n            this.resultSize = data.length;\n            return data;\n        }));\n    }\n\n}\n","<div class=\"p-6 bg-white border-b border-gray-200\">\n    <div class=\"md:flex md:items-center md:justify-between md:space-x-5\">\n        <div class=\"flex items-start flex-1\">\n            <div class=\"pt-1.5\">\n                <h1 class=\"text-2xl font-bold text-gray-900\">Accounts</h1>\n                <p class=\"text-sm font-medium text-gray-500\">\n                    A list of all the accounts in the system.\n                </p>\n            </div>\n        </div>\n        <div class=\"mt-6 flex flex-col-reverse justify-stretch\">\n            <button type=\"button\" (click)=\"newAccount = true;\"\n                    class=\"inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary focus:outline-none\">\n                Create New Account\n            </button>\n        </div>\n    </div>\n</div>\n<div class=\"px-4 sm:px-6 lg:px-8 mt-0\">\n    <div class=\"flex flex-col\">\n        <div class=\"-my-2 -mx-4 sm:-mx-6 lg:-mx-8\">\n            <div class=\"inline-block min-w-full py-2 align-middle\">\n\n                <div *ngIf=\"newAccountAdded\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\"\n                         viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                    </svg>\n                    <div class=\"text-lg\">New account successfully added.</div>\n                </div>\n\n                <div *ngIf=\"newAccount\" class=\"px-6 pb-6 mt-4 flex flex-col border-b\">\n                    <p><b>Add New Account</b></p>\n                    <input type=\"text\" [(ngModel)]=\"newAccountName\" placeholder=\"Enter name for the new account\">\n\n                    <input class=\"mt-2\" type=\"email\" [(ngModel)]=\"newAccountEmail\"\n                           placeholder=\"Enter email address for account user\">\n                    <input class=\"mt-2\" type=\"password\" [(ngModel)]=\"newAccountPassword\"\n                           placeholder=\"Enter password for user\"\n                           [ngClass]=\"{'border border-red-600': newAccountPassword && newAccountPassword.length < 8}\">\n                    <div *ngIf=\"newAccountPassword && newAccountPassword.length < 8\">\n                        <small class=\"text-red-600\">Password must be at least 8 characters long.</small>\n                    </div>\n                    <div><small>If no password is entered, one will be auto generated and sent to the user by\n                        email.</small></div>\n                    <div class=\"flex items-center justify-between my-4\">\n                        <div></div>\n                        <button (click)=\"saveNewAdminUser()\"\n                                class=\"py-2 px-4 bg-secondary text-white font-semibold rounded-md focus:outline-none\">\n                            Save New Account\n                        </button>\n                    </div>\n                </div>\n\n                <div *ngIf=\"passwordReset\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-success h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                    <div class=\"text-lg\">Password reset email sent. Please check your email for further instructions</div>\n                </div>\n\n                <div *ngIf=\"accountUnlocked\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-primary h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z\" />\n                    </svg>\n                    <div class=\"text-lg\">This account has been successfully reactivated.</div>\n                </div>\n\n                <div *ngIf=\"accountSuspended\" class=\"my-8 flex items-center justify-center\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-16 w-16 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\" />\n                    </svg>\n                    <div class=\"text-lg\">This account has been suspended.</div>\n                </div>\n\n                <div class=\"mt-3 sm:mt-0 flex-1\">\n                    <label for=\"mobile-search-candidate\" class=\"sr-only\">Search</label>\n                    <div class=\"flex\">\n                        <div class=\"relative flex-grow focus-within:z-10\">\n                            <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                                <svg class=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\"\n                                     viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                                    <path fill-rule=\"evenodd\"\n                                          d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                                          clip-rule=\"evenodd\"/>\n                                </svg>\n                            </div>\n                            <input type=\"text\" name=\"mobile-search-candidate\" id=\"mobile-search-candidate\"\n                                   class=\"block w-full rounded-none pl-10 border-t-0 border-l-0 border-gray-300\"\n                                   placeholder=\"Search users\"\n                                   (keyup)=\"searchText.next($event.target.value)\">\n                        </div>\n                    </div>\n                </div>\n                <table class=\"min-w-full border-separate bg-white\" style=\"border-spacing: 0\">\n                    <ng-template [ngIf]=\"accounts && accounts.length\">\n\n                        <thead class=\"bg-gray-100\">\n                        <tr>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Name\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 text-left text-xs font-semibold text-gray-900 backdrop-blur backdrop-filter\">\n                                Status\n                            </th>\n                            <th scope=\"col\"\n                                class=\"sticky top-0 z-10 border-b border-gray-300 bg-gray-50 bg-opacity-75 py-3.5 px-4 backdrop-blur backdrop-filter\">\n                                <span class=\"sr-only\">Edit</span>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody *ngFor=\"let account of accounts; let i = index\">\n                        <tr class=\"hover:bg-gray-50 cursor-pointer\" (click)=\"accountAction(account)\">\n                            <td (click)=\"viewAccount(account)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm font-medium text-gray-900\">\n                                {{account.name}}\n                            </td>\n                            <td (click)=\"viewAccount(account)\"\n                                class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                <span [ngClass]=\"{'bg-success': account.status === 'ACTIVE', 'bg-primary': account.status === 'PENDING', 'bg-danger': account.status === 'SUSPENDED'}\"\n                                      class=\"capitalize inline-flex rounded-full bg-gray-500 px-2 text-xs font-semibold leading-5 text-white\">\n                                    {{account.status.toLowerCase()}}</span>\n                            </td>\n                            <td class=\"whitespace-nowrap border-gray-200 px-4 py-2 text-sm text-gray-500\">\n                                <div class=\"flex items-center justify-end\">\n                                    <button mat-button [matMenuTriggerFor]=\"menu\" color=\"primary\">\n                                        Actions\n                                        <mat-icon>keyboard_arrow_down</mat-icon>\n                                    </button>\n                                    <mat-menu #menu=\"matMenu\">\n                                        <button mat-menu-item (click)=\"account.showNoteField = 'reactivate'\"\n                                                *ngIf=\"account.status === 'LOCKED' || account.status === 'SUSPENDED'\">\n                                            Reactivate\n                                        </button>\n                                        <button mat-menu-item (click)=\"account.showNoteField = 'suspend'\"\n                                                *ngIf=\"account.status !== 'SUSPENDED'\">\n                                            Suspend\n                                        </button>\n                                    </mat-menu>\n                                </div>\n                            </td>\n                        </tr>\n                        <tr *ngIf=\"account.showNoteField\" class=\"hover:bg-white\">\n                            <td [colSpan]=\"3\" class=\"pl-4\">\n                                <div class=\"my-2\">\n                                    <input type=\"text\" [ngClass]=\"{'border border-red-600': !account.note}\"\n                                           class=\"w-full \" [(ngModel)]=\"account.note\"\n                                           placeholder=\"Please enter accompanying note\">\n                                </div>\n                                <div class=\"flex items-center justify-between mt-4\">\n                                    <button\n                                        class=\"py-2 px-4 border border-gray-500 text-gray-500 font-semibold rounded-md hover:bg-gray-50 focus:outline-none\"\n                                        (click)=\"account.showNoteField = ''\">\n                                        Cancel\n                                    </button>\n                                    <button [disabled]=\"!account.note\"\n                                            (click)=\"account.showNoteField === 'suspend' ? suspend(account, account.note) : reactivate(account, account.note)\"\n                                            class=\"disabled:opacity-50 py-2 px-4 bg-primary text-white font-semibold rounded-md focus:outline-none\">\n                                        Save note and {{account.showNoteField}}\n                                    </button>\n                                </div>\n                            </td>\n                        </tr>\n                        </tbody>\n                        <tbody>\n                        <tr>\n                            <td colspan=\"4\"\n                                class=\"whitespace-nowrap border-b border-gray-200 py-3 px-4 text-sm font-medium text-gray-900\">\n                                <div class=\"paging-toolbar flex align-center justify-end\">\n                                    <mat-paginator class=\"user-paginator flex1 pl050 mb0\" [length]=\"resultSize\"\n                                                   [pageSize]=\"limit.getValue()\"\n                                                   [pageIndex]=\"pageIndex\"\n                                                   [pageSizeOptions]=\"[5, 10, 25, 100, 500, 1000]\"\n                                                   (page)=\"updatePage($event)\">\n                                    </mat-paginator>\n                                </div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </ng-template>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport {BaseComponent} from '../base-component';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n    selector: 'ka-invitation',\n    templateUrl: './invitation.component.html',\n    styleUrls: ['./invitation.component.sass']\n})\nexport class InvitationComponent extends BaseComponent implements OnInit {\n\n    @Input() authenticationService: any;\n\n    public invitationCode: string;\n    public details: any = {};\n    public name = '';\n    public password = '';\n    public inviteAccepted = false;\n    public invitationError = false;\n\n    constructor(kcAuthService: AuthenticationService,\n                private route: ActivatedRoute) {\n        super(kcAuthService);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n\n        this.invitationCode = this.route.snapshot.queryParams.invitationCode;\n\n        this.authService.getInvitationDetails(this.invitationCode).then(details => {\n            this.details = details;\n        }).catch(err => {\n            this.invitationError = true;\n        });\n    }\n\n    public acceptInvitation() {\n        this.authService.acceptInvitation(this.invitationCode, this.name, this.password, this.details.emailAddress).then(() => {\n            this.inviteAccepted = true;\n        });\n    }\n\n}\n","<div class=\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\">\n\n    <div class=\"actioninfo p2w p1m\">\n        <ng-template [ngIf]=\"!inviteAccepted && !invitationError\">\n            <h4 class=\"mb1 mt0 flex align-center\">\n                <b>Invitation Details</b>\n            </h4>\n\n            <div class=\"mb1\">\n                <p class=\"mb-4\">You have been invited to join the {{details.accountName}} account using email address\n                    <b>{{details.emailAddress}}</b></p>\n\n                <ng-template [ngIf]=\"details.newUser\">\n\n                    <p class=\"mb-4\">Please enter your full name and create a new password in order to log into your account.</p>\n\n                    <p>\n                        <label>Full Name</label>\n                        <input class=\"w-full\" type=\"text\" [(ngModel)]=\"name\">\n                    </p>\n\n                    <p>\n                        <label>New Password</label>\n                        <input class=\"w-full\" type=\"password\" [(ngModel)]=\"password\">\n                    </p>\n\n                </ng-template>\n\n                <p class=\"mt-4\">To accept this invitation please click on the 'Accept Invitation' button.</p>\n            </div>\n        </ng-template>\n\n        <ng-template [ngIf]=\"inviteAccepted\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-green-500 h-24 w-24 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <div class=\"text-lg\">Invitation Accepted. You have been added to the {{details.accountName}} account.</div>\n            </div>\n        </ng-template>\n\n        <ng-template [ngIf]=\"invitationError\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-yellow-500 h-24 w-24 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n                </svg>\n                <div class=\"text-lg\">There was a problem with the invitation code supplied, please check and try again.</div>\n            </div>\n        </ng-template>\n\n    </div>\n    <div class=\"actions flex flex-col align-center justify-center p1\">\n        <button *ngIf=\"!inviteAccepted && !invitationError\" class=\"button small-button white-button disabled:opacity-50\" (click)=\"acceptInvitation()\"\n            [disabled]=\"details.newUser && (!name || !password)\">\n            Accept Invitation\n        </button>\n    </div>\n\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport {ActivatedRoute} from '@angular/router';\nimport {BaseComponent} from '../base-component';\n\n@Component({\n    selector: 'ka-password-reset',\n    templateUrl: './password-reset.component.html',\n    styleUrls: ['./password-reset.component.sass']\n})\nexport class PasswordResetComponent extends BaseComponent implements OnInit {\n\n    @Input() authenticationService: any;\n    @Input() loginRoute = '/login';\n    @Input() recaptchaKey: string;\n\n    public resetCode: string;\n    public codeError = false;\n    public resetError = false;\n    public resetComplete = false;\n    public resetEmail: string;\n    public password: string;\n    public confirmPassword: string;\n    public recaptchaResponse: string;\n\n    constructor(kcAuthService: AuthenticationService,\n                private route: ActivatedRoute) {\n        super(kcAuthService);\n    }\n\n    async ngOnInit() {\n        super.ngOnInit();\n\n        this.resetCode = this.route.snapshot.queryParams.code;\n\n        this.authService.getEmailForPasswordReset(this.resetCode).then(resetEmail => {\n            this.resetEmail = resetEmail;\n        }).catch(err => {\n            this.codeError = true;\n        });\n    }\n\n    public recaptchaResolved(response) {\n        this.recaptchaResponse = response;\n    }\n\n    public saveNewPassword() {\n        this.authService.resetPassword(this.resetEmail, this.confirmPassword, this.resetCode, this.recaptchaResponse)\n            .then(() => {\n                this.resetComplete = true;\n                setTimeout(() => {\n                    window.location.href = this.loginRoute;\n                }, 5000);\n            })\n            .catch(err => {\n                this.resetError = true;\n            });\n    }\n\n}\n","<div class=\"actionpanel sixtyforty mx1 mb2 mx-4 mb-8\">\n\n    <div class=\"actioninfo p2w p1m\">\n        <ng-template [ngIf]=\"resetEmail && !resetComplete && !resetError && !codeError\">\n            <h4 class=\"mb1 mt0 flex align-center\">\n                <b>Enter New Password</b>\n            </h4>\n\n            <div class=\"mb-4\">\n\n                <div class=\"mb-4\">\n                    <label>Current Email Address</label>\n                    <input class=\"w-full\" type=\"text\" [value]=\"resetEmail\" disabled>\n                </div>\n\n                <div class=\"mb-4\">\n                    <label>New Password</label>\n                    <input class=\"w-full\" type=\"password\" [(ngModel)]=\"password\">\n                </div>\n\n                <div class=\"mb-4\">\n                    <label>Confirm New Password</label>\n                    <input class=\"w-full\" type=\"password\" [(ngModel)]=\"confirmPassword\">\n                </div>\n\n                <div *ngIf=\"confirmPassword && password !== confirmPassword\"\n                     class=\"text-red-600 text-sm\">\n                    Passwords do not match\n                </div>\n\n            </div>\n\n            <re-captcha class=\"mt-4\" (resolved)=\"recaptchaResolved($event)\"\n                        [siteKey]=\"recaptchaKey\"></re-captcha>\n        </ng-template>\n\n        <ng-template [ngIf]=\"resetComplete\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-secondary h-24 w-24 mr-2\" fill=\"none\"\n                     viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                          d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                </svg>\n                <div class=\"text-lg\">Your password has been successfully reset.</div>\n            </div>\n\n            <a class=\"justify-center text-primary mt-8 cursor-pointer hover:underline flex items-center\"\n               [routerLink]=\"[loginRoute]\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\"\n                     stroke=\"currentColor\" stroke-width=\"2\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11 17l-5-5m0 0l5-5m-5 5h12\"/>\n                </svg>\n                Go to login\n            </a>\n        </ng-template>\n\n        <ng-template [ngIf]=\"codeError\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-24 w-24 mr-2\" fill=\"none\"\n                     viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                          d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n                </svg>\n                <div class=\"text-lg\">There was a problem with the reset code supplied, please check and try again.</div>\n            </div>\n        </ng-template>\n\n        <ng-template [ngIf]=\"resetError\">\n            <div class=\"my-8 flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"text-danger h-24 w-24 mr-2\" fill=\"none\"\n                     viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                          d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"/>\n                </svg>\n                <div class=\"text-lg\">There was a problem resetting your password at this time, please check and try again.</div>\n            </div>\n        </ng-template>\n\n    </div>\n    <div class=\"actions flex flex-col align-center justify-center p1\">\n        <button class=\"button small-button white-button disabled:opacity-50\"\n                *ngIf=\"resetEmail && !resetComplete && !resetError && !codeError\"\n                [disabled]=\"!confirmPassword || confirmPassword !== password\"\n                (click)=\"saveNewPassword()\">\n            Save New Password\n        </button>\n    </div>\n\n</div>\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NgKinibindModule } from 'ng-kinibind';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { AccountSummaryComponent } from './lib/views/account-summary/account-summary.component';\nimport { EditEmailComponent } from './lib/views/account-summary/edit-email/edit-email.component';\nimport { TwoFactorComponent } from './lib/views/account-summary/two-factor/two-factor.component';\nimport { LoginComponent } from './lib/views/auth/login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { InlineModalComponent } from './lib/views/inline-modal/inline-modal.component';\nimport { BaseComponent } from './lib/views/base-component';\nimport { EditBackupEmailComponent } from './lib/views/account-summary/edit-backup-email/edit-backup-email.component';\nimport { EditMobileComponent } from './lib/views/account-summary/edit-mobile/edit-mobile.component';\nimport { AddressBookComponent } from './lib/views/address-book/address-book.component';\nimport { ContactDetailsComponent } from './lib/views/contact-details/contact-details.component';\nimport { CountryCodesDirective } from './lib/directives/country-codes/country-codes.directive';\nimport { PostcodeLookupDirective } from './lib/directives/postcode-lookup/postcode-lookup.directive';\nimport { AccountUsersComponent } from './lib/views/account-users/account-users.component';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { UserRolesComponent } from './lib/views/user-roles/user-roles.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { EditRolesComponent } from './lib/views/user-roles/edit-roles/edit-roles.component';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { InviteUserComponent } from './lib/views/invite-user/invite-user.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { EditDetailsComponent } from './lib/views/account-summary/edit-details/edit-details.component';\nimport { EditNameComponent } from './lib/views/account-summary/edit-name/edit-name.component';\nimport { EditAccountNameComponent } from './lib/views/account-summary/edit-account-name/edit-account-name.component';\nimport { RecaptchaModule } from 'ng-recaptcha';\nimport { NotificationsComponent } from './lib/views/notifications/notifications.component';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatChipsModule} from '@angular/material/chips';\nimport { NotificationComponent } from './lib/views/notifications/notification/notification.component';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { AccountsComponent } from './lib/views/accounts/accounts.component';\nimport { InvitationComponent } from './lib/views/invitation/invitation.component';\nimport {HttpClientModule} from '@angular/common/http';\nimport { PasswordResetComponent } from './lib/views/password-reset/password-reset.component';\nimport { ChangePasswordComponent } from './lib/views/account-summary/change-password/change-password.component';\n\n@NgModule({\n    declarations: [\n        AccountSummaryComponent,\n        EditNameComponent,\n        EditEmailComponent,\n        TwoFactorComponent,\n        LoginComponent,\n        InlineModalComponent,\n        BaseComponent,\n        EditBackupEmailComponent,\n        EditMobileComponent,\n        AddressBookComponent,\n        ContactDetailsComponent,\n        CountryCodesDirective,\n        PostcodeLookupDirective,\n        AccountUsersComponent,\n        UserRolesComponent,\n        EditRolesComponent,\n        InviteUserComponent,\n        EditDetailsComponent,\n        EditAccountNameComponent,\n        NotificationsComponent,\n        NotificationComponent,\n        AccountsComponent,\n        InvitationComponent,\n        PasswordResetComponent,\n        ChangePasswordComponent\n    ],\n    imports: [\n        NgKinibindModule,\n        RouterModule,\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        MatPaginatorModule,\n        MatIconModule,\n        MatButtonModule,\n        MatMenuModule,\n        MatTabsModule,\n        RecaptchaModule,\n        MatTableModule,\n        MatChipsModule,\n        MatCheckboxModule\n    ],\n    exports: [\n        AccountSummaryComponent,\n        EditEmailComponent,\n        TwoFactorComponent,\n        LoginComponent,\n        AddressBookComponent,\n        ContactDetailsComponent,\n        AccountUsersComponent,\n        UserRolesComponent,\n        EditRolesComponent,\n        InviteUserComponent,\n        EditAccountNameComponent,\n        NotificationsComponent,\n        NotificationComponent,\n        AccountsComponent,\n        InvitationComponent,\n        PasswordResetComponent\n    ]\n})\nexport class NgKiniAuthModule {\n    static forRoot(conf?: KiniAuthModuleConfig): ModuleWithProviders<NgKiniAuthModule> {\n        return {\n            ngModule: NgKiniAuthModule,\n            providers: [\n                { provide: KiniAuthModuleConfig, useValue: conf || {} }\n            ]\n        };\n    }\n}\nexport class KiniAuthModuleConfig {\n    guestHttpURL: string;\n    accessHttpURL: string;\n}\n","import {Injectable} from '@angular/core';\nimport {KiniAuthModuleConfig} from '../../ng-kiniauth.module';\nimport {KinibindRequestService} from 'ng-kinibind';\nimport {BehaviorSubject} from 'rxjs/internal/BehaviorSubject';\nimport * as lodash from 'lodash';\n\nconst _ = lodash.default;\nimport * as sha512 from 'js-sha512' ;\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {map} from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthenticationService {\n\n    public authUser: BehaviorSubject<any> = new BehaviorSubject(null);\n    public sessionData: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n    public loadingRequests: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    constructor(private kbRequest: KinibindRequestService,\n                private config: KiniAuthModuleConfig,\n                private http: HttpClient) {\n\n        const user = sessionStorage.getItem('loggedInUser');\n        this.authUser.next(JSON.parse(user));\n\n        const sessionData = sessionStorage.getItem('sessionData');\n        if (sessionData && _.filter(JSON.parse(sessionData)).length) {\n            this.sessionData.next(JSON.parse(sessionData));\n        }\n    }\n\n    public async getLoggedInUser(reloadSession?): Promise<any> {\n        if (reloadSession || !this.sessionData.getValue()) {\n            await this.getSessionData();\n        }\n\n        const res = await this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user')\n            .toPromise();\n\n        if (res) {\n            await this.setSessionUser(res);\n            const sessionData = sessionStorage.getItem('sessionData');\n            if (sessionData && _.filter(JSON.parse(sessionData)).length) {\n                this.sessionData.next(JSON.parse(sessionData));\n            } else {\n                await this.getSessionData();\n            }\n            return res;\n        }\n        return null;\n    }\n\n    public login(username: string, password: string, clientTwoFactorData?, recaptcha?) {\n        const request = this.config.guestHttpURL + `/auth/login`;\n\n        const headers = new HttpHeaders({'X-CAPTCHA-TOKEN': recaptcha || ''});\n        const options: any = {headers};\n\n        return this.kbRequest.makePostRequest(request, {\n            emailAddress: username,\n            password: this.getHashedPassword(password, username),\n            clientTwoFactorData: clientTwoFactorData || null\n        }, options).toPromise().then((user: any) => {\n            if (user === 'REQUIRES_2FA') {\n                return user;\n            } else {\n                return this.getSessionData().then(() => {\n                    return this.setSessionUser(user);\n                });\n            }\n        });\n    }\n\n    public sendPasswordReset(emailAddress, recaptcha?) {\n        const headers = new HttpHeaders({'X-CAPTCHA-TOKEN': recaptcha || ''});\n\n        return this.http.get(this.config.guestHttpURL + '/auth/passwordReset', {\n            params: {emailAddress},\n            headers\n        }).toPromise();\n    }\n\n    public getEmailForPasswordReset(resetCode) {\n        return this.http.get(this.config.guestHttpURL + '/auth/passwordReset/' + resetCode)\n            .toPromise();\n    }\n\n    public resetPassword(emailAddress, newPassword, resetCode, recaptcha) {\n        const headers = new HttpHeaders({'X-CAPTCHA-TOKEN': recaptcha || ''});\n        const options: any = {headers};\n\n        return this.http.post(this.config.guestHttpURL + '/auth/passwordReset', {\n            newPassword: this.getHashedPassword(newPassword, emailAddress, true),\n            resetCode\n        }, options).toPromise();\n    }\n\n    public changeUserPassword(newPassword, existingPassword, email) {\n        return this.http.post(this.config.accessHttpURL + '/user/changeUserPassword', {\n            newPassword: this.getHashedPassword(newPassword, email, true),\n            password: this.getHashedPassword(existingPassword, email)\n        }).toPromise();\n    }\n\n    public updateApplicationSettings(settings) {\n        return this.http.put(this.config.accessHttpURL + '/user/applicationSettings', settings\n        ).toPromise();\n    }\n\n    public isAdminNow() {\n        const session = this.sessionData.getValue();\n        if (session && session.privileges) {\n            const accountId = session.account ? session.account.accountId : null;\n            const privileges = session.privileges.ACCOUNT;\n\n            if (privileges['*']) {\n                return true;\n            }\n\n            return privileges[accountId] ? privileges[accountId].indexOf('*') > -1 : false;\n        }\n        return false;\n    }\n\n    public isAdmin() {\n        return this.sessionData.pipe(map(session => {\n            if (session && session.privileges) {\n                const accountId = session.account ? session.account.accountId : null;\n                const privileges = session.privileges.ACCOUNT;\n\n                if (privileges['*']) {\n                    return true;\n                }\n\n                return privileges[accountId] ? privileges[accountId].indexOf('*') > -1 : false;\n            }\n            return false;\n        }));\n    }\n\n    public closeActiveSession() {\n        return this.kbRequest.makeGetRequest('/guest/auth/closeActiveSessions').toPromise()\n            .then(res => {\n                return this.getSessionData().then(() => {\n                    return res;\n                });\n            });\n    }\n\n    public generateTwoFactorSettings() {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/twoFactorSettings')\n            .toPromise();\n    }\n\n    public authenticateNewTwoFactor(code, secret) {\n        return this.kbRequest.makeGetRequest(this.config.accessHttpURL + '/user/newTwoFactor',\n            {\n                params: {code, secret}\n            }\n        ).toPromise().then(user => {\n            if (user) {\n                this.setSessionUser(user);\n            }\n            return user;\n        });\n    }\n\n    public async authenticateTwoFactor(code) {\n        const url = this.config.guestHttpURL + `/auth/twoFactor?code=${code}`;\n        const result = await this.kbRequest.makeGetRequest(url).toPromise();\n        if (result) {\n            sessionStorage.removeItem('pendingLoginSession');\n            await this.getLoggedInUser(true);\n            return result;\n        } else {\n            throw(result);\n        }\n    }\n\n    public disableTwoFactor() {\n        const url = this.config.accessHttpURL + '/user/disableTwoFA';\n        return this.kbRequest.makeGetRequest(url).toPromise().then(user => {\n            this.setSessionUser(user);\n        });\n    }\n\n    public doesUserExist(username: string) {\n        return Promise.resolve(true);\n    }\n\n    public emailAvailable(emailAddress) {\n        return this.kbRequest.makeGetRequest(\n            this.config.accessHttpURL + `/auth/emailExists?emailAddress=${emailAddress}`\n        ).toPromise().then(res => {\n            return !res;\n        });\n    }\n\n    public getInvitationDetails(invitationCode) {\n        return this.kbRequest.makeGetRequest(\n            this.config.guestHttpURL + `/registration/invitation/${invitationCode}`\n        ).toPromise();\n    }\n\n    public acceptInvitation(invitationCode, name = '', password = '', email = '') {\n        return this.kbRequest.makePostRequest(\n            this.config.guestHttpURL + `/registration/invitation/${invitationCode}`,\n            {name, password: this.getHashedPassword(password, email, true)}\n        ).toPromise();\n    }\n\n    public validateUserPassword(emailAddress, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/auth/validatePassword', {\n            emailAddress,\n            password: this.getHashedPassword(password)\n        }).toPromise();\n    }\n\n    public changeUserDetails(newEmailAddress, newName, password, userId?) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeDetails', {\n            newEmailAddress,\n            newName,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public changeUserName(newName, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeName', {\n            newName,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public changeUserEmailAddress(newEmailAddress, password) {\n        const sessionData = this.sessionData.getValue();\n        const params: any = {newEmailAddress, password};\n        if (sessionData.sessionSalt) {\n            params.password = this.getHashedPassword(password);\n            params.hashedPassword = sha512.sha512(password + newEmailAddress);\n        }\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeEmail', params).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public changeUserBackEmailAddress(newEmailAddress, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeBackupEmail', {\n            newEmailAddress,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public changeUserMobile(newMobile, password) {\n        return this.kbRequest.makePostRequest(this.config.accessHttpURL + '/user/changeMobile', {\n            newMobile,\n            password: this.getHashedPassword(password)\n        }).toPromise().then(res => {\n            if (res) {\n                return this.getLoggedInUser();\n            }\n        });\n    }\n\n    public getGoogleAuthSettings() {\n        return Promise.resolve(123);\n    }\n\n    public logout() {\n        this.authUser.next(null);\n        this.sessionData.next(null);\n        sessionStorage.clear();\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + '/auth/logout')\n            .toPromise();\n    }\n\n    public setSessionUser(user) {\n        sessionStorage.setItem('loggedInUser', JSON.stringify(user));\n        this.authUser.next(user);\n        return Promise.resolve(user);\n    }\n\n    public setLoadingRequest(value) {\n        this.loadingRequests.next(value);\n    }\n\n    public sessionTransfer(token) {\n        return this.http.post(this.config.guestHttpURL + '/auth/sessionTransfer', token).toPromise();\n    }\n\n    public getSessionData() {\n        return this.kbRequest.makeGetRequest(this.config.guestHttpURL + '/session')\n            .toPromise()\n            .then(sessionData => {\n                if (sessionData) {\n                    sessionStorage.setItem('sessionData', JSON.stringify(sessionData));\n                    this.sessionData.next(sessionData);\n                    return sessionData;\n                } else {\n                    sessionStorage.removeItem('sessionData');\n                    this.sessionData.next(null);\n                    return null;\n                }\n            });\n    }\n\n    public getHashedPassword(password, emailAddress?, newPassword = false) {\n        let hashedPassword;\n        const sessionData = this.sessionData.getValue();\n        const loggedInUser = this.authUser.getValue();\n\n        const email = emailAddress ? emailAddress : (loggedInUser ? loggedInUser.emailAddress : '');\n\n        const hash = sha512.sha512(password + email);\n        if (newPassword) {\n            return hash;\n        }\n\n        if (email && sessionData && sessionData.sessionSalt) {\n            hashedPassword = sha512.sha512(hash + sessionData.sessionSalt);\n        }\n        return hashedPassword || password;\n    }\n}\n","/*\n * Public API Surface of ng-kiniauth\n */\n\n\n// Services\nexport * from './lib/services/authentication.service';\nexport * from './lib/services/user.service';\nexport * from './lib/services/notification.service';\nexport * from './lib/services/account.service';\n\n// Components\nexport * from './lib/views/account-summary/account-summary.component';\nexport * from './lib/views/account-summary/edit-email/edit-email.component';\nexport * from './lib/views/account-summary/two-factor/two-factor.component';\nexport * from './lib/views/auth/login/login.component';\nexport * from './lib/views/address-book/address-book.component';\nexport * from './lib/views/contact-details/contact-details.component';\nexport * from './lib/views/account-users/account-users.component';\nexport * from './lib/views/user-roles/user-roles.component';\nexport * from './lib/views/user-roles/edit-roles/edit-roles.component';\nexport * from './lib/views/invite-user/invite-user.component';\nexport * from './lib/views/account-summary/edit-account-name/edit-account-name.component';\nexport * from './lib/views/notifications/notifications.component';\nexport * from './lib/views/notifications/notification/notification.component';\nexport * from './lib/views/accounts/accounts.component';\nexport * from './lib/views/invitation/invitation.component';\nexport * from './lib/views/password-reset/password-reset.component';\n\nexport * from './ng-kiniauth.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.AuthenticationService","_","i2.KiniAuthModuleConfig","i3.AuthenticationService","i1","i2.AccountService","i4.EditNameComponent","i5.EditEmailComponent","i6.TwoFactorComponent","i7.InlineModalComponent","i8.EditBackupEmailComponent","i9.EditMobileComponent","i10.EditAccountNameComponent","i11.ChangePasswordComponent","i2.AuthenticationService","i4","i1.ContactService","i2","i3","i4.ContactService","i5","Subject","i1.UserService","i7","i8","i3.RoleService","i4.AuthenticationService","i6","i8.EditRolesComponent","i1.RoleService","i4.UserService","i9.EditRolesComponent","i1.NotificationService","i9","i2.NotificationService","i1.AccountService","BehaviorSubject"],"mappings":"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"}}}